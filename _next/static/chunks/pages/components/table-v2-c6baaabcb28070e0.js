(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8769],{37166:function(n,e,t){"use strict";t.d(e,{Z:function(){return c}});var a,o,s=t(38443),r=t(48329),l=t.n(r),i=t(97458);function c(){return(0,i.jsxs)(s.Flexbox,{css:{marginBottom:"$4"},children:[(0,i.jsx)(l(),{href:"https://github.com/comfortdelgro/compass-design",target:"_blank",style:{textDecoration:"none"},children:a||(a=(0,i.jsx)(s.Badge,{label:"Github",color:"info",variant:"outline"}))}),(0,i.jsx)(l(),{href:"https://www.figma.com/file/JSiK3cmMmxTt8qhR3dty8t/Workbench-Design-System?type=design&node-id=502-54719&mode=design&t=a4SJbARIttEHmcZS-0",target:"_blank",style:{textDecoration:"none"},children:o||(o=(0,i.jsx)(s.Badge,{label:"Figma",color:"danger",variant:"outline"}))})]})}},13290:function(n,e,t){"use strict";t.r(e),t.d(e,{default:function(){return z}});var a,o,s,r,l,i,c,p,d,u,m,g,f,h,b,k,v={};t.r(v),t.d(v,{demoComponents:function(){return E},demos:function(){return q},docs:function(){return F},srcComponents:function(){return K}});var y=t(2815),x=t(30031),w=t(66580),D=t(38443),S=t(73488),C=t(52983),R=t.t(C,2),T=t(7148),M=t(12717),N=t(97458),P=function(n){for(var e=[],t=0;t<n;t++)e.push(t);return e},A=function(n,e){var t=n.getTime(),a=e.getTime();return new Date(Math.floor(Math.random()*(a-t+1)+t))};function L(n){var e=["James","Mary","John","Patricia","Robert","Jennifer","Michael","Linda","William","Elizabeth","David","Susan","Joseph","Jessica","Charles","Sarah","Thomas","Karen","Daniel","Nancy","Matthew","Lisa","Anthony","Margaret","Donald","Betty","Steven","Sandra","Paul","Ashley"],t=["Smith","Johnson","Williams","Jones","Brown","Davis","Miller","Wilson","Moore","Taylor","Anderson","Thomas","Jackson","White","Harris","Martin","Thompson","Garcia","Martinez","Robinson","Clark","Rodriguez","Lewis","Lee","Walker","Hall","Allen","Young","King"];return"firstName"===n?"".concat(e[Math.floor(Math.random()*e.length)]):"".concat(t[Math.floor(Math.random()*t.length)])}var I=function(n){for(var e=[],t=0;t<n;t++)e.push(t);return e},V=function(n){for(var e="",t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",a=t.length,o=0;o<n;o++)e+=t.charAt(Math.floor(Math.random()*a));return e},j=function(n,e){var t=n.getTime(),a=e.getTime();return new Date(Math.floor(Math.random()*(a-t+1)+t))},H=function(){var n;return{id:V(5),accountName:(n=["Miss Reilly Lemke","Elizabeth Friesen","Dr. Doyle Boehm","Domenica Zemlak DDS","Samson Bogan","Thora Hilll","Shannon Mann","Mrs. Barry Franecki","Kendrick Balistreri","Daphnee Durgan","Stevie Herman","Salvador Koelpin","Milo Torphy","Amelie Halvorson","Cora Weissnat IV","Rey Watsica","Alexandria Murray","Angeline Schowalter","Britney Cole","Marlene Bosco"],"".concat(n[Math.floor(Math.random()*n.length)])),code:V(3),requestLimit:Math.floor(1e3*Math.random()),status:["Submited","Processing","Approval"][Math.floor(3*Math.random())],progress:[{id:V(5),remarks:"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam eleifend iaculis sodales. Pellentesque at metus felis. Nulla fermentum ipsum nec orci laoreet, at rhoncus eros dictum.",createdAt:j(new Date(2020,0,1),new Date(2029,11,31))},{id:V(5),remarks:"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam eleifend iaculis sodales. Pellentesque at metus felis. Nulla fermentum ipsum nec orci laoreet, at rhoncus eros dictum.",createdAt:j(new Date(2020,0,1),new Date(2029,11,31))},{id:V(5),remarks:"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam eleifend iaculis sodales. Pellentesque at metus felis. Nulla fermentum ipsum nec orci laoreet, at rhoncus eros dictum.",createdAt:j(new Date(2020,0,1),new Date(2029,11,31))}]}},B=t(37166),F={en:{description:'Table version 2 is a wrapper around the core table logic. Most of its job is related to managing state the "react" way.',location:"/docs/data/components/table-v2/table-v2.md",rendered:['\n      <svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="copied-icon" viewBox="0 0 24 24">\n        <path d="M20 2H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-8.24 11.28L9.69 11.2c-.38-.39-.38-1.01 0-1.4.39-.39 1.02-.39 1.41 0l1.36 1.37 4.42-4.46c.39-.39 1.02-.39 1.41 0 .38.39.38 1.01 0 1.4l-5.13 5.17c-.37.4-1.01.4-1.4 0zM3 6c-.55 0-1 .45-1 1v13c0 1.1.9 2 2 2h13c.55 0 1-.45 1-1s-.45-1-1-1H5c-.55 0-1-.45-1-1V7c0-.55-.45-1-1-1z" />\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="copy-icon" viewBox="0 0 24 24">\n      <path d="M15 20H5V7c0-.55-.45-1-1-1s-1 .45-1 1v13c0 1.1.9 2 2 2h10c.55 0 1-.45 1-1s-.45-1-1-1zm5-4V4c0-1.1-.9-2-2-2H9c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h9c1.1 0 2-.9 2-2zm-2 0H9V4h9v12z" />\n      +</symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n    <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n      <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n    </symbol>\n    </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="comment-link-icon" viewBox="0 0 24 24">\n        <path d="M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM6 14v-2.47l6.88-6.88c.2-.2.51-.2.71 0l1.77 1.77c.2.2.2.51 0 .71L8.47 14H6zm12 0h-7.5l2-2H18v2z" />\n      </symbol>\n      </svg>','<h1>Table-v2</h1><p class="description">Table version 2 is a wrapper around the core table logic. Most of its job is related to managing state the "react" way.</p>\n\n',{component:"components/common/ComponentLinkHeader.tsx"},'<div class="cdg-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span>ReactTable<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@comfortdelgro/react-compass\'</span>\n</code></pre><button aria-label="Copy the code" class="cdg-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24"><use class="cdg-copy-icon" xlink:href="#copy-icon" /><use class="cdg-copied-icon" xlink:href="#copied-icon" /></svg><span class="cdg-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>or</p>\n<div class="cdg-root"><pre><code class="language-jsx"><span class="token keyword">import</span> ReactTable <span class="token keyword">from</span> <span class="token string">\'@comfortdelgro/react-compass/table-v2\'</span>\n</code></pre><button aria-label="Copy the code" class="cdg-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24"><use class="cdg-copy-icon" xlink:href="#copy-icon" /><use class="cdg-copied-icon" xlink:href="#copied-icon" /></svg><span class="cdg-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h2 id="example">Example<a aria-labelledby="example" class="anchor-link" href="#example" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><h3 id="full-features">Full features<a aria-labelledby="full-features" class="anchor-link" href="#full-features" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3>',{demo:"ReactTable.tsx"},'<h3 id="expandable-column-table">Expandable Column Table<a aria-labelledby="expandable-column-table" class="anchor-link" href="#expandable-column-table" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3>',{demo:"ExpandableColumnTable.tsx"},'<h2 id="usage">Usage<a aria-labelledby="usage" class="anchor-link" href="#usage" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><h3 id="for-server-sorting">For server sorting<a aria-labelledby="for-server-sorting" class="anchor-link" href="#for-server-sorting" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>*if user want to custom sort. Add <code>manualSorting: true</code> to ReactTableOptions.</p>\n<div class="cdg-root"><pre><code class="language-js"><span class="token keyword">const</span> <span class="token literal-property property">options</span><span class="token operator">:</span> ReactTableOptions <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">enableSorting</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">enableMultiSort</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">columnResizeMode</span><span class="token operator">:</span> <span class="token string">\'onChange\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">manualSorting</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><button aria-label="Copy the code" class="cdg-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24"><use class="cdg-copy-icon" xlink:href="#copy-icon" /><use class="cdg-copied-icon" xlink:href="#copied-icon" /></svg><span class="cdg-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>*then create function and assign to <code>onManualSorting</code> props on ReactTable.</p>\n<p>Example</p>\n<div class="cdg-root"><pre><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">onSorting</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">sortingField</span><span class="token operator">:</span> TableV2SortingState</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'stateSorting\'</span><span class="token punctuation">,</span> sortingField<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><button aria-label="Copy the code" class="cdg-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24"><use class="cdg-copy-icon" xlink:href="#copy-icon" /><use class="cdg-copied-icon" xlink:href="#copied-icon" /></svg><span class="cdg-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<div class="cdg-root"><pre><code class="language-js"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ReactTable</span></span> <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>data<span class="token punctuation">}</span></span> <span class="token attr-name">columns</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>columns<span class="token punctuation">}</span></span> <span class="token attr-name">options</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>options<span class="token punctuation">}</span></span> <span class="token attr-name">onManualSorting</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>onSorting<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n</code></pre><button aria-label="Copy the code" class="cdg-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24"><use class="cdg-copy-icon" xlink:href="#copy-icon" /><use class="cdg-copied-icon" xlink:href="#copied-icon" /></svg><span class="cdg-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>*props <code>sortingField</code> contain all informations sorting for your need</p>\n<h3 id="columnconfig">ColumnConfig<a aria-labelledby="columnconfig" class="anchor-link" href="#columnconfig" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>Column definitions are plain objects with the following options:</p>\n<h4>Enable Resizing</h4><table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Type</th>\n<th align="left">Default</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>enableResizing</code></td>\n<td align="left">boolean</td>\n<td align="left"><code>false</code></td>\n<td align="left"><code>Enable column resize</code></td>\n</tr>\n</tbody></table>\n<h4>Enable column filter</h4><table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Type</th>\n<th align="left">Default</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>enableColumnFilter</code></td>\n<td align="left">boolean</td>\n<td align="left"><code>false</code></td>\n<td align="left"><code>Enable column filter</code></td>\n</tr>\n</tbody></table>\n<h4>Enable Grouping</h4><table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Type</th>\n<th align="left">Default</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>enableGrouping</code></td>\n<td align="left">boolean</td>\n<td align="left"><code>false</code></td>\n<td align="left"><code>Enable column grouping</code></td>\n</tr>\n</tbody></table>\n<h4>Meta</h4><p>Define further information about the column. Now <code>meta</code> is used to define <code>editable</code> columns.</p>\n<table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Type</th>\n<th align="left">Default</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>editable</code></td>\n<td align="left">boolean | undefined</td>\n<td align="left"><code>undefined</code></td>\n<td align="left"><code>Enable rendering editable column</code></td>\n</tr>\n<tr>\n<td align="left"><code>template</code></td>\n<td align="left">JSX Element | undefined</td>\n<td align="left"><code>undefined</code></td>\n<td align="left"><code>Enable rendering editable column</code></td>\n</tr>\n<tr>\n<td align="left"><code>updateData</code></td>\n<td align="left">(rowIndex: number, id: string, value: any) =&gt; void | undefined</td>\n<td align="left"><code>undefined</code></td>\n<td align="left"><code>Callback to update table data</code></td>\n</tr>\n<tr>\n<td align="left"><code>revertData</code></td>\n<td align="left">(rowIndex: number) =&gt; void | undefined</td>\n<td align="left"><code>undefined</code></td>\n<td align="left"><code>Callback to revert the table data</code></td>\n</tr>\n</tbody></table>\n<h4>Example</h4><div class="cdg-root"><pre><code class="language-tsx">  <span class="token punctuation">{</span>\n    <span class="token function-variable function">accessorFn</span><span class="token operator">:</span> <span class="token punctuation">(</span>row<span class="token punctuation">)</span> <span class="token operator">=></span> row<span class="token punctuation">.</span>lastName<span class="token punctuation">,</span>\n    id<span class="token operator">:</span> <span class="token string">\'lastName\'</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">cell</span><span class="token operator">:</span> <span class="token punctuation">(</span>info<span class="token punctuation">)</span> <span class="token operator">=></span> info<span class="token punctuation">.</span>getValue<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">header</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Last Name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">,</span>\n    <span class="token function-variable function">footer</span><span class="token operator">:</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=></span> props<span class="token punctuation">.</span>column<span class="token punctuation">.</span>id<span class="token punctuation">,</span>\n    enableResizing<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    enableColumnFilter<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    enableGrouping<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><button aria-label="Copy the code" class="cdg-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24"><use class="cdg-copy-icon" xlink:href="#copy-icon" /><use class="cdg-copied-icon" xlink:href="#copied-icon" /></svg><span class="cdg-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h3 id="editable-cell">Editable Cell<a aria-labelledby="editable-cell" class="anchor-link" href="#editable-cell" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>Press <code>ENTER</code> to finish editing the firstName cell, <code>Esc</code> to quit editing.</p>\n<p>Enable rendering customized template on top of the column cell.\nUsers can decide what to do with the template and update the table data.\nTo use this functionality:</p>\n<ul>\n<li>In the template component, use the hook <code>useEditableCellContext</code> that provides:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Type</th>\n<th align="left">Default</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>cell</code></td>\n<td align="left"><code>Cell&lt;TData, TValue&gt;</code></td>\n<td align="left"></td>\n<td align="left"><code>Cell object </code></td>\n</tr>\n<tr>\n<td align="left"><code>row</code></td>\n<td align="left"><code>number</code></td>\n<td align="left"></td>\n<td align="left"><code>row index</code></td>\n</tr>\n<tr>\n<td align="left"><code>column</code></td>\n<td align="left"><code>string</code></td>\n<td align="left"></td>\n<td align="left"><code>column name</code></td>\n</tr>\n<tr>\n<td align="left"><code>initialValue</code></td>\n<td align="left"><code>any</code></td>\n<td align="left">—</td>\n<td align="left"><code>cell initial value</code></td>\n</tr>\n<tr>\n<td align="left"><code>finishTemplateEditing</code></td>\n<td align="left"><code>(data) =&gt; void</code></td>\n<td align="left">—</td>\n<td align="left"><code>notify the table to call the update data function</code></td>\n</tr>\n<tr>\n<td align="left"><code>cancelTemplateEditing </code></td>\n<td align="left"><code>(data) =&gt; void</code></td>\n<td align="left">—</td>\n<td align="left"><code>notify the table to call the revert data function</code></td>\n</tr>\n</tbody></table>\n<ul>\n<li>In the ColumnConfig object, define <code>editable = true</code> and <code>updateData</code> callback. If <code>template</code> is not defined, the default input will render.</li>\n</ul>\n<div class="cdg-root"><pre><code class="language-tsx"><span class="token punctuation">{</span>\n    <span class="token function-variable function">accessorFn</span><span class="token operator">:</span> <span class="token punctuation">(</span>row<span class="token punctuation">)</span> <span class="token operator">=></span> row<span class="token punctuation">.</span>lastName<span class="token punctuation">,</span>\n    id<span class="token operator">:</span> <span class="token string">\'lastName\'</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">cell</span><span class="token operator">:</span> <span class="token punctuation">(</span>info<span class="token punctuation">)</span> <span class="token operator">=></span> info<span class="token punctuation">.</span>getValue<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">header</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Last Name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">,</span>\n    <span class="token function-variable function">footer</span><span class="token operator">:</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=></span> props<span class="token punctuation">.</span>column<span class="token punctuation">.</span>id<span class="token punctuation">,</span>\n    meta<span class="token operator">:</span> <span class="token punctuation">{</span>\n      editable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      <span class="token function-variable function">updateData</span><span class="token operator">:</span> <span class="token punctuation">(</span>rowIndex<span class="token operator">:</span> number<span class="token punctuation">,</span> id<span class="token operator">:</span> string<span class="token punctuation">,</span> value<span class="token operator">:</span> any<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">(</span>old<span class="token operator">:</span> Person<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n          old<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> rowIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword">return</span> <span class="token punctuation">{</span>\n                <span class="token operator">...</span>old<span class="token punctuation">[</span>rowIndex<span class="token punctuation">]</span><span class="token punctuation">,</span>\n                <span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">:</span> value<span class="token punctuation">,</span>\n              <span class="token punctuation">}</span> <span class="token keyword">as</span> Person\n            <span class="token punctuation">}</span>\n            <span class="token keyword">return</span> row\n          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><button aria-label="Copy the code" class="cdg-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24"><use class="cdg-copy-icon" xlink:href="#copy-icon" /><use class="cdg-copied-icon" xlink:href="#copied-icon" /></svg><span class="cdg-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h2 id="props">Props<a aria-labelledby="props" class="anchor-link" href="#props" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Type</th>\n<th align="left">Default</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>data</code></td>\n<td align="left">Array</td>\n<td align="left"><code>[]</code></td>\n<td align="left"><code>Data for show.</code></td>\n</tr>\n<tr>\n<td align="left"><code>columns</code></td>\n<td align="left"><code>Array&lt;ColumnDef&lt;T&gt;&gt;</code></td>\n<td align="left"><code>[]</code></td>\n<td align="left"><code>column with custom config.</code></td>\n</tr>\n<tr>\n<td align="left"><code>options</code></td>\n<td align="left">OptionType</td>\n<td align="left"><code>{}</code></td>\n<td align="left"><code>Table option.</code></td>\n</tr>\n<tr>\n<td align="left"><code>children</code></td>\n<td align="left">React.ReactNode</td>\n<td align="left">—</td>\n<td align="left"><code>Child elements.</code></td>\n</tr>\n<tr>\n<td align="left"><code>css</code></td>\n<td align="left"><code>CSS</code></td>\n<td align="left"><code>{}</code></td>\n<td align="left"><code>Additional style.</code></td>\n</tr>\n<tr>\n<td align="left"><code>renderRowSubComponent </code></td>\n<td align="left"><code>(rowData: T) =&gt; React.JSX.Element</code></td>\n<td align="left">—</td>\n<td align="left"><code>Callback after expanding row.</code></td>\n</tr>\n</tbody></table>\n'],toc:[{text:"Example",level:2,hash:"example",children:[{text:"Full features",level:3,hash:"full-features"},{text:"Expandable Column Table",level:3,hash:"expandable-column-table"}]},{text:"Usage",level:2,hash:"usage",children:[{text:"For server sorting",level:3,hash:"for-server-sorting"},{text:"ColumnConfig",level:3,hash:"columnconfig"},{text:"Editable Cell",level:3,hash:"editable-cell"}]},{text:"Props",level:2,hash:"props",children:[]}],title:"React Table-v2 component",headers:{title:"React Table-v2 component",components:["ReactTable"],hooks:[]}}},q={"ReactTable.tsx":{module:"./ReactTable.tsx",raw:"import {\n  faDashboard,\n  faFileLines,\n  faTrashAlt,\n} from '@fortawesome/free-solid-svg-icons'\n\nimport {\n  Button,\n  Icon,\n  Pagination,\n  ReactTable,\n  SearchField,\n  TableV2Options,\n} from '@comfortdelgro/react-compass'\nimport {\n  TableV2CellContext,\n  TableV2ColumnDef,\n  TableV2HeaderContext,\n  TableV2SortingState,\n} from '@comfortdelgro/react-compass/table-v2'\nimport React, {useState} from 'react'\n\nexport type Person = {\n  firstName: string\n  lastName: string\n  age: number\n  visits: number\n  progress: number\n  status: string\n  createdAt: Date\n  subRows?: Person[] | null\n}\nexport type LimitRequestStatus = {\n  id: string\n  accountName: string\n  code: string\n  requestLimit: number\n  status: string\n  progress?: Progress[] | null\n}\nexport type Progress = {\n  id: string\n  remarks: string\n  createdAt: Date\n}\n\nconst range = (len: number) => {\n  const arr = []\n  for (let i = 0; i < len; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst getRandomDate = (startDate: Date, endDate: Date) => {\n  const minValue = startDate.getTime()\n  const maxValue = endDate.getTime()\n  const timestamp = Math.floor(\n    Math.random() * (maxValue - minValue + 1) + minValue,\n  )\n  return new Date(timestamp)\n}\n\nfunction generateFullName(type: string) {\n  const firstNames = [\n    'James',\n    'Mary',\n    'John',\n    'Patricia',\n    'Robert',\n    'Jennifer',\n    'Michael',\n    'Linda',\n    'William',\n    'Elizabeth',\n    'David',\n    'Susan',\n    'Joseph',\n    'Jessica',\n    'Charles',\n    'Sarah',\n    'Thomas',\n    'Karen',\n    'Daniel',\n    'Nancy',\n    'Matthew',\n    'Lisa',\n    'Anthony',\n    'Margaret',\n    'Donald',\n    'Betty',\n    'Steven',\n    'Sandra',\n    'Paul',\n    'Ashley',\n  ]\n\n  const lastNames = [\n    'Smith',\n    'Johnson',\n    'Williams',\n    'Jones',\n    'Brown',\n    'Davis',\n    'Miller',\n    'Wilson',\n    'Moore',\n    'Taylor',\n    'Anderson',\n    'Thomas',\n    'Jackson',\n    'White',\n    'Harris',\n    'Martin',\n    'Thompson',\n    'Garcia',\n    'Martinez',\n    'Robinson',\n    'Clark',\n    'Rodriguez',\n    'Lewis',\n    'Lee',\n    'Walker',\n    'Hall',\n    'Allen',\n    'Young',\n    'King',\n  ]\n  if (type === 'firstName')\n    return `${firstNames[Math.floor(Math.random() * firstNames.length)]}`\n\n  return `${lastNames[Math.floor(Math.random() * lastNames.length)]}`\n}\n\nconst newPerson = (): Person => {\n  return {\n    firstName: generateFullName('firstName'),\n    lastName: generateFullName('lastName'),\n    age: Math.floor(Math.random() * 40),\n    visits: Math.floor(Math.random() * 1000),\n    progress: Math.floor(Math.random() * 100),\n    createdAt: getRandomDate(new Date(2020, 0, 1), new Date(2029, 11, 31)),\n    status: ['relationship', 'complicated', 'single'][\n      Math.floor(\n        Math.random() * ['relationship', 'complicated', 'single'].length,\n      )\n    ]!,\n  }\n}\n\nexport function makeData(...lens: number[]) {\n  const makeDataLevel = (depth = 0): Person[] => {\n    const len = lens[depth]!\n    return range(len).map((d): Person => {\n      return {\n        ...newPerson(),\n        subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : null,\n      }\n    })\n  }\n\n  return makeDataLevel()\n}\n\nconst ReactTableFullFeature: React.FC = () => {\n  const [page, setPage] = useState(1)\n  const [data, setData] = React.useState(() => makeData(10))\n  const options: TableV2Options<Person> = {\n    enableSorting: true,\n    enableMultiSort: true,\n    columnResizeMode: 'onChange',\n    manualSorting: true,\n    enableRowSelection: (row: any) => row.original.age > 30,\n  }\n  const onSorting = (sortingField: TableV2SortingState) => {}\n\n  const TableHeader = ({table}: any) => {\n    return (\n      <ReactTable.CheckboxCell\n        {...{\n          checked: table.getIsAllRowsSelected(),\n          indeterminate: table.getIsSomeRowsSelected(),\n          onChange: table.getToggleAllRowsSelectedHandler(),\n        }}\n      />\n    )\n  }\n\n  const TableHeaderCell = ({row}: any) => {\n    return (\n      <div className='px-1'>\n        <ReactTable.CheckboxCell\n          {...{\n            disabled: !row.getCanSelect(),\n            checked: row.getIsSelected(),\n            indeterminate: row.getIsSomeSelected(),\n            onChange: row.getToggleSelectedHandler(),\n          }}\n        />\n      </div>\n    )\n  }\n\n  const columns = React.useMemo<Array<TableV2ColumnDef<Person>>>(\n    () => [\n      {\n        id: 'select',\n        header: ({table}) => <TableHeader table={table} />,\n        cell: ({row}) => <TableHeaderCell row={row} />,\n      },\n      {\n        id: 'name',\n        header: () => <div style={{textAlign: 'center'}}>Name</div>,\n        footer: (props: TableV2HeaderContext<Person, unknown>) =>\n          props.column.id,\n        enableGrouping: false,\n        columns: [\n          {\n            accessorKey: 'firstName',\n            cell: (info: TableV2CellContext<Person, unknown>) =>\n              info.getValue<string>(),\n            header: () => <span>First Name</span>,\n            footer: (props: TableV2HeaderContext<Person, unknown>) =>\n              props.column.id,\n            enableResizing: true,\n            enableGrouping: false,\n            sortDescriptor: 'asc',\n            meta: {\n              editable: true,\n              updateData: (rowIndex: number, id: string, value: any) => {\n                setData((old: Person[]) =>\n                  old.map((row, index) => {\n                    if (index === rowIndex) {\n                      return {\n                        ...old[rowIndex],\n                        [id]: value,\n                      } as Person\n                    }\n                    return row\n                  }),\n                )\n              },\n            },\n          },\n          {\n            accessorFn: (row: Person) => row.lastName,\n            id: 'lastName',\n            cell: (info: TableV2CellContext<Person, unknown>) =>\n              info.getValue<string>(),\n            header: () => <span>Last Name</span>,\n            footer: (props: TableV2HeaderContext<Person, unknown>) =>\n              props.column.id,\n            enableResizing: true,\n          },\n        ],\n      },\n      {\n        id: 'otherInfo',\n        header: () => <div style={{textAlign: 'center'}}>Other info</div>,\n        footer: (props: TableV2HeaderContext<Person, unknown>) =>\n          props.column.id,\n        enableGrouping: false,\n        columns: [\n          {\n            accessorKey: 'age',\n            header: () => 'Age',\n            footer: (info: TableV2HeaderContext<Person, unknown>) =>\n              info.column.id,\n          },\n          {\n            accessorKey: 'visits',\n            header: () => <span>Visits</span>,\n            footer: (info: TableV2HeaderContext<Person, unknown>) =>\n              info.column.id,\n          },\n          {\n            accessorKey: 'status',\n            header: 'Status',\n            footer: (info: TableV2HeaderContext<Person, unknown>) =>\n              info.column.id,\n          },\n          {\n            accessorKey: 'progress',\n            header: 'Profile Progress',\n            cell: (info: TableV2CellContext<Person, unknown>) =>\n              info.getValue<string>(),\n            footer: (info: TableV2HeaderContext<Person, unknown>) =>\n              info.column.id,\n          },\n        ],\n      },\n    ],\n    [],\n  )\n\n  return (\n    <div>\n      <ReactTable\n        data={data}\n        columns={columns}\n        options={options}\n        onManualSorting={onSorting}\n      >\n        <ReactTable.Toolbar\n          css={{\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n          }}\n        >\n          <SearchField placeholder='Search' />\n\n          <div\n            style={{\n              display: 'flex',\n              flexDirection: 'row',\n              alignItems: 'center',\n              gap: '0.5rem',\n            }}\n          >\n            <Button\n              variant='primary'\n              className='c-hKssGC-hYGuEl-variant-primary'\n            >\n              Button\n            </Button>\n            <Button variant='secondary'>Button</Button>\n            <Button variant='ghost'>\n              <Icon icon={faTrashAlt} />\n            </Button>\n            <Button variant='ghost'>\n              <Icon icon={faDashboard} />\n            </Button>\n            <Button variant='ghost'>\n              <Icon icon={faFileLines} />\n            </Button>\n          </div>\n        </ReactTable.Toolbar>\n        <ReactTable.Footer\n          css={{\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n          }}\n        >\n          <div>{/* Todo: Dropdown */}</div>\n          <div\n            style={{\n              display: 'flex',\n              flexDirection: 'row',\n              alignItems: 'center',\n              gap: '0.5rem',\n            }}\n          >\n            <div\n              style={{\n                fontWeight: '600',\n              }}\n            >\n              {(page - 1) * 10 + 1} - {(page - 1) * 10 + 10} of 100\n            </div>\n            <Pagination\n              page={page}\n              onChange={(page: number) => setPage(page)}\n              total={10}\n            />\n          </div>\n        </ReactTable.Footer>\n      </ReactTable>\n    </div>\n  )\n}\n\nexport default ReactTableFullFeature\n",jsxPreview:"const columns = React.useMemo<Array<TableV2ColumnDef<Person>>>(\r\n  () => [\r\n    {\r\n      id: 'select',\r\n      header: ({table}) => {\r\n        return (\r\n          <div\r\n            style={{\r\n              display: 'flex',\r\n              justifyContent: 'center',\r\n              alignItems: 'center',\r\n            }}\r\n          >\r\n            <ReactTable.CheckboxCell\r\n              checked={table.getIsAllRowsSelected()}\r\n              indeterminate={table.getIsSomeRowsSelected()}\r\n              onChange={table.getToggleAllRowsSelectedHandler()}\r\n            />\r\n          </div>\r\n        )\r\n      },\r\n      cell: ({row}) => (\r\n        <div\r\n          style={{\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <ReactTable.CheckboxCell\r\n            disabled={!row.getCanSelect()}\r\n            checked={row.getIsSelected()}\r\n            indeterminate={row.getIsSomeSelected()}\r\n            onChange={row.getToggleSelectedHandler()}\r\n          />\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      id: 'name',\r\n      header: () => <div style={{textAlign: 'center'}}>Name</div>,\r\n      footer: (props) => props.column.id,\r\n      enableGrouping: false,\r\n      columns: [\r\n        {\r\n          accessorKey: 'firstName',\r\n          cell: (info) => info.getValue<string>(),\r\n          header: () => <span>First Name</span>,\r\n          footer: (props) => props.column.id,\r\n          enableResizing: true,\r\n          enableGrouping: false,\r\n          sortDescriptor: 'asc',\r\n          meta: {\r\n            editable: true,\r\n            updateData: (rowIndex: number, id: string, value: any) => {\r\n              setData((old: Person[]) =>\r\n                old.map((row, index) => {\r\n                  if (index === rowIndex) {\r\n                    return {\r\n                      ...old[rowIndex],\r\n                      [id]: value,\r\n                    } as Person\r\n                  }\r\n                  return row\r\n                }),\r\n              )\r\n            },\r\n          },\r\n        },\r\n        {\r\n          accessorFn: (row) => row.lastName,\r\n          id: 'lastName',\r\n          cell: (info) => info.getValue<string>(),\r\n          header: () => <span>Last Name</span>,\r\n          footer: (props) => props.column.id,\r\n          enableResizing: true,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      id: 'otherInfo',\r\n      header: () => <div style={{textAlign: 'center'}}>Other info</div>,\r\n      footer: (props) => props.column.id,\r\n      enableGrouping: false,\r\n      columns: [\r\n        {\r\n          accessorKey: 'age',\r\n          header: () => 'Age',\r\n          footer: (info) => info.column.id,\r\n        },\r\n        {\r\n          accessorKey: 'visits',\r\n          header: () => <span>Visits</span>,\r\n          footer: (info) => info.column.id,\r\n        },\r\n        {\r\n          accessorKey: 'status',\r\n          header: 'Status',\r\n          footer: (info) => info.column.id,\r\n        },\r\n        {\r\n          accessorKey: 'progress',\r\n          header: 'Profile Progress',\r\n          cell: (info) => info.getValue<string>(),\r\n          footer: (info) => info.column.id,\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  [],\r\n)\r\n\r\n<ReactTable\r\n  data={data}\r\n  columns={columns}\r\n  options={options}\r\n  onManualSorting={onSorting}\r\n>\r\n  <ReactTable.Toolbar\r\n    css={{\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n      justifyContent: 'space-between',\r\n    }}\r\n  >\r\n    <SearchField placeholder='Search' />\r\n\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        gap: '0.5rem',\r\n      }}\r\n    >\r\n      <Button variant='primary' className='c-hKssGC-hYGuEl-variant-primary'>\r\n        Button\r\n      </Button>\r\n      <Button variant='secondary'>Button</Button>\r\n      <Button variant='ghost'>\r\n        <Icon icon={faTrashAlt} />\r\n      </Button>\r\n      <Button variant='ghost'>\r\n        <Icon icon={faDashboard} />\r\n      </Button>\r\n      <Button variant='ghost'>\r\n        <Icon icon={faFileLines} />\r\n      </Button>\r\n    </div>\r\n  </ReactTable.Toolbar>\r\n  <ReactTable.Footer\r\n    css={{\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n      justifyContent: 'space-between',\r\n    }}\r\n  >\r\n    <div>{/* Todo: Dropdown */}</div>\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        gap: '0.5rem',\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          fontWeight: '600',\r\n        }}\r\n      >\r\n        {(page - 1) * 10 + 1} - {(page - 1) * 10 + 10} of 100\r\n      </div>\r\n      <Pagination page={page} onChange={(page) => setPage(page)} total={10} />\r\n    </div>\r\n  </ReactTable.Footer>\r\n</ReactTable>",moduleTS:"./ReactTable.tsx",rawTS:"import {\n  faDashboard,\n  faFileLines,\n  faTrashAlt,\n} from '@fortawesome/free-solid-svg-icons'\n\nimport {\n  Button,\n  Icon,\n  Pagination,\n  ReactTable,\n  SearchField,\n  TableV2Options,\n} from '@comfortdelgro/react-compass'\nimport {\n  TableV2CellContext,\n  TableV2ColumnDef,\n  TableV2HeaderContext,\n  TableV2SortingState,\n} from '@comfortdelgro/react-compass/table-v2'\nimport React, {useState} from 'react'\n\nexport type Person = {\n  firstName: string\n  lastName: string\n  age: number\n  visits: number\n  progress: number\n  status: string\n  createdAt: Date\n  subRows?: Person[] | null\n}\nexport type LimitRequestStatus = {\n  id: string\n  accountName: string\n  code: string\n  requestLimit: number\n  status: string\n  progress?: Progress[] | null\n}\nexport type Progress = {\n  id: string\n  remarks: string\n  createdAt: Date\n}\n\nconst range = (len: number) => {\n  const arr = []\n  for (let i = 0; i < len; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst getRandomDate = (startDate: Date, endDate: Date) => {\n  const minValue = startDate.getTime()\n  const maxValue = endDate.getTime()\n  const timestamp = Math.floor(\n    Math.random() * (maxValue - minValue + 1) + minValue,\n  )\n  return new Date(timestamp)\n}\n\nfunction generateFullName(type: string) {\n  const firstNames = [\n    'James',\n    'Mary',\n    'John',\n    'Patricia',\n    'Robert',\n    'Jennifer',\n    'Michael',\n    'Linda',\n    'William',\n    'Elizabeth',\n    'David',\n    'Susan',\n    'Joseph',\n    'Jessica',\n    'Charles',\n    'Sarah',\n    'Thomas',\n    'Karen',\n    'Daniel',\n    'Nancy',\n    'Matthew',\n    'Lisa',\n    'Anthony',\n    'Margaret',\n    'Donald',\n    'Betty',\n    'Steven',\n    'Sandra',\n    'Paul',\n    'Ashley',\n  ]\n\n  const lastNames = [\n    'Smith',\n    'Johnson',\n    'Williams',\n    'Jones',\n    'Brown',\n    'Davis',\n    'Miller',\n    'Wilson',\n    'Moore',\n    'Taylor',\n    'Anderson',\n    'Thomas',\n    'Jackson',\n    'White',\n    'Harris',\n    'Martin',\n    'Thompson',\n    'Garcia',\n    'Martinez',\n    'Robinson',\n    'Clark',\n    'Rodriguez',\n    'Lewis',\n    'Lee',\n    'Walker',\n    'Hall',\n    'Allen',\n    'Young',\n    'King',\n  ]\n  if (type === 'firstName')\n    return `${firstNames[Math.floor(Math.random() * firstNames.length)]}`\n\n  return `${lastNames[Math.floor(Math.random() * lastNames.length)]}`\n}\n\nconst newPerson = (): Person => {\n  return {\n    firstName: generateFullName('firstName'),\n    lastName: generateFullName('lastName'),\n    age: Math.floor(Math.random() * 40),\n    visits: Math.floor(Math.random() * 1000),\n    progress: Math.floor(Math.random() * 100),\n    createdAt: getRandomDate(new Date(2020, 0, 1), new Date(2029, 11, 31)),\n    status: ['relationship', 'complicated', 'single'][\n      Math.floor(\n        Math.random() * ['relationship', 'complicated', 'single'].length,\n      )\n    ]!,\n  }\n}\n\nexport function makeData(...lens: number[]) {\n  const makeDataLevel = (depth = 0): Person[] => {\n    const len = lens[depth]!\n    return range(len).map((d): Person => {\n      return {\n        ...newPerson(),\n        subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : null,\n      }\n    })\n  }\n\n  return makeDataLevel()\n}\n\nconst ReactTableFullFeature: React.FC = () => {\n  const [page, setPage] = useState(1)\n  const [data, setData] = React.useState(() => makeData(10))\n  const options: TableV2Options<Person> = {\n    enableSorting: true,\n    enableMultiSort: true,\n    columnResizeMode: 'onChange',\n    manualSorting: true,\n    enableRowSelection: (row: any) => row.original.age > 30,\n  }\n  const onSorting = (sortingField: TableV2SortingState) => {}\n\n  const TableHeader = ({table}: any) => {\n    return (\n      <ReactTable.CheckboxCell\n        {...{\n          checked: table.getIsAllRowsSelected(),\n          indeterminate: table.getIsSomeRowsSelected(),\n          onChange: table.getToggleAllRowsSelectedHandler(),\n        }}\n      />\n    )\n  }\n\n  const TableHeaderCell = ({row}: any) => {\n    return (\n      <div className='px-1'>\n        <ReactTable.CheckboxCell\n          {...{\n            disabled: !row.getCanSelect(),\n            checked: row.getIsSelected(),\n            indeterminate: row.getIsSomeSelected(),\n            onChange: row.getToggleSelectedHandler(),\n          }}\n        />\n      </div>\n    )\n  }\n\n  const columns = React.useMemo<Array<TableV2ColumnDef<Person>>>(\n    () => [\n      {\n        id: 'select',\n        header: ({table}) => <TableHeader table={table} />,\n        cell: ({row}) => <TableHeaderCell row={row} />,\n      },\n      {\n        id: 'name',\n        header: () => <div style={{textAlign: 'center'}}>Name</div>,\n        footer: (props: TableV2HeaderContext<Person, unknown>) =>\n          props.column.id,\n        enableGrouping: false,\n        columns: [\n          {\n            accessorKey: 'firstName',\n            cell: (info: TableV2CellContext<Person, unknown>) =>\n              info.getValue<string>(),\n            header: () => <span>First Name</span>,\n            footer: (props: TableV2HeaderContext<Person, unknown>) =>\n              props.column.id,\n            enableResizing: true,\n            enableGrouping: false,\n            sortDescriptor: 'asc',\n            meta: {\n              editable: true,\n              updateData: (rowIndex: number, id: string, value: any) => {\n                setData((old: Person[]) =>\n                  old.map((row, index) => {\n                    if (index === rowIndex) {\n                      return {\n                        ...old[rowIndex],\n                        [id]: value,\n                      } as Person\n                    }\n                    return row\n                  }),\n                )\n              },\n            },\n          },\n          {\n            accessorFn: (row: Person) => row.lastName,\n            id: 'lastName',\n            cell: (info: TableV2CellContext<Person, unknown>) =>\n              info.getValue<string>(),\n            header: () => <span>Last Name</span>,\n            footer: (props: TableV2HeaderContext<Person, unknown>) =>\n              props.column.id,\n            enableResizing: true,\n          },\n        ],\n      },\n      {\n        id: 'otherInfo',\n        header: () => <div style={{textAlign: 'center'}}>Other info</div>,\n        footer: (props: TableV2HeaderContext<Person, unknown>) =>\n          props.column.id,\n        enableGrouping: false,\n        columns: [\n          {\n            accessorKey: 'age',\n            header: () => 'Age',\n            footer: (info: TableV2HeaderContext<Person, unknown>) =>\n              info.column.id,\n          },\n          {\n            accessorKey: 'visits',\n            header: () => <span>Visits</span>,\n            footer: (info: TableV2HeaderContext<Person, unknown>) =>\n              info.column.id,\n          },\n          {\n            accessorKey: 'status',\n            header: 'Status',\n            footer: (info: TableV2HeaderContext<Person, unknown>) =>\n              info.column.id,\n          },\n          {\n            accessorKey: 'progress',\n            header: 'Profile Progress',\n            cell: (info: TableV2CellContext<Person, unknown>) =>\n              info.getValue<string>(),\n            footer: (info: TableV2HeaderContext<Person, unknown>) =>\n              info.column.id,\n          },\n        ],\n      },\n    ],\n    [],\n  )\n\n  return (\n    <div>\n      <ReactTable\n        data={data}\n        columns={columns}\n        options={options}\n        onManualSorting={onSorting}\n      >\n        <ReactTable.Toolbar\n          css={{\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n          }}\n        >\n          <SearchField placeholder='Search' />\n\n          <div\n            style={{\n              display: 'flex',\n              flexDirection: 'row',\n              alignItems: 'center',\n              gap: '0.5rem',\n            }}\n          >\n            <Button\n              variant='primary'\n              className='c-hKssGC-hYGuEl-variant-primary'\n            >\n              Button\n            </Button>\n            <Button variant='secondary'>Button</Button>\n            <Button variant='ghost'>\n              <Icon icon={faTrashAlt} />\n            </Button>\n            <Button variant='ghost'>\n              <Icon icon={faDashboard} />\n            </Button>\n            <Button variant='ghost'>\n              <Icon icon={faFileLines} />\n            </Button>\n          </div>\n        </ReactTable.Toolbar>\n        <ReactTable.Footer\n          css={{\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n          }}\n        >\n          <div>{/* Todo: Dropdown */}</div>\n          <div\n            style={{\n              display: 'flex',\n              flexDirection: 'row',\n              alignItems: 'center',\n              gap: '0.5rem',\n            }}\n          >\n            <div\n              style={{\n                fontWeight: '600',\n              }}\n            >\n              {(page - 1) * 10 + 1} - {(page - 1) * 10 + 10} of 100\n            </div>\n            <Pagination\n              page={page}\n              onChange={(page: number) => setPage(page)}\n              total={10}\n            />\n          </div>\n        </ReactTable.Footer>\n      </ReactTable>\n    </div>\n  )\n}\n\nexport default ReactTableFullFeature\n"},"ExpandableColumnTable.tsx":{module:"./ExpandableColumnTable.tsx",raw:"import {faChevronDown, faChevronRight} from '@fortawesome/free-solid-svg-icons'\n\nimport {\n  Divider,\n  Dropdown,\n  Icon,\n  Pagination,\n  ReactTable,\n  TableV2Options,\n} from '@comfortdelgro/react-compass'\nimport {\n  TableV2CellContext,\n  TableV2ColumnDef,\n  TableV2HeaderContext,\n} from '@comfortdelgro/react-compass/table-v2'\nimport React, {useState} from 'react'\n\nexport type Person = {\n  firstName: string\n  lastName: string\n  age: number\n  visits: number\n  progress: number\n  status: string\n  createdAt: Date\n  subRows?: Person[] | null\n}\nexport type LimitRequestStatus = {\n  id: string\n  accountName: string\n  code: string\n  requestLimit: number\n  status: string\n  progress?: Progress[] | null\n}\nexport type Progress = {\n  id: string\n  remarks: string\n  createdAt: Date\n}\n\nconst range = (len: number) => {\n  const arr = []\n  for (let i = 0; i < len; i++) {\n    arr.push(i)\n  }\n  return arr\n}\nconst makeid = (length: number) => {\n  let result = ''\n  const characters =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n  const charactersLength = characters.length\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength))\n  }\n  return result\n}\nconst getRandomDate = (startDate: Date, endDate: Date) => {\n  const minValue = startDate.getTime()\n  const maxValue = endDate.getTime()\n  const timestamp = Math.floor(\n    Math.random() * (maxValue - minValue + 1) + minValue,\n  )\n  return new Date(timestamp)\n}\n\nfunction generateFullName(type: string) {\n  const firstNames = [\n    'James',\n    'Mary',\n    'John',\n    'Patricia',\n    'Robert',\n    'Jennifer',\n    'Michael',\n    'Linda',\n    'William',\n    'Elizabeth',\n    'David',\n    'Susan',\n    'Joseph',\n    'Jessica',\n    'Charles',\n    'Sarah',\n    'Thomas',\n    'Karen',\n    'Daniel',\n    'Nancy',\n    'Matthew',\n    'Lisa',\n    'Anthony',\n    'Margaret',\n    'Donald',\n    'Betty',\n    'Steven',\n    'Sandra',\n    'Paul',\n    'Ashley',\n  ]\n\n  const lastNames = [\n    'Smith',\n    'Johnson',\n    'Williams',\n    'Jones',\n    'Brown',\n    'Davis',\n    'Miller',\n    'Wilson',\n    'Moore',\n    'Taylor',\n    'Anderson',\n    'Thomas',\n    'Jackson',\n    'White',\n    'Harris',\n    'Martin',\n    'Thompson',\n    'Garcia',\n    'Martinez',\n    'Robinson',\n    'Clark',\n    'Rodriguez',\n    'Lewis',\n    'Lee',\n    'Walker',\n    'Hall',\n    'Allen',\n    'Young',\n    'King',\n  ]\n  if (type === 'firstName')\n    return `${firstNames[Math.floor(Math.random() * firstNames.length)]}`\n\n  return `${lastNames[Math.floor(Math.random() * lastNames.length)]}`\n}\n\nfunction generateAccountName() {\n  const accountNames = [\n    'Miss Reilly Lemke',\n    'Elizabeth Friesen',\n    'Dr. Doyle Boehm',\n    'Domenica Zemlak DDS',\n    'Samson Bogan',\n    'Thora Hilll',\n    'Shannon Mann',\n    'Mrs. Barry Franecki',\n    'Kendrick Balistreri',\n    'Daphnee Durgan',\n    'Stevie Herman',\n    'Salvador Koelpin',\n    'Milo Torphy',\n    'Amelie Halvorson',\n    'Cora Weissnat IV',\n    'Rey Watsica',\n    'Alexandria Murray',\n    'Angeline Schowalter',\n    'Britney Cole',\n    'Marlene Bosco',\n  ]\n\n  return `${accountNames[Math.floor(Math.random() * accountNames.length)]}`\n}\nconst newPerson = (): Person => {\n  return {\n    firstName: generateFullName('firstName'),\n    lastName: generateFullName('lastName'),\n    age: Math.floor(Math.random() * 40),\n    visits: Math.floor(Math.random() * 1000),\n    progress: Math.floor(Math.random() * 100),\n    createdAt: getRandomDate(new Date(2020, 0, 1), new Date(2029, 11, 31)),\n    status: ['relationship', 'complicated', 'single'][\n      Math.floor(\n        Math.random() * ['relationship', 'complicated', 'single'].length,\n      )\n    ]!,\n  }\n}\nconst newRequestStatus = (): LimitRequestStatus => {\n  return {\n    id: makeid(5),\n    accountName: generateAccountName(),\n    code: makeid(3),\n    requestLimit: Math.floor(Math.random() * 1000),\n    status: ['Submited', 'Processing', 'Approval'][\n      Math.floor(Math.random() * ['Submited', 'Processing', 'Approval'].length)\n    ],\n    progress: [\n      {\n        id: makeid(5),\n        remarks:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam eleifend iaculis sodales. Pellentesque at metus felis. Nulla fermentum ipsum nec orci laoreet, at rhoncus eros dictum.',\n        createdAt: getRandomDate(new Date(2020, 0, 1), new Date(2029, 11, 31)),\n      },\n      {\n        id: makeid(5),\n        remarks:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam eleifend iaculis sodales. Pellentesque at metus felis. Nulla fermentum ipsum nec orci laoreet, at rhoncus eros dictum.',\n        createdAt: getRandomDate(new Date(2020, 0, 1), new Date(2029, 11, 31)),\n      },\n      {\n        id: makeid(5),\n        remarks:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam eleifend iaculis sodales. Pellentesque at metus felis. Nulla fermentum ipsum nec orci laoreet, at rhoncus eros dictum.',\n        createdAt: getRandomDate(new Date(2020, 0, 1), new Date(2029, 11, 31)),\n      },\n    ],\n  }\n}\n\nexport function makeData(...lens: number[]) {\n  const makeDataLevel = (depth = 0): Person[] => {\n    const len = lens[depth]!\n    return range(len).map((d): Person => {\n      return {\n        ...newPerson(),\n        subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : null,\n      }\n    })\n  }\n\n  return makeDataLevel()\n}\nfunction makeRequestStatusData(...lens: number[]) {\n  const makeDataLevel = (depth = 0): LimitRequestStatus[] => {\n    const len = lens[depth]!\n    return range(len).map((d): LimitRequestStatus => {\n      return {\n        ...newRequestStatus(),\n      }\n    })\n  }\n\n  return makeDataLevel()\n}\n\nconst ExpandableColumnTable: React.FC = () => {\n  const [data, setData] = React.useState(() => makeRequestStatusData(10))\n  const [page, setPage] = useState(1)\n  const options: TableV2Options<LimitRequestStatus> = {\n    enableSorting: false,\n    enableMultiSort: false,\n    columnResizeMode: 'onChange',\n    manualSorting: false,\n  }\n\n  const columns = React.useMemo<Array<TableV2ColumnDef<LimitRequestStatus>>>(\n    () => [\n      {\n        id: 'expander',\n        size: 40,\n        header: ({\n          table,\n        }: TableV2HeaderContext<LimitRequestStatus, unknown>) => (\n          <>\n            <button\n              {...{\n                onClick: table.getToggleAllRowsExpandedHandler(),\n              }}\n            >\n              {table.getIsAllRowsExpanded() ? (\n                <Icon icon={faChevronDown} />\n              ) : (\n                <Icon icon={faChevronRight} />\n              )}\n            </button>{' '}\n          </>\n        ),\n        cell: ({row}: TableV2CellContext<LimitRequestStatus, unknown>) => (\n          <span\n            onClick={() => row.toggleExpanded()}\n            style={{\n              cursor: 'pointer',\n              userSelect: 'none',\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n            }}\n          >\n            {row.getIsExpanded() ? (\n              <Icon icon={faChevronDown} />\n            ) : (\n              <Icon icon={faChevronRight} />\n            )}\n          </span>\n        ),\n      },\n      {\n        id: 'accountName',\n        accessorKey: 'accountName',\n        header: () => <div style={{textAlign: 'center'}}>Account Name</div>,\n        footer: (props: TableV2HeaderContext<LimitRequestStatus, unknown>) =>\n          props.column.id,\n      },\n      {\n        id: 'code',\n        accessorKey: 'code',\n        header: () => <div style={{textAlign: 'center'}}>Code</div>,\n        footer: (props: TableV2HeaderContext<LimitRequestStatus, unknown>) =>\n          props.column.id,\n      },\n      {\n        id: 'requestLimit',\n        accessorKey: 'requestLimit',\n        header: () => (\n          <div style={{textAlign: 'center'}}>New Request Limit</div>\n        ),\n        footer: (props: TableV2HeaderContext<LimitRequestStatus, unknown>) =>\n          props.column.id,\n      },\n      {\n        id: 'status',\n        accessorKey: 'status',\n        header: () => <div style={{textAlign: 'center'}}>Status</div>,\n        footer: (props: TableV2HeaderContext<LimitRequestStatus, unknown>) =>\n          props.column.id,\n      },\n    ],\n    [],\n  )\n\n  const renderRowSubComponent = (rowData: LimitRequestStatus) => {\n    return (\n      <div\n        style={{\n          padding: '1em',\n          display: 'flex',\n          flexDirection: 'column',\n          rowGap: '1em',\n        }}\n      >\n        <h3>Current Status: {rowData.status}</h3>\n        <Divider />\n        {rowData.progress?.map((processItem) => {\n          return (\n            <>\n              <p style={{fontSize: '12px'}}>{processItem.remarks}</p>\n              <p style={{fontSize: '11px', fontWeight: 200, color: '#878787'}}>\n                {processItem.createdAt.toDateString()}\n              </p>\n              <Divider />\n            </>\n          )\n        })}\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <ReactTable\n        data={data}\n        columns={columns}\n        options={options}\n        renderRowSubComponent={renderRowSubComponent}\n      >\n        <ReactTable.Footer\n          css={{\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n          }}\n        >\n          <div style={{display: 'flex', alignItems: 'center'}}>\n            <span style={{width: 200}}>Rows per page: </span>\n            <Dropdown.Select defaultSelectedKey='10'>\n              <Dropdown.Item key='10'>10 rows</Dropdown.Item>\n              <Dropdown.Item key='20'>20 rows</Dropdown.Item>\n              <Dropdown.Item key='50'>50 rows</Dropdown.Item>\n            </Dropdown.Select>\n          </div>\n          <div\n            style={{\n              display: 'flex',\n              flexDirection: 'row',\n              alignItems: 'center',\n              gap: '0.5rem',\n            }}\n          >\n            <div\n              style={{\n                fontWeight: '600',\n              }}\n            >\n              {(page - 1) * 10 + 1} - {(page - 1) * 10 + 10} of 100\n            </div>\n            <Pagination\n              page={page}\n              onChange={(page: number) => setPage(page)}\n              total={10}\n            />\n          </div>\n        </ReactTable.Footer>\n      </ReactTable>\n    </div>\n  )\n}\n\nexport default ExpandableColumnTable\n",jsxPreview:"const ExpandableColumnTable: React.FC = () => {\r\n  const [data, setData] = React.useState(() => makeRequestStatusData(10))\r\n  const [page, setPage] = useState(1)\r\n  const options: ReactTableOptions<LimitRequestStatus> = {\r\n    enableSorting: false,\r\n    enableMultiSort: false,\r\n    columnResizeMode: 'onChange',\r\n    manualSorting: false,\r\n  }\r\n\r\n  const columns = React.useMemo<Array<ColumnConfig<LimitRequestStatus>>>(\r\n    () => [\r\n      {\r\n        id: 'expander',\r\n        size: 40,\r\n        header: ({table}: HeaderContextProps<LimitRequestStatus, unknown>) => (\r\n          <>\r\n            <button\r\n              {...{\r\n                onClick: table.getToggleAllRowsExpandedHandler(),\r\n              }}\r\n            >\r\n              {table.getIsAllRowsExpanded() ? (\r\n                <Icon icon={faChevronDown} />\r\n              ) : (\r\n                <Icon icon={faChevronRight} />\r\n              )}\r\n            </button>{' '}\r\n          </>\r\n        ),\r\n        cell: ({row}: CellContextProps<LimitRequestStatus, unknown>) => (\r\n          <span\r\n            onClick={() => row.toggleExpanded()}\r\n            style={{\r\n              cursor: 'pointer',\r\n              userSelect: 'none',\r\n              display: 'flex',\r\n              justifyContent: 'center',\r\n              alignItems: 'center',\r\n            }}\r\n          >\r\n            {row.getIsExpanded() ? (\r\n              <Icon icon={faChevronDown} />\r\n            ) : (\r\n              <Icon icon={faChevronRight} />\r\n            )}\r\n          </span>\r\n        ),\r\n      },\r\n      {\r\n        id: 'accountName',\r\n        accessorKey: 'accountName',\r\n        header: () => <div style={{textAlign: 'center'}}>Account Name</div>,\r\n        footer: (props: HeaderContextProps<LimitRequestStatus, unknown>) =>\r\n          props.column.id,\r\n      },\r\n      {\r\n        id: 'code',\r\n        accessorKey: 'code',\r\n        header: () => <div style={{textAlign: 'center'}}>Code</div>,\r\n        footer: (props: HeaderContextProps<LimitRequestStatus, unknown>) =>\r\n          props.column.id,\r\n      },\r\n      {\r\n        id: 'requestLimit',\r\n        accessorKey: 'requestLimit',\r\n        header: () => (\r\n          <div style={{textAlign: 'center'}}>New Request Limit</div>\r\n        ),\r\n        footer: (props: HeaderContextProps<LimitRequestStatus, unknown>) =>\r\n          props.column.id,\r\n      },\r\n      {\r\n        id: 'status',\r\n        accessorKey: 'status',\r\n        header: () => <div style={{textAlign: 'center'}}>Status</div>,\r\n        footer: (props: HeaderContextProps<LimitRequestStatus, unknown>) =>\r\n          props.column.id,\r\n      },\r\n    ],\r\n    [],\r\n  )\r\n\r\n  const renderRowSubComponent = (rowData: LimitRequestStatus) => {\r\n    return (\r\n      <div\r\n        style={{\r\n          padding: '1em',\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          rowGap: '1em',\r\n        }}\r\n      >\r\n        <h3>Current Status: {rowData.status}</h3>\r\n        <Divider />\r\n        {rowData.progress?.map((processItem) => {\r\n          return (\r\n            <>\r\n              <p style={{fontSize: '12px'}}>{processItem.remarks}</p>\r\n              <p style={{fontSize: '11px', fontWeight: 200, color: '#878787'}}>\r\n                {processItem.createdAt.toDateString()}\r\n              </p>\r\n              <Divider />\r\n            </>\r\n          )\r\n        })}\r\n      </div>\r\n    )\r\n  }\r\n  return (\r\n    <div>\r\n      <ReactTable\r\n        data={data}\r\n        columns={columns}\r\n        options={options}\r\n        renderRowSubComponent={renderRowSubComponent}\r\n      >\r\n        <ReactTable.Footer\r\n          css={{\r\n            display: 'flex',\r\n            flexDirection: 'row',\r\n            justifyContent: 'space-between',\r\n          }}\r\n        >\r\n          <div>{/* Todo: Dropdown */}</div>\r\n          <div\r\n            style={{\r\n              display: 'flex',\r\n              flexDirection: 'row',\r\n              alignItems: 'center',\r\n              gap: '0.5rem',\r\n            }}\r\n          >\r\n            <div\r\n              style={{\r\n                fontWeight: '600',\r\n              }}\r\n            >\r\n              {(page - 1) * 10 + 1} - {(page - 1) * 10 + 10} of 100\r\n            </div>\r\n            <Pagination\r\n              page={page}\r\n              onChange={(page: number) => setPage(page)}\r\n              total={10}\r\n            />\r\n          </div>\r\n        </ReactTable.Footer>\r\n      </ReactTable>\r\n    </div>\r\n  )\r\n}\r\n\r\ntype LimitRequestStatus = {\r\n  id: string\r\n  accountName: string\r\n  code: string\r\n  requestLimit: number\r\n  status: string\r\n  progress?: Progress[] | null\r\n}\r\n\r\ntype Progress = {\r\n  id: string\r\n  remarks: string\r\n  createdAt: Date\r\n}",moduleTS:"./ExpandableColumnTable.tsx",rawTS:"import {faChevronDown, faChevronRight} from '@fortawesome/free-solid-svg-icons'\n\nimport {\n  Divider,\n  Dropdown,\n  Icon,\n  Pagination,\n  ReactTable,\n  TableV2Options,\n} from '@comfortdelgro/react-compass'\nimport {\n  TableV2CellContext,\n  TableV2ColumnDef,\n  TableV2HeaderContext,\n} from '@comfortdelgro/react-compass/table-v2'\nimport React, {useState} from 'react'\n\nexport type Person = {\n  firstName: string\n  lastName: string\n  age: number\n  visits: number\n  progress: number\n  status: string\n  createdAt: Date\n  subRows?: Person[] | null\n}\nexport type LimitRequestStatus = {\n  id: string\n  accountName: string\n  code: string\n  requestLimit: number\n  status: string\n  progress?: Progress[] | null\n}\nexport type Progress = {\n  id: string\n  remarks: string\n  createdAt: Date\n}\n\nconst range = (len: number) => {\n  const arr = []\n  for (let i = 0; i < len; i++) {\n    arr.push(i)\n  }\n  return arr\n}\nconst makeid = (length: number) => {\n  let result = ''\n  const characters =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n  const charactersLength = characters.length\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength))\n  }\n  return result\n}\nconst getRandomDate = (startDate: Date, endDate: Date) => {\n  const minValue = startDate.getTime()\n  const maxValue = endDate.getTime()\n  const timestamp = Math.floor(\n    Math.random() * (maxValue - minValue + 1) + minValue,\n  )\n  return new Date(timestamp)\n}\n\nfunction generateFullName(type: string) {\n  const firstNames = [\n    'James',\n    'Mary',\n    'John',\n    'Patricia',\n    'Robert',\n    'Jennifer',\n    'Michael',\n    'Linda',\n    'William',\n    'Elizabeth',\n    'David',\n    'Susan',\n    'Joseph',\n    'Jessica',\n    'Charles',\n    'Sarah',\n    'Thomas',\n    'Karen',\n    'Daniel',\n    'Nancy',\n    'Matthew',\n    'Lisa',\n    'Anthony',\n    'Margaret',\n    'Donald',\n    'Betty',\n    'Steven',\n    'Sandra',\n    'Paul',\n    'Ashley',\n  ]\n\n  const lastNames = [\n    'Smith',\n    'Johnson',\n    'Williams',\n    'Jones',\n    'Brown',\n    'Davis',\n    'Miller',\n    'Wilson',\n    'Moore',\n    'Taylor',\n    'Anderson',\n    'Thomas',\n    'Jackson',\n    'White',\n    'Harris',\n    'Martin',\n    'Thompson',\n    'Garcia',\n    'Martinez',\n    'Robinson',\n    'Clark',\n    'Rodriguez',\n    'Lewis',\n    'Lee',\n    'Walker',\n    'Hall',\n    'Allen',\n    'Young',\n    'King',\n  ]\n  if (type === 'firstName')\n    return `${firstNames[Math.floor(Math.random() * firstNames.length)]}`\n\n  return `${lastNames[Math.floor(Math.random() * lastNames.length)]}`\n}\n\nfunction generateAccountName() {\n  const accountNames = [\n    'Miss Reilly Lemke',\n    'Elizabeth Friesen',\n    'Dr. Doyle Boehm',\n    'Domenica Zemlak DDS',\n    'Samson Bogan',\n    'Thora Hilll',\n    'Shannon Mann',\n    'Mrs. Barry Franecki',\n    'Kendrick Balistreri',\n    'Daphnee Durgan',\n    'Stevie Herman',\n    'Salvador Koelpin',\n    'Milo Torphy',\n    'Amelie Halvorson',\n    'Cora Weissnat IV',\n    'Rey Watsica',\n    'Alexandria Murray',\n    'Angeline Schowalter',\n    'Britney Cole',\n    'Marlene Bosco',\n  ]\n\n  return `${accountNames[Math.floor(Math.random() * accountNames.length)]}`\n}\nconst newPerson = (): Person => {\n  return {\n    firstName: generateFullName('firstName'),\n    lastName: generateFullName('lastName'),\n    age: Math.floor(Math.random() * 40),\n    visits: Math.floor(Math.random() * 1000),\n    progress: Math.floor(Math.random() * 100),\n    createdAt: getRandomDate(new Date(2020, 0, 1), new Date(2029, 11, 31)),\n    status: ['relationship', 'complicated', 'single'][\n      Math.floor(\n        Math.random() * ['relationship', 'complicated', 'single'].length,\n      )\n    ]!,\n  }\n}\nconst newRequestStatus = (): LimitRequestStatus => {\n  return {\n    id: makeid(5),\n    accountName: generateAccountName(),\n    code: makeid(3),\n    requestLimit: Math.floor(Math.random() * 1000),\n    status: ['Submited', 'Processing', 'Approval'][\n      Math.floor(Math.random() * ['Submited', 'Processing', 'Approval'].length)\n    ],\n    progress: [\n      {\n        id: makeid(5),\n        remarks:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam eleifend iaculis sodales. Pellentesque at metus felis. Nulla fermentum ipsum nec orci laoreet, at rhoncus eros dictum.',\n        createdAt: getRandomDate(new Date(2020, 0, 1), new Date(2029, 11, 31)),\n      },\n      {\n        id: makeid(5),\n        remarks:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam eleifend iaculis sodales. Pellentesque at metus felis. Nulla fermentum ipsum nec orci laoreet, at rhoncus eros dictum.',\n        createdAt: getRandomDate(new Date(2020, 0, 1), new Date(2029, 11, 31)),\n      },\n      {\n        id: makeid(5),\n        remarks:\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam eleifend iaculis sodales. Pellentesque at metus felis. Nulla fermentum ipsum nec orci laoreet, at rhoncus eros dictum.',\n        createdAt: getRandomDate(new Date(2020, 0, 1), new Date(2029, 11, 31)),\n      },\n    ],\n  }\n}\n\nexport function makeData(...lens: number[]) {\n  const makeDataLevel = (depth = 0): Person[] => {\n    const len = lens[depth]!\n    return range(len).map((d): Person => {\n      return {\n        ...newPerson(),\n        subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : null,\n      }\n    })\n  }\n\n  return makeDataLevel()\n}\nfunction makeRequestStatusData(...lens: number[]) {\n  const makeDataLevel = (depth = 0): LimitRequestStatus[] => {\n    const len = lens[depth]!\n    return range(len).map((d): LimitRequestStatus => {\n      return {\n        ...newRequestStatus(),\n      }\n    })\n  }\n\n  return makeDataLevel()\n}\n\nconst ExpandableColumnTable: React.FC = () => {\n  const [data, setData] = React.useState(() => makeRequestStatusData(10))\n  const [page, setPage] = useState(1)\n  const options: TableV2Options<LimitRequestStatus> = {\n    enableSorting: false,\n    enableMultiSort: false,\n    columnResizeMode: 'onChange',\n    manualSorting: false,\n  }\n\n  const columns = React.useMemo<Array<TableV2ColumnDef<LimitRequestStatus>>>(\n    () => [\n      {\n        id: 'expander',\n        size: 40,\n        header: ({\n          table,\n        }: TableV2HeaderContext<LimitRequestStatus, unknown>) => (\n          <>\n            <button\n              {...{\n                onClick: table.getToggleAllRowsExpandedHandler(),\n              }}\n            >\n              {table.getIsAllRowsExpanded() ? (\n                <Icon icon={faChevronDown} />\n              ) : (\n                <Icon icon={faChevronRight} />\n              )}\n            </button>{' '}\n          </>\n        ),\n        cell: ({row}: TableV2CellContext<LimitRequestStatus, unknown>) => (\n          <span\n            onClick={() => row.toggleExpanded()}\n            style={{\n              cursor: 'pointer',\n              userSelect: 'none',\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n            }}\n          >\n            {row.getIsExpanded() ? (\n              <Icon icon={faChevronDown} />\n            ) : (\n              <Icon icon={faChevronRight} />\n            )}\n          </span>\n        ),\n      },\n      {\n        id: 'accountName',\n        accessorKey: 'accountName',\n        header: () => <div style={{textAlign: 'center'}}>Account Name</div>,\n        footer: (props: TableV2HeaderContext<LimitRequestStatus, unknown>) =>\n          props.column.id,\n      },\n      {\n        id: 'code',\n        accessorKey: 'code',\n        header: () => <div style={{textAlign: 'center'}}>Code</div>,\n        footer: (props: TableV2HeaderContext<LimitRequestStatus, unknown>) =>\n          props.column.id,\n      },\n      {\n        id: 'requestLimit',\n        accessorKey: 'requestLimit',\n        header: () => (\n          <div style={{textAlign: 'center'}}>New Request Limit</div>\n        ),\n        footer: (props: TableV2HeaderContext<LimitRequestStatus, unknown>) =>\n          props.column.id,\n      },\n      {\n        id: 'status',\n        accessorKey: 'status',\n        header: () => <div style={{textAlign: 'center'}}>Status</div>,\n        footer: (props: TableV2HeaderContext<LimitRequestStatus, unknown>) =>\n          props.column.id,\n      },\n    ],\n    [],\n  )\n\n  const renderRowSubComponent = (rowData: LimitRequestStatus) => {\n    return (\n      <div\n        style={{\n          padding: '1em',\n          display: 'flex',\n          flexDirection: 'column',\n          rowGap: '1em',\n        }}\n      >\n        <h3>Current Status: {rowData.status}</h3>\n        <Divider />\n        {rowData.progress?.map((processItem) => {\n          return (\n            <>\n              <p style={{fontSize: '12px'}}>{processItem.remarks}</p>\n              <p style={{fontSize: '11px', fontWeight: 200, color: '#878787'}}>\n                {processItem.createdAt.toDateString()}\n              </p>\n              <Divider />\n            </>\n          )\n        })}\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <ReactTable\n        data={data}\n        columns={columns}\n        options={options}\n        renderRowSubComponent={renderRowSubComponent}\n      >\n        <ReactTable.Footer\n          css={{\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n          }}\n        >\n          <div style={{display: 'flex', alignItems: 'center'}}>\n            <span style={{width: 200}}>Rows per page: </span>\n            <Dropdown.Select defaultSelectedKey='10'>\n              <Dropdown.Item key='10'>10 rows</Dropdown.Item>\n              <Dropdown.Item key='20'>20 rows</Dropdown.Item>\n              <Dropdown.Item key='50'>50 rows</Dropdown.Item>\n            </Dropdown.Select>\n          </div>\n          <div\n            style={{\n              display: 'flex',\n              flexDirection: 'row',\n              alignItems: 'center',\n              gap: '0.5rem',\n            }}\n          >\n            <div\n              style={{\n                fontWeight: '600',\n              }}\n            >\n              {(page - 1) * 10 + 1} - {(page - 1) * 10 + 10} of 100\n            </div>\n            <Pagination\n              page={page}\n              onChange={(page: number) => setPage(page)}\n              total={10}\n            />\n          </div>\n        </ReactTable.Footer>\n      </ReactTable>\n    </div>\n  )\n}\n\nexport default ExpandableColumnTable\n"}};q.scope={process:{},import:{"@fortawesome/free-solid-svg-icons":w,"@comfortdelgro/react-compass":D,"@comfortdelgro/react-compass/table-v2":S,react:R}};var E={"./ReactTable.tsx":function(){var n=(0,C.useState)(1),e=n[0],t=n[1],u=C.useState(function(){return function(){for(var n=arguments.length,e=Array(n),t=0;t<n;t++)e[t]=arguments[t];return function n(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return P(e[t]).map(function(a){return(0,y.Z)((0,y.Z)({},{firstName:L("firstName"),lastName:L("lastName"),age:Math.floor(40*Math.random()),visits:Math.floor(1e3*Math.random()),progress:Math.floor(100*Math.random()),createdAt:A(new Date(2020,0,1),new Date(2029,11,31)),status:["relationship","complicated","single"][Math.floor(3*Math.random())]}),{},{subRows:e[t+1]?n(t+1):null})})}()}(10)}),m=(0,M.Z)(u,2),g=m[0],f=m[1],h=function(n){var e=n.table;return(0,N.jsx)(D.ReactTable.CheckboxCell,{checked:e.getIsAllRowsSelected(),indeterminate:e.getIsSomeRowsSelected(),onChange:e.getToggleAllRowsSelectedHandler()})},b=function(n){var e=n.row;return(0,N.jsx)("div",{className:"px-1",children:(0,N.jsx)(D.ReactTable.CheckboxCell,{disabled:!e.getCanSelect(),checked:e.getIsSelected(),indeterminate:e.getIsSomeSelected(),onChange:e.getToggleSelectedHandler()})})},k=C.useMemo(function(){return[{id:"select",header:function(n){var e=n.table;return(0,N.jsx)(h,{table:e})},cell:function(n){var e=n.row;return(0,N.jsx)(b,{row:e})}},{id:"name",header:function(){return(0,N.jsx)("div",{style:{textAlign:"center"},children:"Name"})},footer:function(n){return n.column.id},enableGrouping:!1,columns:[{accessorKey:"firstName",cell:function(n){return n.getValue()},header:function(){return a||(a=(0,N.jsx)("span",{children:"First Name"}))},footer:function(n){return n.column.id},enableResizing:!0,enableGrouping:!1,sortDescriptor:"asc",meta:{editable:!0,updateData:function(n,e,t){f(function(a){return a.map(function(o,s){return s===n?(0,y.Z)((0,y.Z)({},a[n]),{},(0,T.Z)({},e,t)):o})})}}},{accessorFn:function(n){return n.lastName},id:"lastName",cell:function(n){return n.getValue()},header:function(){return o||(o=(0,N.jsx)("span",{children:"Last Name"}))},footer:function(n){return n.column.id},enableResizing:!0}]},{id:"otherInfo",header:function(){return(0,N.jsx)("div",{style:{textAlign:"center"},children:"Other info"})},footer:function(n){return n.column.id},enableGrouping:!1,columns:[{accessorKey:"age",header:function(){return"Age"},footer:function(n){return n.column.id}},{accessorKey:"visits",header:function(){return s||(s=(0,N.jsx)("span",{children:"Visits"}))},footer:function(n){return n.column.id}},{accessorKey:"status",header:"Status",footer:function(n){return n.column.id}},{accessorKey:"progress",header:"Profile Progress",cell:function(n){return n.getValue()},footer:function(n){return n.column.id}}]}]},[]);return(0,N.jsx)("div",{children:(0,N.jsxs)(D.ReactTable,{data:g,columns:k,options:{enableSorting:!0,enableMultiSort:!0,columnResizeMode:"onChange",manualSorting:!0,enableRowSelection:function(n){return n.original.age>30}},onManualSorting:function(n){},children:[(0,N.jsxs)(D.ReactTable.Toolbar,{css:{display:"flex",flexDirection:"row",justifyContent:"space-between"},children:[r||(r=(0,N.jsx)(D.SearchField,{placeholder:"Search"})),(0,N.jsxs)("div",{style:{display:"flex",flexDirection:"row",alignItems:"center",gap:"0.5rem"},children:[l||(l=(0,N.jsx)(D.Button,{variant:"primary",className:"c-hKssGC-hYGuEl-variant-primary",children:"Button"})),i||(i=(0,N.jsx)(D.Button,{variant:"secondary",children:"Button"})),c||(c=(0,N.jsx)(D.Button,{variant:"ghost",children:(0,N.jsx)(D.Icon,{icon:w.faTrashAlt})})),p||(p=(0,N.jsx)(D.Button,{variant:"ghost",children:(0,N.jsx)(D.Icon,{icon:w.faDashboard})})),d||(d=(0,N.jsx)(D.Button,{variant:"ghost",children:(0,N.jsx)(D.Icon,{icon:w.faFileLines})}))]})]}),(0,N.jsxs)(D.ReactTable.Footer,{css:{display:"flex",flexDirection:"row",justifyContent:"space-between"},children:[(0,N.jsx)("div",{}),(0,N.jsxs)("div",{style:{display:"flex",flexDirection:"row",alignItems:"center",gap:"0.5rem"},children:[(0,N.jsxs)("div",{style:{fontWeight:"600"},children:[(e-1)*10+1," - ",(e-1)*10+10," of 100"]}),(0,N.jsx)(D.Pagination,{page:e,onChange:function(n){return t(n)},total:10})]})]})]})})},"./ExpandableColumnTable.tsx":function(){var n=C.useState(function(){return function(){for(var n=arguments.length,e=Array(n),t=0;t<n;t++)e[t]=arguments[t];return function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return I(e[n]).map(function(n){return(0,y.Z)({},H())})}()}(10)}),e=(0,M.Z)(n,2),t=e[0];e[1];var a=(0,C.useState)(1),o=a[0],s=a[1],r=C.useMemo(function(){return[{id:"expander",size:40,header:function(n){var e=n.table;return(0,N.jsxs)(N.Fragment,{children:[(0,N.jsx)("button",{onClick:e.getToggleAllRowsExpandedHandler(),children:e.getIsAllRowsExpanded()?u||(u=(0,N.jsx)(D.Icon,{icon:w.faChevronDown})):m||(m=(0,N.jsx)(D.Icon,{icon:w.faChevronRight}))})," "]})},cell:function(n){var e=n.row;return(0,N.jsx)("span",{onClick:function(){return e.toggleExpanded()},style:{cursor:"pointer",userSelect:"none",display:"flex",justifyContent:"center",alignItems:"center"},children:e.getIsExpanded()?g||(g=(0,N.jsx)(D.Icon,{icon:w.faChevronDown})):f||(f=(0,N.jsx)(D.Icon,{icon:w.faChevronRight}))})}},{id:"accountName",accessorKey:"accountName",header:function(){return(0,N.jsx)("div",{style:{textAlign:"center"},children:"Account Name"})},footer:function(n){return n.column.id}},{id:"code",accessorKey:"code",header:function(){return(0,N.jsx)("div",{style:{textAlign:"center"},children:"Code"})},footer:function(n){return n.column.id}},{id:"requestLimit",accessorKey:"requestLimit",header:function(){return(0,N.jsx)("div",{style:{textAlign:"center"},children:"New Request Limit"})},footer:function(n){return n.column.id}},{id:"status",accessorKey:"status",header:function(){return(0,N.jsx)("div",{style:{textAlign:"center"},children:"Status"})},footer:function(n){return n.column.id}}]},[]);return(0,N.jsx)("div",{children:(0,N.jsx)(D.ReactTable,{data:t,columns:r,options:{enableSorting:!1,enableMultiSort:!1,columnResizeMode:"onChange",manualSorting:!1},renderRowSubComponent:function(n){var e;return(0,N.jsxs)("div",{style:{padding:"1em",display:"flex",flexDirection:"column",rowGap:"1em"},children:[(0,N.jsxs)("h3",{children:["Current Status: ",n.status]}),h||(h=(0,N.jsx)(D.Divider,{})),null===(e=n.progress)||void 0===e?void 0:e.map(function(n){return(0,N.jsxs)(N.Fragment,{children:[(0,N.jsx)("p",{style:{fontSize:"12px"},children:n.remarks}),(0,N.jsx)("p",{style:{fontSize:"11px",fontWeight:200,color:"#878787"},children:n.createdAt.toDateString()}),b||(b=(0,N.jsx)(D.Divider,{}))]})})]})},children:(0,N.jsxs)(D.ReactTable.Footer,{css:{display:"flex",flexDirection:"row",justifyContent:"space-between"},children:[(0,N.jsxs)("div",{style:{display:"flex",alignItems:"center"},children:[(0,N.jsx)("span",{style:{width:200},children:"Rows per page: "}),k||(k=(0,N.jsxs)(D.Dropdown.Select,{defaultSelectedKey:"10",children:[(0,N.jsx)(D.Dropdown.Item,{children:"10 rows"},"10"),(0,N.jsx)(D.Dropdown.Item,{children:"20 rows"},"20"),(0,N.jsx)(D.Dropdown.Item,{children:"50 rows"},"50")]}))]}),(0,N.jsxs)("div",{style:{display:"flex",flexDirection:"row",alignItems:"center",gap:"0.5rem"},children:[(0,N.jsxs)("div",{style:{fontWeight:"600"},children:[(o-1)*10+1," - ",(o-1)*10+10," of 100"]}),(0,N.jsx)(D.Pagination,{page:o,onChange:function(n){return s(n)},total:10})]})]})})})}},K={"components/common/ComponentLinkHeader.tsx":B.Z};function z(){return(0,N.jsx)(x.Z,(0,y.Z)({},v))}},24464:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/table-v2",function(){return t(13290)}])}},function(n){n.O(0,[4308,8553,964,9958,31,9774,2888,179],function(){return n(n.s=24464)}),_N_E=n.O()}]);