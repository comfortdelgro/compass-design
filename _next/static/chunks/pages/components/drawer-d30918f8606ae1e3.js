(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[317],{93279:function(n,e,o){"use strict";o.d(e,{Z:function(){return s}});var t,r,a=o(15393),i=o(16371),d=o.n(i),l=o(31549);function s(){return(0,l.jsxs)(a.Flexbox,{style:{marginBottom:"var(--cdg-spacing-4)"},children:[(0,l.jsx)(d(),{href:"https://github.com/comfortdelgro/compass-design",target:"_blank",style:{textDecoration:"none"},children:t||(t=(0,l.jsx)(a.Badge,{label:"Github",color:"info",variant:"outline"}))}),(0,l.jsx)(d(),{href:"https://www.figma.com/file/JSiK3cmMmxTt8qhR3dty8t/Workbench-Design-System?type=design&node-id=502-54719&mode=design&t=a4SJbARIttEHmcZS-0",target:"_blank",style:{textDecoration:"none"},children:r||(r=(0,l.jsx)(a.Badge,{label:"Figma",color:"danger",variant:"outline"}))})]})}},44371:function(n,e,o){"use strict";o.r(e),o.d(e,{default:function(){return N}});var t,r,a,i,d,l,s,c,p,m,h,u,g,w,y,f={};o.r(f),o.d(f,{demoComponents:function(){return M},demos:function(){return O},docs:function(){return F},srcComponents:function(){return L}});var b=o(26098),v=o(43866),D=o(49336),k=o(15393),x=o(44194),C=o.t(x,2),T=o(94291),B=o(33807),S=o(27328),H=o.n(S),j=o(31549),P=o(93279),F={en:{description:"Display overlay area on top of a page and slides in from the side. Build on top of the native HTML <strong>&#60;dialog/></strong> element.",location:"/docs/data/components/drawer/drawer.md",rendered:['\n      <svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="copied-icon" viewBox="0 0 24 24">\n        <path d="M20 2H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-8.24 11.28L9.69 11.2c-.38-.39-.38-1.01 0-1.4.39-.39 1.02-.39 1.41 0l1.36 1.37 4.42-4.46c.39-.39 1.02-.39 1.41 0 .38.39.38 1.01 0 1.4l-5.13 5.17c-.37.4-1.01.4-1.4 0zM3 6c-.55 0-1 .45-1 1v13c0 1.1.9 2 2 2h13c.55 0 1-.45 1-1s-.45-1-1-1H5c-.55 0-1-.45-1-1V7c0-.55-.45-1-1-1z" />\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="copy-icon" viewBox="0 0 24 24">\n      <path d="M15 20H5V7c0-.55-.45-1-1-1s-1 .45-1 1v13c0 1.1.9 2 2 2h10c.55 0 1-.45 1-1s-.45-1-1-1zm5-4V4c0-1.1-.9-2-2-2H9c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h9c1.1 0 2-.9 2-2zm-2 0H9V4h9v12z" />\n      +</symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n    <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n      <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n    </symbol>\n    </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="comment-link-icon" viewBox="0 0 24 24">\n        <path d="M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM6 14v-2.47l6.88-6.88c.2-.2.51-.2.71 0l1.77 1.77c.2.2.2.51 0 .71L8.47 14H6zm12 0h-7.5l2-2H18v2z" />\n      </symbol>\n      </svg>','<h1>Drawer</h1><p class="description">Display overlay area on top of a page and slides in from the side. Build on top of the native HTML <strong>&#60;dialog/></strong> element.\n</p>\n\n',{component:"components/common/ComponentLinkHeader.tsx"},'<div class="cdg-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span>Drawer<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@comfortdelgro/react-compass\'</span>\n</code></pre><button aria-label="Copy the code" class="cdg-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24"><use class="cdg-copy-icon" xlink:href="#copy-icon" /><use class="cdg-copied-icon" xlink:href="#copied-icon" /></svg><span class="cdg-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h2 id="basic">Basic<a aria-labelledby="basic" class="anchor-link" href="#basic" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2>',{demo:"Drawer.tsx"},'<h2 id="positions">Positions<a aria-labelledby="positions" class="anchor-link" href="#positions" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2>',{demo:"DrawerPosition.tsx"},'<h2 id="non-modal-mode">Non-modal mode<a aria-labelledby="non-modal-mode" class="anchor-link" href="#non-modal-mode" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>A Drawer that has no backdrop and also doesn&#39;t render on the top-layer. It can NOT be closed by pressing the <code>ESC</code> key.\nThe content below the non-modal drawer can be interacted.</p>\n',{demo:"DrawerMode.tsx"},'<h2 id="compound-components">Compound components<a aria-labelledby="compound-components" class="anchor-link" href="#compound-components" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><ul>\n<li><code>Drawer.Header</code> – a fully customizable header for drawer, usually contains a title and the close button.</li>\n<li><code>Drawer.Footer</code> – bottom of drawer, usually contains action buttons.</li>\n</ul>\n<h2 id="accessibility">Accessibility<a aria-labelledby="accessibility" class="anchor-link" href="#accessibility" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p><code>Drawer</code> component build on top of the native HTML <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog/" target="_blank" rel="noopener nofollow"><code>&lt;dialog/&gt;</code></a> element.</p>\n<p>By default, it respects the default accessibility behavior and settings of a <code>&lt;dialog/&gt;</code> element.</p>\n<h3 id="keyboard-interactions">Keyboard interactions<a aria-labelledby="keyboard-interactions" class="anchor-link" href="#keyboard-interactions" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><table>\n<thead>\n<tr>\n<th align="left">Key</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><kbd>Escape</kbd></td>\n<td align="left">Close the drawer. This behavior will be disabled if <code>drawerMode</code> is <code>&#39;non-modal&#39;</code>.</td>\n</tr>\n<tr>\n<td align="left"><kbd>Tab</kbd> | <kbd>Shift</kbd> <kbd>Tab</kbd></td>\n<td align="left">Cycles through all the focusable elements of the drawer only</td>\n</tr>\n</tbody></table>\n<h2 id="component-props">Component Props<a aria-labelledby="component-props" class="anchor-link" href="#component-props" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><h3 id="common-props">Common Props<a aria-labelledby="common-props" class="anchor-link" href="#common-props" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Type</th>\n<th align="left">Default</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>css</code></td>\n<td align="left"><code>CSS</code></td>\n<td align="left">—</td>\n<td align="left">The system prop that allows defining system overrides as well as additional CSS styles.</td>\n</tr>\n<tr>\n<td align="left"><code>variant</code></td>\n<td align="left"><code>&#39;default&#39;</code></td>\n<td align="left"><code>&#39;default&#39;</code></td>\n<td align="left"></td>\n</tr>\n<tr>\n<td align="left"><code>drawerMode</code></td>\n<td align="left"><code>&#39;modal&#39;</code> | <code>&#39;non-modal&#39;</code></td>\n<td align="left"><code>&#39;modal&#39;</code></td>\n<td align="left"><code>&#39;modal&#39;</code><sup>(1)</sup><br/><code>&#39;non-modal&#39;</code><sup>(2)</sup></td>\n</tr>\n<tr>\n<td align="left"><code>preventFocus</code></td>\n<td align="left"><code>boolean</code></td>\n<td align="left"><code>false</code></td>\n<td align="left">If <code>true</code>, disable a default behavior of <code>&lt;dialog&gt;</code> element: Browser won&#39;t autofocus on the first nested focusable element anymore.</td>\n</tr>\n<tr>\n<td align="left"><code>preventClose</code></td>\n<td align="left"><code>boolean</code></td>\n<td align="left"><code>false</code></td>\n<td align="left">If <code>true</code>, the drawer won&#39;t close when users press <code>Escape</code> key or click/tap on the backdrop.</td>\n</tr>\n</tbody></table>\n<h3 id="variant-default">Variant <code>&#39;default&#39;</code><a aria-labelledby="variant-default" class="anchor-link" href="#variant-default" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Type</th>\n<th align="left">Default</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>position</code></td>\n<td align="left"><code>&#39;left&#39;</code> | <code>&#39;bottom&#39;</code> | <code>&#39;right&#39;</code></td>\n<td align="left"><code>&#39;right&#39;</code></td>\n<td align="left">Side of the screen where drawer will be opened.</td>\n</tr>\n<tr>\n<td align="left"><code>expanderCSS</code></td>\n<td align="left"><code>CSS</code></td>\n<td align="left">—</td>\n<td align="left">Allows to custom CSS styles for the expander (use for drag &amp; drop).</td>\n</tr>\n<tr>\n<td align="left"><code>onHeightChange</code></td>\n<td align="left"><code>(height: number) =&gt; void</code></td>\n<td align="left">—</td>\n<td align="left">Trigger when the drawer&#39;s height changes.</td>\n</tr>\n<tr>\n<td align="left"><code>onExpandChange</code></td>\n<td align="left"><code>(isExpand: boolean) =&gt; void</code></td>\n<td align="left">—</td>\n<td align="left">Trigger when the drawer expanded.</td>\n</tr>\n<tr>\n<td align="left"><code>expandedPoint</code></td>\n<td align="left"><code>number</code></td>\n<td align="left"><code>100</code> - <small>the top edge of available viewport</small></td>\n<td align="left">How many <strong>percentage</strong> of the viewport height that the drawer will be fully expanded.<br/><small>Accepted value range: <code>0</code> - <code>100</code><br/>Must be greater than <code>expandableLine</code> and the drawer initialization height (percent).</small></td>\n</tr>\n<tr>\n<td align="left"><code>expandableLine</code></td>\n<td align="left"><code>number</code></td>\n<td align="left"><code>67</code> - <small>2/3 viewport from bottom of available viewport</small></td>\n<td align="left">A boundary to tell the drawer to fully expand when its top crosses this line.<br/><small>Accepted value range: <code>0</code> - <code>100</code><br/>It must be smaller than <code>expandedPoint</code> and greater than drawer initialization height (percentage).</small></td>\n</tr>\n<tr>\n<td align="left"><code>disableResize</code></td>\n<td align="left"><code>boolean</code></td>\n<td align="left"><code>false</code></td>\n<td align="left">If <code>true</code>, the drawer will NOT be able to expand/collapse and the expander line will be hidden.</td>\n</tr>\n<tr>\n<td align="left"><code>disableDragClose</code></td>\n<td align="left"><code>boolean</code></td>\n<td align="left"><code>false</code></td>\n<td align="left">If <code>true</code>, the drawer will NOT close itself if user drags and drops it below the default height.</td>\n</tr>\n</tbody></table>\n<p>(1): Act the same as a default <code>&lt;dialog/&gt;</code>. It will be rendered on the top-layer with a backdrop. Everything other than the drawer and its contents will be ignored by the browsers and can&#39;t be interact with.<br/>\n(2): It has no backdrop and also doesn&#39;t render on the top-layer. It can not be closed by pressing the <code>ESC</code> key. The content below the non-modal drawer can be interacted. <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog/#accessibility_considerations" target="_blank" rel="noopener nofollow">Read more</a>.</p>\n'],toc:[{text:"Basic",level:2,hash:"basic",children:[]},{text:"Positions",level:2,hash:"positions",children:[]},{text:"Non-modal mode",level:2,hash:"non-modal-mode",children:[]},{text:"Compound components",level:2,hash:"compound-components",children:[]},{text:"Accessibility",level:2,hash:"accessibility",children:[{text:"Keyboard interactions",level:3,hash:"keyboard-interactions"}]},{text:"Component Props",level:2,hash:"component-props",children:[{text:"Common Props",level:3,hash:"common-props"},{text:"Variant <code>&#39;default&#39;</code>",level:3,hash:"variant-default"}]}],title:"React Drawer component",headers:{title:"React Drawer component",components:["Drawer"],hooks:[]}}},O={"Drawer.tsx":{module:"./Drawer.tsx",raw:"import CrossIcon from '@comfortdelgro/compass-icons/react/cross'\nimport {\n  Button,\n  Column,\n  Divider,\n  Drawer,\n  Row,\n  TextField,\n  Typography,\n} from '@comfortdelgro/react-compass'\nimport {FormEventHandler, useState} from 'react'\n\nexport default function DrawerDocs() {\n  const [openDrawer, setOpenDrawer] = useState(false)\n  const [keyword, setKeyword] = useState('') // just for display form value\n\n  const handleFormSubmit: FormEventHandler<HTMLFormElement> = (e) => {\n    e.preventDefault()\n\n    const formData = new FormData(e.currentTarget)\n    setKeyword((formData.get('keyword') as string) || '')\n\n    if (!formData.get('keepFormValue')) {\n      e.currentTarget.reset()\n    }\n\n    setOpenDrawer(false)\n  }\n\n  const listenOnCloseDrawer = () => {\n    setOpenDrawer(false)\n\n    // Do other stuff when drawer close\n  }\n\n  return (\n    <Column>\n      <Typography.Header variant='header4'>\n        Drawer controlled by form\n      </Typography.Header>\n\n      <Row css={{marginBlock: 'var(--cdg-spacing-4)'}}>\n        <Button type='button' onClick={() => setOpenDrawer(true)}>\n          Open Drawer\n        </Button>\n      </Row>\n\n      <Typography.Body variant='body2'>Submitted form values:</Typography.Body>\n      <pre\n        style={{\n          padding: '0.5rem',\n          margin: '0',\n\n          width: '100%',\n          minHeight: '2rem',\n          borderRadius: '8px',\n\n          backgroundColor: '#FAF9F8',\n          fontSize: '0.875rem',\n          whiteSpace: 'pre-wrap',\n          overflowWrap: 'anywhere',\n        }}\n      >\n        {JSON.stringify({keyword}, null, 2)}\n      </pre>\n\n      <Drawer open={openDrawer} onClose={listenOnCloseDrawer}>\n        <Drawer.Header>\n          <Typography.Header variant='header3'>\n            Drawer controlled by form\n          </Typography.Header>\n          <Button\n            css={{\n              padding: 'var(--cdg-spacing-1)',\n              svg: {\n                width: 'fit-content !important',\n              },\n            }}\n            type='button'\n            variant='ghost'\n            onClick={() => setOpenDrawer(false)}\n          >\n            <CrossIcon />\n          </Button>\n        </Drawer.Header>\n\n        <Typography.Header variant='header4'>Drawer Form</Typography.Header>\n        <Typography.Body\n          variant='body3'\n          css={{\n            color: 'var(--cdg-color-grayShades60)',\n            marginBottom: 'var(--cdg-spacing-4)',\n          }}\n        >\n          In this example, all inputs are uncontrolled input.\n        </Typography.Body>\n\n        <form id='form-in-drawer' method='dialog' onSubmit={handleFormSubmit}>\n          <TextField\n            label='Keyword'\n            name='keyword'\n            id='keyword'\n            placeholder='Enter anything'\n          />\n\n          <label htmlFor='keepValue'>Keep form value: </label>\n          <input\n            name='keepFormValue'\n            type='checkbox'\n            id='keepValue'\n            style={{marginTop: '1rem'}}\n          />\n        </form>\n\n        <Divider css={{marginBlock: 'var(--cdg-spacing-4)'}} />\n\n        <Typography.Header\n          variant='header4'\n          css={{marginTop: 'var(--cdg-spacing-16)'}}\n        >\n          Article contents\n        </Typography.Header>\n        <section style={{height: '50vh'}}>\n          <Typography.Header\n            variant='header5'\n            css={{\n              position: 'sticky',\n              insetInline: 0,\n              top: '-1rem',\n              paddingBlock: '1rem',\n              marginBlock: 0,\n              color: 'var(--cdg-color-primaryText)',\n              backgroundColor: 'var(--cdg-color-background)',\n            }}\n          >\n            Section 1: Very long content here, scroll down ⏬ for more content\n          </Typography.Header>\n\n          <Typography.Body variant='body3'>\n            Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo\n            molestiae tenetur in, dicta veniam quisquam iste officia deleniti,\n            nemo cum nesciunt repudiandae fugiat sapiente nihil eius ut culpa\n            quis modi.\n          </Typography.Body>\n        </section>\n\n        <section style={{height: '100vh'}}>\n          <Typography.Header\n            variant='header5'\n            css={{\n              position: 'sticky',\n              insetInline: 0,\n              top: '-1rem',\n              paddingBlock: '1rem',\n              marginBlock: 0,\n              color: 'var(--cdg-color-primaryText)',\n              backgroundColor: 'var(--cdg-color-background)',\n            }}\n          >\n            Section 2: No idea\n          </Typography.Header>\n\n          <Typography.Body variant='body3'>\n            Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo\n            molestiae tenetur in, dicta veniam quisquam iste officia deleniti,\n            nemo cum nesciunt repudiandae fugiat sapiente nihil eius ut culpa\n            quis modi. Lorem ipsum dolor sit amet, consectetur adipisicing elit.\n            Voluptatem quidem omnis architecto aliquam id dicta dolor magnam,\n            sapiente, itaque quaerat laboriosam reiciendis placeat tempore animi\n            ratione! Neque doloribus vel esse.\n          </Typography.Body>\n        </section>\n\n        <Drawer.Footer css={{display: 'flex', gap: 'var(--cdg-spacing-2)'}}>\n          <Button\n            variant='secondary'\n            form='form-in-drawer'\n            type='reset'\n            onClick={() => setOpenDrawer(false)}\n          >\n            Cancel\n          </Button>\n\n          <Button form='form-in-drawer' type='submit'>\n            Submit\n          </Button>\n        </Drawer.Footer>\n      </Drawer>\n    </Column>\n  )\n}\n",jsxPreview:"import {Button, Drawer} from '@comfortdelgro/react-compass'\n\nconst [openDrawer, setOpenDrawer] = useState(false)\n\n<Button type='button' onClick={() => setOpenDrawer(true)}>\n  Open Drawer\n</Button>\n\n<Drawer open={openDrawer} onClose={() => setOpenDrawer(false)}>\n  Some article contents\n</Drawer>\n",moduleTS:"./Drawer.tsx",rawTS:"import CrossIcon from '@comfortdelgro/compass-icons/react/cross'\nimport {\n  Button,\n  Column,\n  Divider,\n  Drawer,\n  Row,\n  TextField,\n  Typography,\n} from '@comfortdelgro/react-compass'\nimport {FormEventHandler, useState} from 'react'\n\nexport default function DrawerDocs() {\n  const [openDrawer, setOpenDrawer] = useState(false)\n  const [keyword, setKeyword] = useState('') // just for display form value\n\n  const handleFormSubmit: FormEventHandler<HTMLFormElement> = (e) => {\n    e.preventDefault()\n\n    const formData = new FormData(e.currentTarget)\n    setKeyword((formData.get('keyword') as string) || '')\n\n    if (!formData.get('keepFormValue')) {\n      e.currentTarget.reset()\n    }\n\n    setOpenDrawer(false)\n  }\n\n  const listenOnCloseDrawer = () => {\n    setOpenDrawer(false)\n\n    // Do other stuff when drawer close\n  }\n\n  return (\n    <Column>\n      <Typography.Header variant='header4'>\n        Drawer controlled by form\n      </Typography.Header>\n\n      <Row css={{marginBlock: 'var(--cdg-spacing-4)'}}>\n        <Button type='button' onClick={() => setOpenDrawer(true)}>\n          Open Drawer\n        </Button>\n      </Row>\n\n      <Typography.Body variant='body2'>Submitted form values:</Typography.Body>\n      <pre\n        style={{\n          padding: '0.5rem',\n          margin: '0',\n\n          width: '100%',\n          minHeight: '2rem',\n          borderRadius: '8px',\n\n          backgroundColor: '#FAF9F8',\n          fontSize: '0.875rem',\n          whiteSpace: 'pre-wrap',\n          overflowWrap: 'anywhere',\n        }}\n      >\n        {JSON.stringify({keyword}, null, 2)}\n      </pre>\n\n      <Drawer open={openDrawer} onClose={listenOnCloseDrawer}>\n        <Drawer.Header>\n          <Typography.Header variant='header3'>\n            Drawer controlled by form\n          </Typography.Header>\n          <Button\n            css={{\n              padding: 'var(--cdg-spacing-1)',\n              svg: {\n                width: 'fit-content !important',\n              },\n            }}\n            type='button'\n            variant='ghost'\n            onClick={() => setOpenDrawer(false)}\n          >\n            <CrossIcon />\n          </Button>\n        </Drawer.Header>\n\n        <Typography.Header variant='header4'>Drawer Form</Typography.Header>\n        <Typography.Body\n          variant='body3'\n          css={{\n            color: 'var(--cdg-color-grayShades60)',\n            marginBottom: 'var(--cdg-spacing-4)',\n          }}\n        >\n          In this example, all inputs are uncontrolled input.\n        </Typography.Body>\n\n        <form id='form-in-drawer' method='dialog' onSubmit={handleFormSubmit}>\n          <TextField\n            label='Keyword'\n            name='keyword'\n            id='keyword'\n            placeholder='Enter anything'\n          />\n\n          <label htmlFor='keepValue'>Keep form value: </label>\n          <input\n            name='keepFormValue'\n            type='checkbox'\n            id='keepValue'\n            style={{marginTop: '1rem'}}\n          />\n        </form>\n\n        <Divider css={{marginBlock: 'var(--cdg-spacing-4)'}} />\n\n        <Typography.Header\n          variant='header4'\n          css={{marginTop: 'var(--cdg-spacing-16)'}}\n        >\n          Article contents\n        </Typography.Header>\n        <section style={{height: '50vh'}}>\n          <Typography.Header\n            variant='header5'\n            css={{\n              position: 'sticky',\n              insetInline: 0,\n              top: '-1rem',\n              paddingBlock: '1rem',\n              marginBlock: 0,\n              color: 'var(--cdg-color-primaryText)',\n              backgroundColor: 'var(--cdg-color-background)',\n            }}\n          >\n            Section 1: Very long content here, scroll down ⏬ for more content\n          </Typography.Header>\n\n          <Typography.Body variant='body3'>\n            Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo\n            molestiae tenetur in, dicta veniam quisquam iste officia deleniti,\n            nemo cum nesciunt repudiandae fugiat sapiente nihil eius ut culpa\n            quis modi.\n          </Typography.Body>\n        </section>\n\n        <section style={{height: '100vh'}}>\n          <Typography.Header\n            variant='header5'\n            css={{\n              position: 'sticky',\n              insetInline: 0,\n              top: '-1rem',\n              paddingBlock: '1rem',\n              marginBlock: 0,\n              color: 'var(--cdg-color-primaryText)',\n              backgroundColor: 'var(--cdg-color-background)',\n            }}\n          >\n            Section 2: No idea\n          </Typography.Header>\n\n          <Typography.Body variant='body3'>\n            Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo\n            molestiae tenetur in, dicta veniam quisquam iste officia deleniti,\n            nemo cum nesciunt repudiandae fugiat sapiente nihil eius ut culpa\n            quis modi. Lorem ipsum dolor sit amet, consectetur adipisicing elit.\n            Voluptatem quidem omnis architecto aliquam id dicta dolor magnam,\n            sapiente, itaque quaerat laboriosam reiciendis placeat tempore animi\n            ratione! Neque doloribus vel esse.\n          </Typography.Body>\n        </section>\n\n        <Drawer.Footer css={{display: 'flex', gap: 'var(--cdg-spacing-2)'}}>\n          <Button\n            variant='secondary'\n            form='form-in-drawer'\n            type='reset'\n            onClick={() => setOpenDrawer(false)}\n          >\n            Cancel\n          </Button>\n\n          <Button form='form-in-drawer' type='submit'>\n            Submit\n          </Button>\n        </Drawer.Footer>\n      </Drawer>\n    </Column>\n  )\n}\n"},"DrawerPosition.tsx":{module:"./DrawerPosition.tsx",raw:"import ArrowLeft from '@comfortdelgro/compass-icons/react/arrow-left'\nimport ArrowRight from '@comfortdelgro/compass-icons/react/arrow-right'\nimport {\n  Button,\n  Column,\n  Drawer,\n  DrawerProps,\n  Row,\n} from '@comfortdelgro/react-compass'\nimport {useState} from 'react'\n\nexport default function DrawerPositionDocs() {\n  const [openDrawerPosition, setOpenDrawerPosition] = useState(false)\n  const [drawerPosition, setDrawerPosition] =\n    useState<DrawerProps['position']>(undefined)\n\n  const handleChangePosition = (position: DrawerProps['position']) => {\n    setDrawerPosition(position)\n    setOpenDrawerPosition(true)\n  }\n\n  const handleCloseDrawer = () => {\n    setOpenDrawerPosition(false)\n  }\n\n  return (\n    <Column>\n      <Row>\n        <Button\n          type='button'\n          leftIcon={<ArrowLeft />}\n          onClick={() => handleChangePosition('left')}\n        >\n          Open on the left\n        </Button>\n\n        <Button\n          variant='secondary'\n          type='button'\n          onClick={() => handleChangePosition('bottom')}\n        >\n          Open on the bottom\n        </Button>\n\n        <Button\n          type='button'\n          rightIcon={<ArrowRight />}\n          onClick={() => handleChangePosition('right')}\n        >\n          Open on the right\n        </Button>\n      </Row>\n\n      <Drawer\n        open={openDrawerPosition}\n        onClose={handleCloseDrawer}\n        position={drawerPosition}\n      >\n        <Drawer.Header>\n          <h2>Drawer {drawerPosition || ''}</h2>\n        </Drawer.Header>\n\n        <p>Article contents</p>\n\n        <Button type='button' onClick={handleCloseDrawer}>\n          Close Drawer\n        </Button>\n      </Drawer>\n    </Column>\n  )\n}\n",jsxPreview:"<Drawer position='left'>\n  ...\n</Drawer>\n",moduleTS:"./DrawerPosition.tsx",rawTS:"import ArrowLeft from '@comfortdelgro/compass-icons/react/arrow-left'\nimport ArrowRight from '@comfortdelgro/compass-icons/react/arrow-right'\nimport {\n  Button,\n  Column,\n  Drawer,\n  DrawerProps,\n  Row,\n} from '@comfortdelgro/react-compass'\nimport {useState} from 'react'\n\nexport default function DrawerPositionDocs() {\n  const [openDrawerPosition, setOpenDrawerPosition] = useState(false)\n  const [drawerPosition, setDrawerPosition] =\n    useState<DrawerProps['position']>(undefined)\n\n  const handleChangePosition = (position: DrawerProps['position']) => {\n    setDrawerPosition(position)\n    setOpenDrawerPosition(true)\n  }\n\n  const handleCloseDrawer = () => {\n    setOpenDrawerPosition(false)\n  }\n\n  return (\n    <Column>\n      <Row>\n        <Button\n          type='button'\n          leftIcon={<ArrowLeft />}\n          onClick={() => handleChangePosition('left')}\n        >\n          Open on the left\n        </Button>\n\n        <Button\n          variant='secondary'\n          type='button'\n          onClick={() => handleChangePosition('bottom')}\n        >\n          Open on the bottom\n        </Button>\n\n        <Button\n          type='button'\n          rightIcon={<ArrowRight />}\n          onClick={() => handleChangePosition('right')}\n        >\n          Open on the right\n        </Button>\n      </Row>\n\n      <Drawer\n        open={openDrawerPosition}\n        onClose={handleCloseDrawer}\n        position={drawerPosition}\n      >\n        <Drawer.Header>\n          <h2>Drawer {drawerPosition || ''}</h2>\n        </Drawer.Header>\n\n        <p>Article contents</p>\n\n        <Button type='button' onClick={handleCloseDrawer}>\n          Close Drawer\n        </Button>\n      </Drawer>\n    </Column>\n  )\n}\n"},"DrawerMode.tsx":{module:"./DrawerMode.tsx",raw:"import {\n  Button,\n  Column,\n  Drawer,\n  Link,\n  Row,\n  Typography,\n} from '@comfortdelgro/react-compass'\nimport {useState} from 'react'\n\nexport default function DrawerModeDocs() {\n  const [openNonModalDrawer, setOpenNonModalDrawer] = useState(false)\n\n  return (\n    <Column>\n      <Row>\n        <Button\n          type='button'\n          onClick={() => setOpenNonModalDrawer(!openNonModalDrawer)}\n        >\n          Toggle Non-modal Drawer\n        </Button>\n      </Row>\n\n      <Drawer\n        open={openNonModalDrawer}\n        onClose={() => setOpenNonModalDrawer(false)}\n        drawerMode='non-modal'\n      >\n        <Drawer.Header>\n          <Typography.Header variant='header3'>\n            Non-modal Drawer\n          </Typography.Header>\n        </Drawer.Header>\n\n        <Typography.Body variant='body2'>\n          <Link\n            href='https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog#accessibility_considerations'\n            target='_blank'\n          >\n            Read more\n          </Link>{' '}\n          about non-modal mode and related accessibility considerations.\n        </Typography.Body>\n\n        <Drawer.Footer>\n          <Button\n            type='button'\n            variant='danger'\n            onClick={() => setOpenNonModalDrawer(false)}\n          >\n            Close Drawer\n          </Button>\n        </Drawer.Footer>\n      </Drawer>\n    </Column>\n  )\n}\n",jsxPreview:"<Drawer drawerMode='non-modal'>\n  ...\n</Drawer>",moduleTS:"./DrawerMode.tsx",rawTS:"import {\n  Button,\n  Column,\n  Drawer,\n  Link,\n  Row,\n  Typography,\n} from '@comfortdelgro/react-compass'\nimport {useState} from 'react'\n\nexport default function DrawerModeDocs() {\n  const [openNonModalDrawer, setOpenNonModalDrawer] = useState(false)\n\n  return (\n    <Column>\n      <Row>\n        <Button\n          type='button'\n          onClick={() => setOpenNonModalDrawer(!openNonModalDrawer)}\n        >\n          Toggle Non-modal Drawer\n        </Button>\n      </Row>\n\n      <Drawer\n        open={openNonModalDrawer}\n        onClose={() => setOpenNonModalDrawer(false)}\n        drawerMode='non-modal'\n      >\n        <Drawer.Header>\n          <Typography.Header variant='header3'>\n            Non-modal Drawer\n          </Typography.Header>\n        </Drawer.Header>\n\n        <Typography.Body variant='body2'>\n          <Link\n            href='https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog#accessibility_considerations'\n            target='_blank'\n          >\n            Read more\n          </Link>{' '}\n          about non-modal mode and related accessibility considerations.\n        </Typography.Body>\n\n        <Drawer.Footer>\n          <Button\n            type='button'\n            variant='danger'\n            onClick={() => setOpenNonModalDrawer(false)}\n          >\n            Close Drawer\n          </Button>\n        </Drawer.Footer>\n      </Drawer>\n    </Column>\n  )\n}\n"}};O.scope={process:{},import:{"@comfortdelgro/compass-icons/react/cross":D,"@comfortdelgro/react-compass":k,react:C,"@comfortdelgro/compass-icons/react/arrow-left":T,"@comfortdelgro/compass-icons/react/arrow-right":B}};var M={"./Drawer.tsx":function(){var n=(0,x.useState)(!1),e=n[0],o=n[1],h=(0,x.useState)(""),u=h[0],g=h[1];return(0,j.jsxs)(k.Column,{children:[t||(t=(0,j.jsx)(k.Typography.Header,{variant:"header4",children:"Drawer controlled by form"})),(0,j.jsx)(k.Row,{css:{marginBlock:"var(--cdg-spacing-4)"},children:(0,j.jsx)(k.Button,{type:"button",onClick:function(){return o(!0)},children:"Open Drawer"})}),r||(r=(0,j.jsx)(k.Typography.Body,{variant:"body2",children:"Submitted form values:"})),(0,j.jsx)("pre",{style:{padding:"0.5rem",margin:"0",width:"100%",minHeight:"2rem",borderRadius:"8px",backgroundColor:"#FAF9F8",fontSize:"0.875rem",whiteSpace:"pre-wrap",overflowWrap:"anywhere"},children:H()({keyword:u},null,2)}),(0,j.jsxs)(k.Drawer,{open:e,onClose:function(){o(!1)},children:[(0,j.jsxs)(k.Drawer.Header,{children:[a||(a=(0,j.jsx)(k.Typography.Header,{variant:"header3",children:"Drawer controlled by form"})),(0,j.jsx)(k.Button,{css:{padding:"var(--cdg-spacing-1)",svg:{width:"fit-content !important"}},type:"button",variant:"ghost",onClick:function(){return o(!1)},children:i||(i=(0,j.jsx)(D.default,{}))})]}),d||(d=(0,j.jsx)(k.Typography.Header,{variant:"header4",children:"Drawer Form"})),(0,j.jsx)(k.Typography.Body,{variant:"body3",css:{color:"var(--cdg-color-grayShades60)",marginBottom:"var(--cdg-spacing-4)"},children:"In this example, all inputs are uncontrolled input."}),(0,j.jsxs)("form",{id:"form-in-drawer",method:"dialog",onSubmit:function(n){n.preventDefault();var e=new FormData(n.currentTarget);g(e.get("keyword")||""),e.get("keepFormValue")||n.currentTarget.reset(),o(!1)},children:[l||(l=(0,j.jsx)(k.TextField,{label:"Keyword",name:"keyword",id:"keyword",placeholder:"Enter anything"})),s||(s=(0,j.jsx)("label",{htmlFor:"keepValue",children:"Keep form value: "})),(0,j.jsx)("input",{name:"keepFormValue",type:"checkbox",id:"keepValue",style:{marginTop:"1rem"}})]}),(0,j.jsx)(k.Divider,{css:{marginBlock:"var(--cdg-spacing-4)"}}),(0,j.jsx)(k.Typography.Header,{variant:"header4",css:{marginTop:"var(--cdg-spacing-16)"},children:"Article contents"}),(0,j.jsxs)("section",{style:{height:"50vh"},children:[(0,j.jsx)(k.Typography.Header,{variant:"header5",css:{position:"sticky",insetInline:0,top:"-1rem",paddingBlock:"1rem",marginBlock:0,color:"var(--cdg-color-primaryText)",backgroundColor:"var(--cdg-color-background)"},children:"Section 1: Very long content here, scroll down ⏬ for more content"}),c||(c=(0,j.jsx)(k.Typography.Body,{variant:"body3",children:"Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo molestiae tenetur in, dicta veniam quisquam iste officia deleniti, nemo cum nesciunt repudiandae fugiat sapiente nihil eius ut culpa quis modi."}))]}),(0,j.jsxs)("section",{style:{height:"100vh"},children:[(0,j.jsx)(k.Typography.Header,{variant:"header5",css:{position:"sticky",insetInline:0,top:"-1rem",paddingBlock:"1rem",marginBlock:0,color:"var(--cdg-color-primaryText)",backgroundColor:"var(--cdg-color-background)"},children:"Section 2: No idea"}),p||(p=(0,j.jsx)(k.Typography.Body,{variant:"body3",children:"Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo molestiae tenetur in, dicta veniam quisquam iste officia deleniti, nemo cum nesciunt repudiandae fugiat sapiente nihil eius ut culpa quis modi. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatem quidem omnis architecto aliquam id dicta dolor magnam, sapiente, itaque quaerat laboriosam reiciendis placeat tempore animi ratione! Neque doloribus vel esse."}))]}),(0,j.jsxs)(k.Drawer.Footer,{css:{display:"flex",gap:"var(--cdg-spacing-2)"},children:[(0,j.jsx)(k.Button,{variant:"secondary",form:"form-in-drawer",type:"reset",onClick:function(){return o(!1)},children:"Cancel"}),m||(m=(0,j.jsx)(k.Button,{form:"form-in-drawer",type:"submit",children:"Submit"}))]})]})]})},"./DrawerPosition.tsx":function(){var n=(0,x.useState)(!1),e=n[0],o=n[1],t=(0,x.useState)(void 0),r=t[0],a=t[1],i=function(n){a(n),o(!0)},d=function(){o(!1)};return(0,j.jsxs)(k.Column,{children:[(0,j.jsxs)(k.Row,{children:[(0,j.jsx)(k.Button,{type:"button",leftIcon:h||(h=(0,j.jsx)(T.default,{})),onClick:function(){return i("left")},children:"Open on the left"}),(0,j.jsx)(k.Button,{variant:"secondary",type:"button",onClick:function(){return i("bottom")},children:"Open on the bottom"}),(0,j.jsx)(k.Button,{type:"button",rightIcon:u||(u=(0,j.jsx)(B.default,{})),onClick:function(){return i("right")},children:"Open on the right"})]}),(0,j.jsxs)(k.Drawer,{open:e,onClose:d,position:r,children:[(0,j.jsx)(k.Drawer.Header,{children:(0,j.jsxs)("h2",{children:["Drawer ",r||""]})}),g||(g=(0,j.jsx)("p",{children:"Article contents"})),(0,j.jsx)(k.Button,{type:"button",onClick:d,children:"Close Drawer"})]})]})},"./DrawerMode.tsx":function(){var n=(0,x.useState)(!1),e=n[0],o=n[1];return(0,j.jsxs)(k.Column,{children:[(0,j.jsx)(k.Row,{children:(0,j.jsx)(k.Button,{type:"button",onClick:function(){return o(!e)},children:"Toggle Non-modal Drawer"})}),(0,j.jsxs)(k.Drawer,{open:e,onClose:function(){return o(!1)},drawerMode:"non-modal",children:[w||(w=(0,j.jsx)(k.Drawer.Header,{children:(0,j.jsx)(k.Typography.Header,{variant:"header3",children:"Non-modal Drawer"})})),y||(y=(0,j.jsxs)(k.Typography.Body,{variant:"body2",children:[(0,j.jsx)(k.Link,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog#accessibility_considerations",target:"_blank",children:"Read more"})," ","about non-modal mode and related accessibility considerations."]})),(0,j.jsx)(k.Drawer.Footer,{children:(0,j.jsx)(k.Button,{type:"button",variant:"danger",onClick:function(){return o(!1)},children:"Close Drawer"})})]})]})}},L={"components/common/ComponentLinkHeader.tsx":P.Z};function N(){return(0,j.jsx)(v.Z,(0,b.Z)({},f))}},99307:function(n,e,o){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/drawer",function(){return o(44371)}])},49336:function(n,e,o){"use strict";o.r(e);var t=o(44194);let r=(0,t.forwardRef)((n,e)=>t.createElement("svg",{width:"1em",height:"1em",viewBox:"0 0 32 32",ref:e,...n},t.createElement("g",{fill:"currentColor"},t.createElement("path",{d:"M30.1165 25.8816C31.2883 27.0534 31.2883 28.9517 30.1165 30.1235C29.5353 30.7094 28.7666 31 27.9979 31C27.2292 31 26.4624 30.7071 25.8774 30.1212L15.9988 20.2477L6.12116 30.1188C5.53527 30.7094 4.76752 31 3.99977 31C3.23201 31 2.4652 30.7094 1.87884 30.1188C0.707054 28.947 0.707054 27.0487 1.87884 25.877L11.7593 15.9965L1.87884 6.12069C0.707054 4.94891 0.707054 3.05062 1.87884 1.87884C3.05062 0.707054 4.94891 0.707054 6.12069 1.87884L15.9988 11.764L25.8793 1.88353C27.0511 0.711742 28.9494 0.711742 30.1212 1.88353C31.2929 3.05531 31.2929 4.9536 30.1212 6.12538L20.2407 16.0059L30.1165 25.8816Z"}))));e.default=r}},function(n){n.O(0,[4308,9813,5675,3866,9774,2888,179],function(){return n(n.s=99307)}),_N_E=n.O()}]);