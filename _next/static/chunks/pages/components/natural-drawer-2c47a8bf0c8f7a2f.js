(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7668],{93279:function(n,e,t){"use strict";t.d(e,{Z:function(){return i}});var a,l,o=t(15393),d=t(16371),r=t.n(d),s=t(31549);function i(){return(0,s.jsxs)(o.Flexbox,{style:{marginBottom:"var(--cdg-spacing-4)"},children:[(0,s.jsx)(r(),{href:"https://github.com/comfortdelgro/compass-design",target:"_blank",style:{textDecoration:"none"},children:a||(a=(0,s.jsx)(o.Badge,{label:"Github",color:"info",variant:"outline"}))}),(0,s.jsx)(r(),{href:"https://www.figma.com/file/JSiK3cmMmxTt8qhR3dty8t/Workbench-Design-System?type=design&node-id=502-54719&mode=design&t=a4SJbARIttEHmcZS-0",target:"_blank",style:{textDecoration:"none"},children:l||(l=(0,s.jsx)(o.Badge,{label:"Figma",color:"danger",variant:"outline"}))})]})}},47893:function(n,e,t){"use strict";t.r(e),t.d(e,{default:function(){return k}});var a,l,o,d,r,s,i,c,u,p={};t.r(p),t.d(p,{demoComponents:function(){return D},demos:function(){return b},docs:function(){return C},srcComponents:function(){return y}});var x=t(26098),h=t(43866),f=t(15393),w=t(44194),m=t.t(w,2),g=t(31549),v=t(93279),C={en:{description:"The new version of Drawer that using natural scrollbar to handle everything and have less logic.",location:"/docs/data/components/natural-drawer/natural-drawer.md",rendered:['\n      <svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="copied-icon" viewBox="0 0 24 24">\n        <path d="M20 2H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-8.24 11.28L9.69 11.2c-.38-.39-.38-1.01 0-1.4.39-.39 1.02-.39 1.41 0l1.36 1.37 4.42-4.46c.39-.39 1.02-.39 1.41 0 .38.39.38 1.01 0 1.4l-5.13 5.17c-.37.4-1.01.4-1.4 0zM3 6c-.55 0-1 .45-1 1v13c0 1.1.9 2 2 2h13c.55 0 1-.45 1-1s-.45-1-1-1H5c-.55 0-1-.45-1-1V7c0-.55-.45-1-1-1z" />\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="copy-icon" viewBox="0 0 24 24">\n      <path d="M15 20H5V7c0-.55-.45-1-1-1s-1 .45-1 1v13c0 1.1.9 2 2 2h10c.55 0 1-.45 1-1s-.45-1-1-1zm5-4V4c0-1.1-.9-2-2-2H9c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h9c1.1 0 2-.9 2-2zm-2 0H9V4h9v12z" />\n      +</symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n    <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n      <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n    </symbol>\n    </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="comment-link-icon" viewBox="0 0 24 24">\n        <path d="M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM6 14v-2.47l6.88-6.88c.2-.2.51-.2.71 0l1.77 1.77c.2.2.2.51 0 .71L8.47 14H6zm12 0h-7.5l2-2H18v2z" />\n      </symbol>\n      </svg>','<h1>Natural Drawer</h1><p class="description">The new version of Drawer that using natural scrollbar to handle everything and have less logic.\n</p>\n\n',{component:"components/common/ComponentLinkHeader.tsx"},'<div class="cdg-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span>Natural Drawer<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@comfortdelgro/react-compass\'</span>\n</code></pre><button aria-label="Copy the code" class="cdg-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24"><use class="cdg-copy-icon" xlink:href="#copy-icon" /><use class="cdg-copied-icon" xlink:href="#copied-icon" /></svg><span class="cdg-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h2 id="basic">Basic<a aria-labelledby="basic" class="anchor-link" href="#basic" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2>',{demo:"NaturalDrawer.tsx"},'<h2 id="full-screen">Full Screen<a aria-labelledby="full-screen" class="anchor-link" href="#full-screen" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2>',{demo:"NaturalDrawerFullScreen.tsx"},'<h2 id="interact-with-background">Interact With Background<a aria-labelledby="interact-with-background" class="anchor-link" href="#interact-with-background" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2>',{demo:"AccessibleBackground.tsx"},'<h2 id="interact-with-background-full-screen">Interact With Background Full Screen<a aria-labelledby="interact-with-background-full-screen" class="anchor-link" href="#interact-with-background-full-screen" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2>',{demo:"AccessibleBackgroundFullScreen.tsx"},'<h2 id="bottom-sheet">Bottom Sheet<a aria-labelledby="bottom-sheet" class="anchor-link" href="#bottom-sheet" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2>',{demo:"BottomSheet.tsx"},'<h2 id="bottom-sheet-full-screen">Bottom Sheet Full Screen<a aria-labelledby="bottom-sheet-full-screen" class="anchor-link" href="#bottom-sheet-full-screen" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2>',{demo:"BottomSheetFullScreen.tsx"},'<h2 id="compound-components">Compound components<a aria-labelledby="compound-components" class="anchor-link" href="#compound-components" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><ul>\n<li><code>NaturalDrawer.Header</code> – pass it as header property to use the header part with dragging bar. |</li>\n</ul>\n<h2 id="component-props">Component Props<a aria-labelledby="component-props" class="anchor-link" href="#component-props" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><h3 id="common-props">Common Props<a aria-labelledby="common-props" class="anchor-link" href="#common-props" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Type</th>\n<th align="left">Default</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left">type</td>\n<td align="left"><code>drawer</code> <code>bottomSheet</code></td>\n<td align="left"><code>drawer</code></td>\n<td align="left">Use <code>drawer</code> for the view that always show on screen, <code>bottomSheet</code> for the view looks like a dialog</td>\n</tr>\n<tr>\n<td align="left">children</td>\n<td align="left"><code>React.ReactNode</code></td>\n<td align="left">—</td>\n<td align="left">The content of the drawer</td>\n</tr>\n<tr>\n<td align="left">expanded</td>\n<td align="left"><code>boolean</code></td>\n<td align="left">—</td>\n<td align="left">To let the drawer expanded</td>\n</tr>\n<tr>\n<td align="left">fullscreen</td>\n<td align="left"><code>true</code></td>\n<td align="left">—</td>\n<td align="left">To display drawer inside a view or full screen with fixed position</td>\n</tr>\n<tr>\n<td align="left">header</td>\n<td align="left"><code>React.ReactNode</code></td>\n<td align="left">—</td>\n<td align="left">Header element will be places on top</td>\n</tr>\n<tr>\n<td align="left">fixedContent</td>\n<td align="left"><code>React.ReactNode</code></td>\n<td align="left">—</td>\n<td align="left">Content that can be interact with under the Drawer (Don not use it with <code>bottonSheet</code> type)</td>\n</tr>\n<tr>\n<td align="left">className</td>\n<td align="left"><code>visibleHeight</code></td>\n<td align="left"><code>36%</code></td>\n<td align="left">How much height auto display on screen</td>\n</tr>\n<tr>\n<td align="left">drawerScroll</td>\n<td align="left"><code>void</code></td>\n<td align="left">—</td>\n<td align="left">Event when user scroll the drawer</td>\n</tr>\n<tr>\n<td align="left">onReachBotton</td>\n<td align="left"><code>void</code></td>\n<td align="left">—</td>\n<td align="left">Event when user scroll to less than 10px from the bottom</td>\n</tr>\n<tr>\n<td align="left">onCollapsed</td>\n<td align="left"><code>void</code></td>\n<td align="left">—</td>\n<td align="left">Event when drawer has changed to collapsed</td>\n</tr>\n<tr>\n<td align="left">onExpanded</td>\n<td align="left"><code>void</code></td>\n<td align="left">—</td>\n<td align="left">Event when drawer has changed to expanded</td>\n</tr>\n<tr>\n<td align="left">className</td>\n<td align="left"><code>string</code></td>\n<td align="left">—</td>\n<td align="left">Custom class name</td>\n</tr>\n<tr>\n<td align="left">style</td>\n<td align="left"><code>React.CSSProperties</code></td>\n<td align="left">—</td>\n<td align="left">Custom style</td>\n</tr>\n</tbody></table>\n'],toc:[{text:"Basic",level:2,hash:"basic",children:[]},{text:"Full Screen",level:2,hash:"full-screen",children:[]},{text:"Interact With Background",level:2,hash:"interact-with-background",children:[]},{text:"Interact With Background Full Screen",level:2,hash:"interact-with-background-full-screen",children:[]},{text:"Bottom Sheet",level:2,hash:"bottom-sheet",children:[]},{text:"Bottom Sheet Full Screen",level:2,hash:"bottom-sheet-full-screen",children:[]},{text:"Compound components",level:2,hash:"compound-components",children:[]},{text:"Component Props",level:2,hash:"component-props",children:[{text:"Common Props",level:3,hash:"common-props"}]}],title:"React Natural Drawer component",headers:{title:"React Natural Drawer component",components:["Natural Drawer"],hooks:[]}}},b={"NaturalDrawer.tsx":{module:"./NaturalDrawer.tsx",raw:"import {NaturalDrawer} from '@comfortdelgro/react-compass'\nimport {useCallback, useState} from 'react'\n\nexport default function DrawerDocs() {\n  const [expanded, setExpanded] = useState<boolean>(false)\n  const [distance, setDistance] = useState(0)\n\n  const handleDrawerScroll = useCallback(\n    (event: React.UIEvent<HTMLDivElement>) => {\n      setDistance((event.target as HTMLDivElement).scrollTop)\n    },\n    [],\n  )\n\n  const handleCollapsed = useCallback(() => {\n    setExpanded(false)\n  }, [])\n\n  const handleExpanded = useCallback(() => {\n    setExpanded(true)\n  }, [])\n\n  return (\n    <div\n      style={{\n        maxWidth: '680px',\n        margin: '0 auto',\n      }}\n    >\n      <div\n        style={{\n          position: 'relative',\n          overflow: 'auto',\n          display: 'flex',\n          flexDirection: 'column',\n          height: '600px',\n        }}\n      >\n        <h4>Drawer</h4>\n        <p>Scrolled: {distance}</p>\n        <NaturalDrawer\n          expanded={expanded}\n          fullscreen={false}\n          header={\n            <NaturalDrawer.Header\n              onClick={() => setExpanded(!expanded)}\n              useDrag\n            ></NaturalDrawer.Header>\n          }\n          drawerScroll={handleDrawerScroll}\n          onCollapsed={handleCollapsed}\n          onExpanded={handleExpanded}\n          style={{\n            flex: '1',\n            maxHeight: '500px',\n            border: '1px solid rgba(0,0,0,0.1)',\n          }}\n        >\n          <div style={{height: '800px', padding: '0 16px'}}>Drawer content</div>\n        </NaturalDrawer>\n      </div>\n    </div>\n  )\n}\n",jsxPreview:"import {NaturalDrawer} from '@comfortdelgro/react-compass'\nimport {useCallback, useState} from 'react'\n\nexport default function DrawerDocs() {\n  const [expanded, setExpanded] = useState<boolean>(false)\n  const [distance, setDistance] = useState(0)\n\n  const handleDrawerScroll = useCallback(\n    (event: React.UIEvent<HTMLDivElement>) => {\n      setDistance((event.target as HTMLDivElement).scrollTop)\n    },\n    [],\n  )\n\n  const handleCollapsed = useCallback(() => {\n    setExpanded(false)\n  }, [])\n\n  const handleExpanded = useCallback(() => {\n    setExpanded(true)\n  }, [])\n\n  return (\n    <div\n      style={{\n        maxWidth: '680px',\n        margin: '0 auto',\n      }}\n    >\n      <div\n        style={{\n          position: 'relative',\n          overflow: 'auto',\n          display: 'flex',\n          flexDirection: 'column',\n          height: '600px',\n        }}\n      >\n        <h4>Drawer</h4>\n        <p>Scrolled: {distance}</p>\n        <NaturalDrawer\n          expanded={expanded}\n          fullscreen={false}\n          header={\n            <NaturalDrawer.Header\n              onClick={() => setExpanded(!expanded)}\n              useDrag\n            ></NaturalDrawer.Header>\n          }\n          drawerScroll={handleDrawerScroll}\n          onCollapsed={handleCollapsed}\n          onExpanded={handleExpanded}\n          style={{\n            flex: '1',\n            maxHeight: '500px',\n            border: '1px solid rgba(0,0,0,0.1)',\n          }}\n        >\n          <div style={{height: '800px', padding: '0 16px'}}>Drawer content</div>\n        </NaturalDrawer>\n      </div>\n    </div>\n  )\n}\n",moduleTS:"./NaturalDrawer.tsx",rawTS:"import {NaturalDrawer} from '@comfortdelgro/react-compass'\nimport {useCallback, useState} from 'react'\n\nexport default function DrawerDocs() {\n  const [expanded, setExpanded] = useState<boolean>(false)\n  const [distance, setDistance] = useState(0)\n\n  const handleDrawerScroll = useCallback(\n    (event: React.UIEvent<HTMLDivElement>) => {\n      setDistance((event.target as HTMLDivElement).scrollTop)\n    },\n    [],\n  )\n\n  const handleCollapsed = useCallback(() => {\n    setExpanded(false)\n  }, [])\n\n  const handleExpanded = useCallback(() => {\n    setExpanded(true)\n  }, [])\n\n  return (\n    <div\n      style={{\n        maxWidth: '680px',\n        margin: '0 auto',\n      }}\n    >\n      <div\n        style={{\n          position: 'relative',\n          overflow: 'auto',\n          display: 'flex',\n          flexDirection: 'column',\n          height: '600px',\n        }}\n      >\n        <h4>Drawer</h4>\n        <p>Scrolled: {distance}</p>\n        <NaturalDrawer\n          expanded={expanded}\n          fullscreen={false}\n          header={\n            <NaturalDrawer.Header\n              onClick={() => setExpanded(!expanded)}\n              useDrag\n            ></NaturalDrawer.Header>\n          }\n          drawerScroll={handleDrawerScroll}\n          onCollapsed={handleCollapsed}\n          onExpanded={handleExpanded}\n          style={{\n            flex: '1',\n            maxHeight: '500px',\n            border: '1px solid rgba(0,0,0,0.1)',\n          }}\n        >\n          <div style={{height: '800px', padding: '0 16px'}}>Drawer content</div>\n        </NaturalDrawer>\n      </div>\n    </div>\n  )\n}\n"},"NaturalDrawerFullScreen.tsx":{module:"./NaturalDrawerFullScreen.tsx",raw:"import {Button, NaturalDrawer} from '@comfortdelgro/react-compass'\nimport {useCallback, useState} from 'react'\n\nexport default function DrawerDocs() {\n  const [isShow, setIsShow] = useState<boolean>(false)\n  const [expanded, setExpanded] = useState<boolean>(false)\n  const [distance, setDistance] = useState(0)\n\n  const handleDrawerScroll = useCallback(\n    (event: React.UIEvent<HTMLDivElement>) => {\n      setDistance((event.target as HTMLDivElement).scrollTop)\n    },\n    [],\n  )\n\n  const handleCollapsed = useCallback(() => {\n    setExpanded(false)\n  }, [])\n\n  const handleExpanded = useCallback(() => {\n    setExpanded(true)\n  }, [])\n\n  return (\n    <div\n      style={{\n        overflow: 'auto',\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <Button onClick={() => setIsShow(true)}>Open</Button>\n      {isShow && (\n        <>\n          <h4>Drawer</h4>\n          <p>Scrolled: {distance}</p>\n          <NaturalDrawer\n            expanded={expanded}\n            header={\n              <NaturalDrawer.Header\n                onClick={() => setExpanded(!expanded)}\n                useDrag\n              ></NaturalDrawer.Header>\n            }\n            drawerScroll={handleDrawerScroll}\n            onCollapsed={handleCollapsed}\n            onExpanded={handleExpanded}\n            style={{\n              flex: '1',\n            }}\n          >\n            <div style={{height: '800px', padding: '0 16px'}}>\n              <p>Drawer content</p>\n              <Button onClick={() => setIsShow(false)}>Close</Button>\n            </div>\n          </NaturalDrawer>\n        </>\n      )}\n    </div>\n  )\n}\n",jsxPreview:"import {Button, NaturalDrawer} from '@comfortdelgro/react-compass'\nimport {useCallback, useState} from 'react'\n\nexport default function DrawerDocs() {\n  const [isShow, setIsShow] = useState<boolean>(false)\n  const [expanded, setExpanded] = useState<boolean>(false)\n  const [distance, setDistance] = useState(0)\n\n  const handleDrawerScroll = useCallback(\n    (event: React.UIEvent<HTMLDivElement>) => {\n      setDistance((event.target as HTMLDivElement).scrollTop)\n    },\n    [],\n  )\n\n  const handleCollapsed = useCallback(() => {\n    setExpanded(false)\n  }, [])\n\n  const handleExpanded = useCallback(() => {\n    setExpanded(true)\n  }, [])\n\n  return (\n    <div\n      style={{\n        overflow: 'auto',\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <Button onClick={() => setIsShow(true)}>Open</Button>\n      {isShow && (\n        <>\n          <h4>Drawer</h4>\n          <p>Scrolled: {distance}</p>\n          <NaturalDrawer\n            expanded={expanded}\n            header={\n              <NaturalDrawer.Header\n                onClick={() => setExpanded(!expanded)}\n                useDrag\n              ></NaturalDrawer.Header>\n            }\n            drawerScroll={handleDrawerScroll}\n            onCollapsed={handleCollapsed}\n            onExpanded={handleExpanded}\n            style={{\n              flex: '1',\n            }}\n          >\n            <div style={{height: '800px', padding: '0 16px'}}>\n              <p>Drawer content</p>\n              <Button onClick={() => setIsShow(false)}>Close</Button>\n            </div>\n          </NaturalDrawer>\n        </>\n      )}\n    </div>\n  )\n}\n",moduleTS:"./NaturalDrawerFullScreen.tsx",rawTS:"import {Button, NaturalDrawer} from '@comfortdelgro/react-compass'\nimport {useCallback, useState} from 'react'\n\nexport default function DrawerDocs() {\n  const [isShow, setIsShow] = useState<boolean>(false)\n  const [expanded, setExpanded] = useState<boolean>(false)\n  const [distance, setDistance] = useState(0)\n\n  const handleDrawerScroll = useCallback(\n    (event: React.UIEvent<HTMLDivElement>) => {\n      setDistance((event.target as HTMLDivElement).scrollTop)\n    },\n    [],\n  )\n\n  const handleCollapsed = useCallback(() => {\n    setExpanded(false)\n  }, [])\n\n  const handleExpanded = useCallback(() => {\n    setExpanded(true)\n  }, [])\n\n  return (\n    <div\n      style={{\n        overflow: 'auto',\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <Button onClick={() => setIsShow(true)}>Open</Button>\n      {isShow && (\n        <>\n          <h4>Drawer</h4>\n          <p>Scrolled: {distance}</p>\n          <NaturalDrawer\n            expanded={expanded}\n            header={\n              <NaturalDrawer.Header\n                onClick={() => setExpanded(!expanded)}\n                useDrag\n              ></NaturalDrawer.Header>\n            }\n            drawerScroll={handleDrawerScroll}\n            onCollapsed={handleCollapsed}\n            onExpanded={handleExpanded}\n            style={{\n              flex: '1',\n            }}\n          >\n            <div style={{height: '800px', padding: '0 16px'}}>\n              <p>Drawer content</p>\n              <Button onClick={() => setIsShow(false)}>Close</Button>\n            </div>\n          </NaturalDrawer>\n        </>\n      )}\n    </div>\n  )\n}\n"},"AccessibleBackground.tsx":{module:"./AccessibleBackground.tsx",raw:"import {Button, NaturalDrawer} from '@comfortdelgro/react-compass'\nimport {useCallback, useState} from 'react'\n\nexport default function DrawerDocs() {\n  const [expanded, setExpanded] = useState<boolean>(false)\n  const [count, setCount] = useState<number>(0)\n\n  const handleCollapsed = useCallback(() => {\n    setExpanded(false)\n  }, [])\n\n  const handleExpanded = useCallback(() => {\n    setExpanded(true)\n  }, [])\n\n  return (\n    <div\n      style={{\n        padding: '20px',\n        maxWidth: '680px',\n        margin: '0 auto',\n      }}\n    >\n      <div\n        style={{\n          position: 'relative',\n          overflow: 'auto',\n          display: 'flex',\n          flexDirection: 'column',\n          height: '600px',\n        }}\n      >\n        <NaturalDrawer\n          expanded={expanded}\n          fullscreen={false}\n          fixedContent={\n            <div\n              style={{\n                padding: '16px',\n              }}\n            >\n              <div>\n                This content is under the drawer so that you still can interact\n                with it.\n              </div>\n              <p>{count}</p>\n              <p>\n                <Button\n                  onClick={() => {\n                    setCount(count + 1)\n                  }}\n                  variant={'secondary'}\n                >\n                  Count\n                </Button>\n              </p>\n            </div>\n          }\n          onCollapsed={handleCollapsed}\n          onExpanded={handleExpanded}\n          style={{\n            flex: '1',\n            border: '1px solid rgba(0,0,0,0.1)',\n          }}\n        >\n          <div style={{height: '800px', padding: '16px'}}>\n            <p>Drawer content</p>\n            <Button onClick={() => setExpanded(!expanded)}>\n              {expanded ? 'Collapse' : 'Expand'}\n            </Button>\n          </div>\n        </NaturalDrawer>\n      </div>\n    </div>\n  )\n}\n",jsxPreview:"import {Button, NaturalDrawer} from '@comfortdelgro/react-compass'\nimport {useCallback, useState} from 'react'\n\nexport default function DrawerDocs() {\n  const [expanded, setExpanded] = useState<boolean>(false)\n  const [count, setCount] = useState<number>(0)\n\n  const handleCollapsed = useCallback(() => {\n    setExpanded(false)\n  }, [])\n\n  const handleExpanded = useCallback(() => {\n    setExpanded(true)\n  }, [])\n\n  return (\n    <div\n      style={{\n        padding: '20px',\n        maxWidth: '680px',\n        margin: '0 auto',\n      }}\n    >\n      <div\n        style={{\n          position: 'relative',\n          overflow: 'auto',\n          display: 'flex',\n          flexDirection: 'column',\n          height: '600px',\n        }}\n      >\n        <NaturalDrawer\n          expanded={expanded}\n          fullscreen={false}\n          fixedContent={\n            <div\n              style={{\n                padding: '16px',\n              }}\n            >\n              <div>\n                This content is under the drawer so that you still can interact\n                with it.\n              </div>\n              <p>{count}</p>\n              <p>\n                <Button\n                  onClick={() => {\n                    setCount(count + 1)\n                  }}\n                  variant={'secondary'}\n                >\n                  Count\n                </Button>\n              </p>\n            </div>\n          }\n          onCollapsed={handleCollapsed}\n          onExpanded={handleExpanded}\n          style={{\n            flex: '1',\n            border: '1px solid rgba(0,0,0,0.1)',\n          }}\n        >\n          <div style={{height: '800px', padding: '16px'}}>\n            <p>Drawer content</p>\n            <Button onClick={() => setExpanded(!expanded)}>\n              {expanded ? 'Collapse' : 'Expand'}\n            </Button>\n          </div>\n        </NaturalDrawer>\n      </div>\n    </div>\n  )\n}\n",moduleTS:"./AccessibleBackground.tsx",rawTS:"import {Button, NaturalDrawer} from '@comfortdelgro/react-compass'\nimport {useCallback, useState} from 'react'\n\nexport default function DrawerDocs() {\n  const [expanded, setExpanded] = useState<boolean>(false)\n  const [count, setCount] = useState<number>(0)\n\n  const handleCollapsed = useCallback(() => {\n    setExpanded(false)\n  }, [])\n\n  const handleExpanded = useCallback(() => {\n    setExpanded(true)\n  }, [])\n\n  return (\n    <div\n      style={{\n        padding: '20px',\n        maxWidth: '680px',\n        margin: '0 auto',\n      }}\n    >\n      <div\n        style={{\n          position: 'relative',\n          overflow: 'auto',\n          display: 'flex',\n          flexDirection: 'column',\n          height: '600px',\n        }}\n      >\n        <NaturalDrawer\n          expanded={expanded}\n          fullscreen={false}\n          fixedContent={\n            <div\n              style={{\n                padding: '16px',\n              }}\n            >\n              <div>\n                This content is under the drawer so that you still can interact\n                with it.\n              </div>\n              <p>{count}</p>\n              <p>\n                <Button\n                  onClick={() => {\n                    setCount(count + 1)\n                  }}\n                  variant={'secondary'}\n                >\n                  Count\n                </Button>\n              </p>\n            </div>\n          }\n          onCollapsed={handleCollapsed}\n          onExpanded={handleExpanded}\n          style={{\n            flex: '1',\n            border: '1px solid rgba(0,0,0,0.1)',\n          }}\n        >\n          <div style={{height: '800px', padding: '16px'}}>\n            <p>Drawer content</p>\n            <Button onClick={() => setExpanded(!expanded)}>\n              {expanded ? 'Collapse' : 'Expand'}\n            </Button>\n          </div>\n        </NaturalDrawer>\n      </div>\n    </div>\n  )\n}\n"},"AccessibleBackgroundFullScreen.tsx":{module:"./AccessibleBackgroundFullScreen.tsx",raw:"import {Button, Layout, NaturalDrawer} from '@comfortdelgro/react-compass'\nimport {useCallback, useState} from 'react'\n\nexport default function DrawerDocs() {\n  const [isShow, setIsShow] = useState<boolean>(false)\n  const [expanded, setExpanded] = useState<boolean>(false)\n  const [count, setCount] = useState<number>(0)\n\n  const handleCollapsed = useCallback(() => {\n    setExpanded(false)\n  }, [])\n\n  const handleExpanded = useCallback(() => {\n    setExpanded(true)\n  }, [])\n\n  return (\n    <div\n      style={{\n        overflow: 'auto',\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <Button onClick={() => setIsShow(true)}>Open</Button>\n      {isShow && (\n        <>\n          <NaturalDrawer\n            expanded={expanded}\n            header={\n              <NaturalDrawer.Header\n                onClick={() => setExpanded(!expanded)}\n                useDrag\n              ></NaturalDrawer.Header>\n            }\n            fixedContent={\n              <Layout\n                direction='row'\n                style={{\n                  width: '100%',\n                  height: '100%',\n                  padding: '16px',\n                }}\n              >\n                <Layout flex='1'>\n                  <div>\n                    This content is under the drawer so that you still can\n                    interact with it.\n                  </div>\n                  <p>{count}</p>\n                  <p>\n                    <Button\n                      variant='secondary'\n                      onClick={() => {\n                        setCount(count + 1)\n                      }}\n                    >\n                      Count\n                    </Button>\n                  </p>\n                </Layout>\n                <p>\n                  <Button onClick={() => setIsShow(false)}>\n                    Exit Full Screen\n                  </Button>\n                </p>\n              </Layout>\n            }\n            onCollapsed={handleCollapsed}\n            onExpanded={handleExpanded}\n            style={{\n              flex: '1',\n              backgroundColor: '#ffffff',\n            }}\n          >\n            <div style={{height: '100dvh', padding: '0 16px'}}>\n              <Layout direction='row'>\n                <Layout flex='1'>Drawer content</Layout>\n                <Layout>\n                  <Button\n                    onClick={() => setExpanded(!expanded)}\n                    variant='secondary'\n                  >\n                    {expanded ? 'Collapse' : 'Expand'}\n                  </Button>\n                </Layout>\n              </Layout>\n            </div>\n          </NaturalDrawer>\n        </>\n      )}\n    </div>\n  )\n}\n",jsxPreview:"import {Button, Layout, NaturalDrawer} from '@comfortdelgro/react-compass'\nimport {useCallback, useState} from 'react'\n\nexport default function DrawerDocs() {\n  const [isShow, setIsShow] = useState<boolean>(false)\n  const [expanded, setExpanded] = useState<boolean>(false)\n  const [count, setCount] = useState<number>(0)\n\n  const handleCollapsed = useCallback(() => {\n    setExpanded(false)\n  }, [])\n\n  const handleExpanded = useCallback(() => {\n    setExpanded(true)\n  }, [])\n\n  return (\n    <div\n      style={{\n        overflow: 'auto',\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <Button onClick={() => setIsShow(true)}>Open</Button>\n      {isShow && (\n        <>\n          <NaturalDrawer\n            expanded={expanded}\n            header={\n              <NaturalDrawer.Header\n                onClick={() => setExpanded(!expanded)}\n                useDrag\n              ></NaturalDrawer.Header>\n            }\n            fixedContent={\n              <Layout\n                direction='row'\n                style={{\n                  width: '100%',\n                  height: '100%',\n                  padding: '16px',\n                }}\n              >\n                <Layout flex='1'>\n                  <div>\n                    This content is under the drawer so that you still can\n                    interact with it.\n                  </div>\n                  <p>{count}</p>\n                  <p>\n                    <Button\n                      variant='secondary'\n                      onClick={() => {\n                        setCount(count + 1)\n                      }}\n                    >\n                      Count\n                    </Button>\n                  </p>\n                </Layout>\n                <p>\n                  <Button onClick={() => setIsShow(false)}>\n                    Exit Full Screen\n                  </Button>\n                </p>\n              </Layout>\n            }\n            onCollapsed={handleCollapsed}\n            onExpanded={handleExpanded}\n            style={{\n              flex: '1',\n              backgroundColor: '#ffffff',\n            }}\n          >\n            <div style={{height: '100dvh', padding: '0 16px'}}>\n              <Layout direction='row'>\n                <Layout flex='1'>Drawer content</Layout>\n                <Layout>\n                  <Button\n                    onClick={() => setExpanded(!expanded)}\n                    variant='secondary'\n                  >\n                    {expanded ? 'Collapse' : 'Expand'}\n                  </Button>\n                </Layout>\n              </Layout>\n            </div>\n          </NaturalDrawer>\n        </>\n      )}\n    </div>\n  )\n}\n",moduleTS:"./AccessibleBackgroundFullScreen.tsx",rawTS:"import {Button, Layout, NaturalDrawer} from '@comfortdelgro/react-compass'\nimport {useCallback, useState} from 'react'\n\nexport default function DrawerDocs() {\n  const [isShow, setIsShow] = useState<boolean>(false)\n  const [expanded, setExpanded] = useState<boolean>(false)\n  const [count, setCount] = useState<number>(0)\n\n  const handleCollapsed = useCallback(() => {\n    setExpanded(false)\n  }, [])\n\n  const handleExpanded = useCallback(() => {\n    setExpanded(true)\n  }, [])\n\n  return (\n    <div\n      style={{\n        overflow: 'auto',\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <Button onClick={() => setIsShow(true)}>Open</Button>\n      {isShow && (\n        <>\n          <NaturalDrawer\n            expanded={expanded}\n            header={\n              <NaturalDrawer.Header\n                onClick={() => setExpanded(!expanded)}\n                useDrag\n              ></NaturalDrawer.Header>\n            }\n            fixedContent={\n              <Layout\n                direction='row'\n                style={{\n                  width: '100%',\n                  height: '100%',\n                  padding: '16px',\n                }}\n              >\n                <Layout flex='1'>\n                  <div>\n                    This content is under the drawer so that you still can\n                    interact with it.\n                  </div>\n                  <p>{count}</p>\n                  <p>\n                    <Button\n                      variant='secondary'\n                      onClick={() => {\n                        setCount(count + 1)\n                      }}\n                    >\n                      Count\n                    </Button>\n                  </p>\n                </Layout>\n                <p>\n                  <Button onClick={() => setIsShow(false)}>\n                    Exit Full Screen\n                  </Button>\n                </p>\n              </Layout>\n            }\n            onCollapsed={handleCollapsed}\n            onExpanded={handleExpanded}\n            style={{\n              flex: '1',\n              backgroundColor: '#ffffff',\n            }}\n          >\n            <div style={{height: '100dvh', padding: '0 16px'}}>\n              <Layout direction='row'>\n                <Layout flex='1'>Drawer content</Layout>\n                <Layout>\n                  <Button\n                    onClick={() => setExpanded(!expanded)}\n                    variant='secondary'\n                  >\n                    {expanded ? 'Collapse' : 'Expand'}\n                  </Button>\n                </Layout>\n              </Layout>\n            </div>\n          </NaturalDrawer>\n        </>\n      )}\n    </div>\n  )\n}\n"},"BottomSheet.tsx":{module:"./BottomSheet.tsx",raw:"import {Button, NaturalDrawer} from '@comfortdelgro/react-compass'\nimport {useCallback, useState} from 'react'\n\nexport default function DrawerDocs() {\n  const [open, setOpen] = useState<boolean>(false)\n  const [expanded, setExpanded] = useState<boolean>(false)\n\n  const handlePullDown = useCallback(() => {\n    setOpen(false)\n  }, [])\n\n  const handleCollapsed = useCallback(() => {\n    setExpanded(false)\n  }, [])\n\n  const handleExpanded = useCallback(() => {\n    setExpanded(true)\n  }, [])\n\n  return (\n    <div\n      style={{\n        overflow: 'auto',\n        display: 'flex',\n        flexDirection: 'column',\n        height: '600px',\n        maxWidth: '680px',\n        border: '1px solid rgba(0,0,0,0.1)',\n        margin: '0 auto',\n        padding: '0',\n      }}\n    >\n      <div style={{padding: '40px'}}>\n        <Button onClick={() => setOpen(true)}>Open drawer</Button>\n      </div>\n      {open && (\n        <NaturalDrawer\n          type={'bottomSheet'}\n          expanded={expanded}\n          fullscreen={false}\n          visibleHeight={180}\n          onCollapsed={handleCollapsed}\n          onExpanded={handleExpanded}\n          onReachBottom={handlePullDown}\n        >\n          <div style={{padding: '0 16px'}}>\n            <p>Bottom sheet content</p>\n            <Button onClick={() => setExpanded(false)}>Close</Button>\n            <div style={{height: '200px'}}></div>\n          </div>\n        </NaturalDrawer>\n      )}\n    </div>\n  )\n}\n",jsxPreview:"import {Button, NaturalDrawer} from '@comfortdelgro/react-compass'\nimport {useCallback, useState} from 'react'\n\nexport default function DrawerDocs() {\n  const [open, setOpen] = useState<boolean>(false)\n  const [expanded, setExpanded] = useState<boolean>(false)\n\n  const handlePullDown = useCallback(() => {\n    setOpen(false)\n  }, [])\n\n  const handleCollapsed = useCallback(() => {\n    setExpanded(false)\n  }, [])\n\n  const handleExpanded = useCallback(() => {\n    setExpanded(true)\n  }, [])\n\n  return (\n    <div\n      style={{\n        overflow: 'auto',\n        display: 'flex',\n        flexDirection: 'column',\n        height: '600px',\n        maxWidth: '680px',\n        border: '1px solid rgba(0,0,0,0.1)',\n        margin: '0 auto',\n        padding: '0',\n      }}\n    >\n      <div style={{padding: '40px'}}>\n        <Button onClick={() => setOpen(true)}>Open drawer</Button>\n      </div>\n      {open && (\n        <NaturalDrawer\n          type={'bottomSheet'}\n          expanded={expanded}\n          fullscreen={false}\n          visibleHeight={180}\n          onCollapsed={handleCollapsed}\n          onExpanded={handleExpanded}\n          onReachBottom={handlePullDown}\n        >\n          <div style={{padding: '0 16px'}}>\n            <p>Bottom sheet content</p>\n            <Button onClick={() => setExpanded(false)}>Close</Button>\n            <div style={{height: '200px'}}></div>\n          </div>\n        </NaturalDrawer>\n      )}\n    </div>\n  )\n}\n",moduleTS:"./BottomSheet.tsx",rawTS:"import {Button, NaturalDrawer} from '@comfortdelgro/react-compass'\nimport {useCallback, useState} from 'react'\n\nexport default function DrawerDocs() {\n  const [open, setOpen] = useState<boolean>(false)\n  const [expanded, setExpanded] = useState<boolean>(false)\n\n  const handlePullDown = useCallback(() => {\n    setOpen(false)\n  }, [])\n\n  const handleCollapsed = useCallback(() => {\n    setExpanded(false)\n  }, [])\n\n  const handleExpanded = useCallback(() => {\n    setExpanded(true)\n  }, [])\n\n  return (\n    <div\n      style={{\n        overflow: 'auto',\n        display: 'flex',\n        flexDirection: 'column',\n        height: '600px',\n        maxWidth: '680px',\n        border: '1px solid rgba(0,0,0,0.1)',\n        margin: '0 auto',\n        padding: '0',\n      }}\n    >\n      <div style={{padding: '40px'}}>\n        <Button onClick={() => setOpen(true)}>Open drawer</Button>\n      </div>\n      {open && (\n        <NaturalDrawer\n          type={'bottomSheet'}\n          expanded={expanded}\n          fullscreen={false}\n          visibleHeight={180}\n          onCollapsed={handleCollapsed}\n          onExpanded={handleExpanded}\n          onReachBottom={handlePullDown}\n        >\n          <div style={{padding: '0 16px'}}>\n            <p>Bottom sheet content</p>\n            <Button onClick={() => setExpanded(false)}>Close</Button>\n            <div style={{height: '200px'}}></div>\n          </div>\n        </NaturalDrawer>\n      )}\n    </div>\n  )\n}\n"},"BottomSheetFullScreen.tsx":{module:"./BottomSheetFullScreen.tsx",raw:"import {Button, NaturalDrawer} from '@comfortdelgro/react-compass'\nimport {useCallback, useState} from 'react'\n\nexport default function DrawerDocs() {\n  const [open, setOpen] = useState<boolean>(false)\n  const [expanded, setExpanded] = useState<boolean>(false)\n\n  const handlePullDown = useCallback(() => {\n    setOpen(false)\n  }, [])\n\n  const handleCollapsed = useCallback(() => {\n    setExpanded(false)\n  }, [])\n\n  const handleExpanded = useCallback(() => {\n    setExpanded(true)\n  }, [])\n\n  return (\n    <div\n      style={{\n        overflow: 'auto',\n        display: 'flex',\n        flexDirection: 'column',\n        height: '600px',\n        padding: '0',\n      }}\n    >\n      <div style={{padding: '40px'}}>\n        <Button onClick={() => setOpen(true)}>Open drawer</Button>\n      </div>\n      {open && (\n        <NaturalDrawer\n          type={'bottomSheet'}\n          expanded={expanded}\n          visibleHeight={330}\n          onCollapsed={handleCollapsed}\n          onExpanded={handleExpanded}\n          onReachBottom={handlePullDown}\n        >\n          <div style={{padding: '0 16px'}}>\n            <p>Bottom sheet content</p>\n            <Button onClick={() => setExpanded(false)}>Close</Button>\n            <div style={{height: '400px'}}></div>\n          </div>\n        </NaturalDrawer>\n      )}\n    </div>\n  )\n}\n",jsxPreview:"import {Button, NaturalDrawer} from '@comfortdelgro/react-compass'\nimport {useCallback, useState} from 'react'\n\nexport default function DrawerDocs() {\n  const [open, setOpen] = useState<boolean>(false)\n  const [expanded, setExpanded] = useState<boolean>(false)\n\n  const handlePullDown = useCallback(() => {\n    setOpen(false)\n  }, [])\n\n  const handleCollapsed = useCallback(() => {\n    setExpanded(false)\n  }, [])\n\n  const handleExpanded = useCallback(() => {\n    setExpanded(true)\n  }, [])\n\n  return (\n    <div\n      style={{\n        overflow: 'auto',\n        display: 'flex',\n        flexDirection: 'column',\n        height: '600px',\n        padding: '0',\n      }}\n    >\n      <div style={{padding: '40px'}}>\n        <Button onClick={() => setOpen(true)}>Open drawer</Button>\n      </div>\n      {open && (\n        <NaturalDrawer\n          type={'bottomSheet'}\n          expanded={expanded}\n          visibleHeight={330}\n          onCollapsed={handleCollapsed}\n          onExpanded={handleExpanded}\n          onReachBottom={handlePullDown}\n        >\n          <div style={{padding: '0 16px'}}>\n            <p>Bottom sheet content</p>\n            <Button onClick={() => setExpanded(false)}>Close</Button>\n            <div style={{height: '400px'}}></div>\n          </div>\n        </NaturalDrawer>\n      )}\n    </div>\n  )\n}\n",moduleTS:"./BottomSheetFullScreen.tsx",rawTS:"import {Button, NaturalDrawer} from '@comfortdelgro/react-compass'\nimport {useCallback, useState} from 'react'\n\nexport default function DrawerDocs() {\n  const [open, setOpen] = useState<boolean>(false)\n  const [expanded, setExpanded] = useState<boolean>(false)\n\n  const handlePullDown = useCallback(() => {\n    setOpen(false)\n  }, [])\n\n  const handleCollapsed = useCallback(() => {\n    setExpanded(false)\n  }, [])\n\n  const handleExpanded = useCallback(() => {\n    setExpanded(true)\n  }, [])\n\n  return (\n    <div\n      style={{\n        overflow: 'auto',\n        display: 'flex',\n        flexDirection: 'column',\n        height: '600px',\n        padding: '0',\n      }}\n    >\n      <div style={{padding: '40px'}}>\n        <Button onClick={() => setOpen(true)}>Open drawer</Button>\n      </div>\n      {open && (\n        <NaturalDrawer\n          type={'bottomSheet'}\n          expanded={expanded}\n          visibleHeight={330}\n          onCollapsed={handleCollapsed}\n          onExpanded={handleExpanded}\n          onReachBottom={handlePullDown}\n        >\n          <div style={{padding: '0 16px'}}>\n            <p>Bottom sheet content</p>\n            <Button onClick={() => setExpanded(false)}>Close</Button>\n            <div style={{height: '400px'}}></div>\n          </div>\n        </NaturalDrawer>\n      )}\n    </div>\n  )\n}\n"}};b.scope={process:{},import:{"@comfortdelgro/react-compass":f,react:m}};var D={"./NaturalDrawer.tsx":function(){var n=(0,w.useState)(!1),e=n[0],t=n[1],l=(0,w.useState)(0),o=l[0],d=l[1],r=(0,w.useCallback)(function(n){d(n.target.scrollTop)},[]),s=(0,w.useCallback)(function(){t(!1)},[]),i=(0,w.useCallback)(function(){t(!0)},[]);return(0,g.jsx)("div",{style:{maxWidth:"680px",margin:"0 auto"},children:(0,g.jsxs)("div",{style:{position:"relative",overflow:"auto",display:"flex",flexDirection:"column",height:"600px"},children:[a||(a=(0,g.jsx)("h4",{children:"Drawer"})),(0,g.jsxs)("p",{children:["Scrolled: ",o]}),(0,g.jsx)(f.NaturalDrawer,{expanded:e,fullscreen:!1,header:(0,g.jsx)(f.NaturalDrawer.Header,{onClick:function(){return t(!e)},useDrag:!0}),drawerScroll:r,onCollapsed:s,onExpanded:i,style:{flex:"1",maxHeight:"500px",border:"1px solid rgba(0,0,0,0.1)"},children:(0,g.jsx)("div",{style:{height:"800px",padding:"0 16px"},children:"Drawer content"})})]})})},"./NaturalDrawerFullScreen.tsx":function(){var n=(0,w.useState)(!1),e=n[0],t=n[1],a=(0,w.useState)(!1),d=a[0],r=a[1],s=(0,w.useState)(0),i=s[0],c=s[1],u=(0,w.useCallback)(function(n){c(n.target.scrollTop)},[]),p=(0,w.useCallback)(function(){r(!1)},[]),x=(0,w.useCallback)(function(){r(!0)},[]);return(0,g.jsxs)("div",{style:{overflow:"auto",display:"flex",flexDirection:"column"},children:[(0,g.jsx)(f.Button,{onClick:function(){return t(!0)},children:"Open"}),e&&(0,g.jsxs)(g.Fragment,{children:[l||(l=(0,g.jsx)("h4",{children:"Drawer"})),(0,g.jsxs)("p",{children:["Scrolled: ",i]}),(0,g.jsx)(f.NaturalDrawer,{expanded:d,header:(0,g.jsx)(f.NaturalDrawer.Header,{onClick:function(){return r(!d)},useDrag:!0}),drawerScroll:u,onCollapsed:p,onExpanded:x,style:{flex:"1"},children:(0,g.jsxs)("div",{style:{height:"800px",padding:"0 16px"},children:[o||(o=(0,g.jsx)("p",{children:"Drawer content"})),(0,g.jsx)(f.Button,{onClick:function(){return t(!1)},children:"Close"})]})})]})]})},"./AccessibleBackground.tsx":function(){var n=(0,w.useState)(!1),e=n[0],t=n[1],a=(0,w.useState)(0),l=a[0],o=a[1],s=(0,w.useCallback)(function(){t(!1)},[]),i=(0,w.useCallback)(function(){t(!0)},[]);return(0,g.jsx)("div",{style:{padding:"20px",maxWidth:"680px",margin:"0 auto"},children:(0,g.jsx)("div",{style:{position:"relative",overflow:"auto",display:"flex",flexDirection:"column",height:"600px"},children:(0,g.jsx)(f.NaturalDrawer,{expanded:e,fullscreen:!1,fixedContent:(0,g.jsxs)("div",{style:{padding:"16px"},children:[d||(d=(0,g.jsx)("div",{children:"This content is under the drawer so that you still can interact with it."})),(0,g.jsx)("p",{children:l}),(0,g.jsx)("p",{children:(0,g.jsx)(f.Button,{onClick:function(){o(l+1)},variant:"secondary",children:"Count"})})]}),onCollapsed:s,onExpanded:i,style:{flex:"1",border:"1px solid rgba(0,0,0,0.1)"},children:(0,g.jsxs)("div",{style:{height:"800px",padding:"16px"},children:[r||(r=(0,g.jsx)("p",{children:"Drawer content"})),(0,g.jsx)(f.Button,{onClick:function(){return t(!e)},children:e?"Collapse":"Expand"})]})})})})},"./AccessibleBackgroundFullScreen.tsx":function(){var n=(0,w.useState)(!1),e=n[0],t=n[1],a=(0,w.useState)(!1),l=a[0],o=a[1],d=(0,w.useState)(0),r=d[0],c=d[1],u=(0,w.useCallback)(function(){o(!1)},[]),p=(0,w.useCallback)(function(){o(!0)},[]);return(0,g.jsxs)("div",{style:{overflow:"auto",display:"flex",flexDirection:"column"},children:[(0,g.jsx)(f.Button,{onClick:function(){return t(!0)},children:"Open"}),e&&(0,g.jsx)(g.Fragment,{children:(0,g.jsx)(f.NaturalDrawer,{expanded:l,header:(0,g.jsx)(f.NaturalDrawer.Header,{onClick:function(){return o(!l)},useDrag:!0}),fixedContent:(0,g.jsxs)(f.Layout,{direction:"row",style:{width:"100%",height:"100%",padding:"16px"},children:[(0,g.jsxs)(f.Layout,{flex:"1",children:[s||(s=(0,g.jsx)("div",{children:"This content is under the drawer so that you still can interact with it."})),(0,g.jsx)("p",{children:r}),(0,g.jsx)("p",{children:(0,g.jsx)(f.Button,{variant:"secondary",onClick:function(){c(r+1)},children:"Count"})})]}),(0,g.jsx)("p",{children:(0,g.jsx)(f.Button,{onClick:function(){return t(!1)},children:"Exit Full Screen"})})]}),onCollapsed:u,onExpanded:p,style:{flex:"1",backgroundColor:"#ffffff"},children:(0,g.jsx)("div",{style:{height:"100dvh",padding:"0 16px"},children:(0,g.jsxs)(f.Layout,{direction:"row",children:[i||(i=(0,g.jsx)(f.Layout,{flex:"1",children:"Drawer content"})),(0,g.jsx)(f.Layout,{children:(0,g.jsx)(f.Button,{onClick:function(){return o(!l)},variant:"secondary",children:l?"Collapse":"Expand"})})]})})})})]})},"./BottomSheet.tsx":function(){var n=(0,w.useState)(!1),e=n[0],t=n[1],a=(0,w.useState)(!1),l=a[0],o=a[1],d=(0,w.useCallback)(function(){t(!1)},[]),r=(0,w.useCallback)(function(){o(!1)},[]),s=(0,w.useCallback)(function(){o(!0)},[]);return(0,g.jsxs)("div",{style:{overflow:"auto",display:"flex",flexDirection:"column",height:"600px",maxWidth:"680px",border:"1px solid rgba(0,0,0,0.1)",margin:"0 auto",padding:"0"},children:[(0,g.jsx)("div",{style:{padding:"40px"},children:(0,g.jsx)(f.Button,{onClick:function(){return t(!0)},children:"Open drawer"})}),e&&(0,g.jsx)(f.NaturalDrawer,{type:"bottomSheet",expanded:l,fullscreen:!1,visibleHeight:180,onCollapsed:r,onExpanded:s,onReachBottom:d,children:(0,g.jsxs)("div",{style:{padding:"0 16px"},children:[c||(c=(0,g.jsx)("p",{children:"Bottom sheet content"})),(0,g.jsx)(f.Button,{onClick:function(){return o(!1)},children:"Close"}),(0,g.jsx)("div",{style:{height:"200px"}})]})})]})},"./BottomSheetFullScreen.tsx":function(){var n=(0,w.useState)(!1),e=n[0],t=n[1],a=(0,w.useState)(!1),l=a[0],o=a[1],d=(0,w.useCallback)(function(){t(!1)},[]),r=(0,w.useCallback)(function(){o(!1)},[]),s=(0,w.useCallback)(function(){o(!0)},[]);return(0,g.jsxs)("div",{style:{overflow:"auto",display:"flex",flexDirection:"column",height:"600px",padding:"0"},children:[(0,g.jsx)("div",{style:{padding:"40px"},children:(0,g.jsx)(f.Button,{onClick:function(){return t(!0)},children:"Open drawer"})}),e&&(0,g.jsx)(f.NaturalDrawer,{type:"bottomSheet",expanded:l,visibleHeight:330,onCollapsed:r,onExpanded:s,onReachBottom:d,children:(0,g.jsxs)("div",{style:{padding:"0 16px"},children:[u||(u=(0,g.jsx)("p",{children:"Bottom sheet content"})),(0,g.jsx)(f.Button,{onClick:function(){return o(!1)},children:"Close"}),(0,g.jsx)("div",{style:{height:"400px"}})]})})]})}},y={"components/common/ComponentLinkHeader.tsx":v.Z};function k(){return(0,g.jsx)(h.Z,(0,x.Z)({},p))}},94101:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/natural-drawer",function(){return t(47893)}])}},function(n){n.O(0,[4308,9813,5675,3866,9774,2888,179],function(){return n(n.s=94101)}),_N_E=n.O()}]);