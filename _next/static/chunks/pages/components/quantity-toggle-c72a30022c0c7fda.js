(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8380],{70052:function(t,n,e){"use strict";e.d(n,{Z:function(){return s}});var l,o,a=e(15393),r=e(16371),i=e.n(r),d=e(31549);function s(){return(0,d.jsxs)(a.Flexbox,{style:{marginBottom:"var(--cdg-spacing-4)"},children:[(0,d.jsx)(i(),{href:"https://github.com/comfortdelgro/compass-design",target:"_blank",style:{textDecoration:"none"},children:l||(l=(0,d.jsx)(a.Badge,{label:"Github",color:"info",variant:"outline"}))}),(0,d.jsx)(i(),{href:"https://www.figma.com/file/JSiK3cmMmxTt8qhR3dty8t/Workbench-Design-System?type=design&node-id=502-54719&mode=design&t=a4SJbARIttEHmcZS-0",target:"_blank",style:{textDecoration:"none"},children:o||(o=(0,d.jsx)(a.Badge,{label:"Figma",color:"danger",variant:"outline"}))})]})}},41228:function(t,n,e){"use strict";e.r(n),e.d(n,{default:function(){return m}});var l,o={};e.r(o),e.d(o,{demoComponents:function(){return f},demos:function(){return p},docs:function(){return g},srcComponents:function(){return h}});var a=e(26098),r=e(24437),i=e(15393),d=e(44194),s=e.t(d,2),c=e(31549),u=e(70052),g={description:"Quantity Toggle fields allow users to enter a number, and increment or decrement the value using stepper buttons.",location:"/docs/data/components/quantity-toggle/quantity-toggle.md",rendered:['\n      <svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="copied-icon" viewBox="0 0 24 24">\n        <path d="M20 2H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-8.24 11.28L9.69 11.2c-.38-.39-.38-1.01 0-1.4.39-.39 1.02-.39 1.41 0l1.36 1.37 4.42-4.46c.39-.39 1.02-.39 1.41 0 .38.39.38 1.01 0 1.4l-5.13 5.17c-.37.4-1.01.4-1.4 0zM3 6c-.55 0-1 .45-1 1v13c0 1.1.9 2 2 2h13c.55 0 1-.45 1-1s-.45-1-1-1H5c-.55 0-1-.45-1-1V7c0-.55-.45-1-1-1z" />\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="copy-icon" viewBox="0 0 24 24">\n      <path d="M15 20H5V7c0-.55-.45-1-1-1s-1 .45-1 1v13c0 1.1.9 2 2 2h10c.55 0 1-.45 1-1s-.45-1-1-1zm5-4V4c0-1.1-.9-2-2-2H9c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h9c1.1 0 2-.9 2-2zm-2 0H9V4h9v12z" />\n      +</symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n    <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n      <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n    </symbol>\n    </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="comment-link-icon" viewBox="0 0 24 24">\n        <path d="M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM6 14v-2.47l6.88-6.88c.2-.2.51-.2.71 0l1.77 1.77c.2.2.2.51 0 .71L8.47 14H6zm12 0h-7.5l2-2H18v2z" />\n      </symbol>\n      </svg>','<h1>Quantity Toggle</h1><p class="description">Quantity Toggle fields allow users to enter a number, and increment or decrement the value using stepper buttons.</p>\n\n',{component:"components/ComponentLinkHeader.tsx"},'<div class="cdg-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span>QuantityToggle<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@comfortdelgro/react-compass\'</span>\n</code></pre><button aria-label="Copy the code" class="cdg-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24"><use class="cdg-copy-icon" xlink:href="#copy-icon" /><use class="cdg-copied-icon" xlink:href="#copied-icon" /></svg><span class="cdg-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h2 id="support">Support<a aria-labelledby="support" class="anchor-link" href="#support" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Support for internationalized number formatting and parsing including decimals, percentages, currency values, and units</p>\n<p>Automatically detects the numbering system used and supports parsing numbers not in the default numbering system for the locale</p>\n<p>Support for multiple currency formats including symbol, code, and name in standard or accounting notation</p>\n<p>Validates keyboard entry as the user types so that only valid numeric input according to the locale and numbering system is accepted</p>\n<p>Handles composed input from input method editors, e.g. Pinyin</p>\n<p>Automatically selects an appropriate software keyboard for mobile according to the current platform and allowed values</p>\n<p>Supports rounding to a configurable number of fraction digits</p>\n<p>Support for clamping the value between a configurable minimum and maximum, and snapping to a step value</p>\n<p>Support for stepper buttons and arrow keys to increment and decrement the value according to the step value</p>\n<p>Supports pressing and holding the stepper buttons to continuously increment or decrement</p>\n<p>Handles floating point rounding errors when incrementing, decrementing, and snapping to step</p>\n<p>Supports using the scroll wheel to increment and decrement the value</p>\n<p>Exposed to assistive technology as a text field with a custom localized role description using ARIA</p>\n<p>Follows the spinbutton ARIA pattern</p>\n<p>Works around bugs in VoiceOver with the spinbutton role</p>\n<h2 id="example">Example<a aria-labelledby="example" class="anchor-link" href="#example" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><h3 id="controlled">Controlled<a aria-labelledby="controlled" class="anchor-link" href="#controlled" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3>',{demo:"QuantityToggleControlled.tsx"},'<h3 id="custom-quantity-toggle">Custom Quantity Toggle<a aria-labelledby="custom-quantity-toggle" class="anchor-link" href="#custom-quantity-toggle" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3>',{demo:"QuantityToggleUnControlled.tsx"},'<h3 id="unit-quantity-toggle">Unit Quantity Toggle<a aria-labelledby="unit-quantity-toggle" class="anchor-link" href="#unit-quantity-toggle" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3>',{demo:"QuantityToggleUnit.tsx"},'<h2 id="props">Props<a aria-labelledby="props" class="anchor-link" href="#props" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Type</th>\n<th align="left">Default</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left">step</td>\n<td align="left"><code>number</code></td>\n<td align="left">—</td>\n<td align="left">The amount that the input value changes with each increment or decrement &quot;tick&quot;.</td>\n</tr>\n<tr>\n<td align="left">label</td>\n<td align="left"><code>ReactNode</code></td>\n<td align="left">—</td>\n<td align="left">The content to display as the label.</td>\n</tr>\n<tr>\n<td align="left">value</td>\n<td align="left"><code>number</code></td>\n<td align="left">—</td>\n<td align="left">The current value (controlled).</td>\n</tr>\n<tr>\n<td align="left">minValue</td>\n<td align="left"><code>number</code></td>\n<td align="left">—</td>\n<td align="left">The smallest value allowed for the input.</td>\n</tr>\n<tr>\n<td align="left">maxValue</td>\n<td align="left"><code>number</code></td>\n<td align="left">—</td>\n<td align="left">The largest value allowed for the input.</td>\n</tr>\n<tr>\n<td align="left">autoFocus</td>\n<td align="left"><code>boolean</code></td>\n<td align="left">—</td>\n<td align="left">Whether the element should receive focus on render.</td>\n</tr>\n<tr>\n<td align="left">isErrored</td>\n<td align="left"><code>boolean</code></td>\n<td align="left">false</td>\n<td align="left">Whether the input is isErrored.</td>\n</tr>\n<tr>\n<td align="left">isDisabled</td>\n<td align="left"><code>boolean</code></td>\n<td align="left">false</td>\n<td align="left">Whether the input is disabled.</td>\n</tr>\n<tr>\n<td align="left">isReadOnly</td>\n<td align="left"><code>boolean</code></td>\n<td align="left">false</td>\n<td align="left">Whether the input can be selected but not changed by the user.</td>\n</tr>\n<tr>\n<td align="left">isRequired</td>\n<td align="left"><code>boolean</code></td>\n<td align="left">false</td>\n<td align="left">Whether user input is required on the input before form submission. Often paired with the necessityIndicator prop to add a visual indicator to the input.</td>\n</tr>\n<tr>\n<td align="left">helperText</td>\n<td align="left"><code>string</code></td>\n<td align="left">—</td>\n<td align="left">The helper text below.</td>\n</tr>\n<tr>\n<td align="left">placeholder</td>\n<td align="left"><code>string</code></td>\n<td align="left">—</td>\n<td align="left">Temporary text that occupies the text input when it is empty.</td>\n</tr>\n<tr>\n<td align="left">defaultValue</td>\n<td align="left"><code>number</code></td>\n<td align="left">—</td>\n<td align="left">The default value (uncontrolled).</td>\n</tr>\n<tr>\n<td align="left">formatOptions</td>\n<td align="left"><code>Intl.FormatOptions</code></td>\n<td align="left">—</td>\n<td align="left">Formatting options for the value displayed in the number field. This also affects what characters are allowed to be typed by the user.</td>\n</tr>\n<tr>\n<td align="left">disabledScroll</td>\n<td align="left"><code>boolean</code></td>\n<td align="left">true</td>\n<td align="left">Whether the scroll to change value is disabled.</td>\n</tr>\n<tr>\n<td align="left">validationState</td>\n<td align="left"><code>ValidationState</code></td>\n<td align="left">—</td>\n<td align="left">Whether the input should display its &quot;valid&quot; or &quot;invalid&quot; visual styling.</td>\n</tr>\n<tr>\n<td align="left">onBlur</td>\n<td align="left"><code>(e: FocusEvent) =&gt; void</code></td>\n<td align="left">—</td>\n<td align="left">Handler that is called when the element loses focus.</td>\n</tr>\n<tr>\n<td align="left">onFocus</td>\n<td align="left"><code>(e: FocusEvent) =&gt; void</code></td>\n<td align="left">—</td>\n<td align="left">Handler that is called when the element receives focus.</td>\n</tr>\n<tr>\n<td align="left">onKeyUp</td>\n<td align="left"><code>(e: FocusEvent) =&gt; void</code></td>\n<td align="left">—</td>\n<td align="left">Handler that is called when a key is released.</td>\n</tr>\n<tr>\n<td align="left">onChange</td>\n<td align="left"><code>(value: T) =&gt; void</code></td>\n<td align="left">—</td>\n<td align="left">Handler that is called when the value changes.</td>\n</tr>\n<tr>\n<td align="left">onKeyDown</td>\n<td align="left"><code>(e: FocusEvent) =&gt; void</code></td>\n<td align="left">—</td>\n<td align="left">Handler that is called when a key is pressed.</td>\n</tr>\n<tr>\n<td align="left">onFocusChange</td>\n<td align="left"><code>(isFocused: boolean) =&gt; void</code></td>\n<td align="left">—</td>\n<td align="left">Handler that is called when the element&#39;s focus status changes.</td>\n</tr>\n<tr>\n<td align="left">onUpdate</td>\n<td align="left"><code>(textVal: T, numberVal: number) =&gt; void</code></td>\n<td align="left">—</td>\n<td align="left">Handler that is called when the value changes, returned text value and number value</td>\n</tr>\n<tr>\n<td align="left">css</td>\n<td align="left"><code>CSS</code></td>\n<td align="left">—</td>\n<td align="left">The system prop that allows defining system overrides as well as additional CSS styles.</td>\n</tr>\n</tbody></table>\n'],toc:[{text:"Support",level:2,hash:"support",children:[]},{text:"Example",level:2,hash:"example",children:[{text:"Controlled",level:3,hash:"controlled"},{text:"Custom Quantity Toggle",level:3,hash:"custom-quantity-toggle"},{text:"Unit Quantity Toggle",level:3,hash:"unit-quantity-toggle"}]},{text:"Props",level:2,hash:"props",children:[]}],title:"React Quantity Toggle component",headers:{title:"React Quantity Toggle component",components:["QuantityToggle"],hooks:[]}},p={"QuantityToggleControlled.tsx":{module:"./QuantityToggleControlled.tsx",raw:"import {QuantityToggle} from '@comfortdelgro/react-compass'\nimport {useState} from 'react'\n\nfunction QuantityToggleControlled() {\n  const [value, setValue] = useState(0)\n  return (\n    <QuantityToggle\n      placeholder='Price'\n      label='Potato Price'\n      value={value}\n      onChange={(e) => setValue(e)}\n      formatOptions={{\n        style: 'currency',\n        currency: 'USD',\n      }}\n      onUpdate={(value, number) => {\n        console.log('onUpdate value', value)\n        console.log('onUpdate number', number)\n      }}\n    />\n  )\n}\n\nexport default QuantityToggleControlled\n",jsxPreview:"<QuantityToggle\r\n    placeholder='Price'\r\n    label='Potato Price'\r\n    value={value}\r\n    onChange={(e) => setValue(e)}\r\n    formatOptions={{\r\n    style: 'currency',\r\n    currency: 'USD',\r\n    }}\r\n    onUpdate={(value, number) => {\r\n    console.log('onUpdate value', value)\r\n    console.log('onUpdate number', number)\r\n    }}\r\n/>",moduleTS:"./QuantityToggleControlled.tsx",rawTS:"import {QuantityToggle} from '@comfortdelgro/react-compass'\nimport {useState} from 'react'\n\nfunction QuantityToggleControlled() {\n  const [value, setValue] = useState(0)\n  return (\n    <QuantityToggle\n      placeholder='Price'\n      label='Potato Price'\n      value={value}\n      onChange={(e) => setValue(e)}\n      formatOptions={{\n        style: 'currency',\n        currency: 'USD',\n      }}\n      onUpdate={(value, number) => {\n        console.log('onUpdate value', value)\n        console.log('onUpdate number', number)\n      }}\n    />\n  )\n}\n\nexport default QuantityToggleControlled\n"},"QuantityToggleUnControlled.tsx":{module:"./QuantityToggleUnControlled.tsx",raw:"import {QuantityToggle} from '@comfortdelgro/react-compass'\n\nfunction QuantityToggleUnControlled() {\n  return (\n    <QuantityToggle\n      label='Step + minValue + maxValue'\n      minValue={2}\n      maxValue={21}\n      step={3}\n    />\n  )\n}\n\nexport default QuantityToggleUnControlled\n",jsxPreview:"<QuantityToggle\r\n    label='Step + minValue + maxValue'\r\n    minValue={2}\r\n    maxValue={21}\r\n    step={3}\r\n/>",moduleTS:"./QuantityToggleUnControlled.tsx",rawTS:"import {QuantityToggle} from '@comfortdelgro/react-compass'\n\nfunction QuantityToggleUnControlled() {\n  return (\n    <QuantityToggle\n      label='Step + minValue + maxValue'\n      minValue={2}\n      maxValue={21}\n      step={3}\n    />\n  )\n}\n\nexport default QuantityToggleUnControlled\n"},"QuantityToggleUnit.tsx":{module:"./QuantityToggleUnit.tsx",raw:"import {QuantityToggle} from '@comfortdelgro/react-compass'\n\nfunction QuantityToggleUnControlled() {\n  return (\n    <QuantityToggle\n      label='Transaction amount'\n      defaultValue={45}\n      formatOptions={{\n        style: 'currency',\n        currency: 'EUR',\n        currencyDisplay: 'code',\n        currencySign: 'accounting',\n      }}\n    />\n  )\n}\n\nexport default QuantityToggleUnControlled\n",jsxPreview:"<QuantityToggle\r\n    label='Transaction amount'\r\n    defaultValue={45}\r\n    formatOptions={{\r\n    style: 'currency',\r\n    currency: 'EUR',\r\n    currencyDisplay: 'code',\r\n    currencySign: 'accounting',\r\n    }}\r\n/>",moduleTS:"./QuantityToggleUnit.tsx",rawTS:"import {QuantityToggle} from '@comfortdelgro/react-compass'\n\nfunction QuantityToggleUnControlled() {\n  return (\n    <QuantityToggle\n      label='Transaction amount'\n      defaultValue={45}\n      formatOptions={{\n        style: 'currency',\n        currency: 'EUR',\n        currencyDisplay: 'code',\n        currencySign: 'accounting',\n      }}\n    />\n  )\n}\n\nexport default QuantityToggleUnControlled\n"}};p.scope={process:{},import:{"@comfortdelgro/react-compass":i,react:s}};var f={"./QuantityToggleControlled.tsx":function(){var t=(0,d.useState)(0),n=t[0],e=t[1];return(0,c.jsx)(i.QuantityToggle,{placeholder:"Price",label:"Potato Price",value:n,onChange:function(t){return e(t)},formatOptions:{style:"currency",currency:"USD"},onUpdate:function(t,n){console.log("onUpdate value",t),console.log("onUpdate number",n)}})},"./QuantityToggleUnControlled.tsx":function(){return l||(l=(0,c.jsx)(i.QuantityToggle,{label:"Step + minValue + maxValue",minValue:2,maxValue:21,step:3}))},"./QuantityToggleUnit.tsx":function(){return(0,c.jsx)(i.QuantityToggle,{label:"Transaction amount",defaultValue:45,formatOptions:{style:"currency",currency:"EUR",currencyDisplay:"code",currencySign:"accounting"}})}},h={"components/ComponentLinkHeader.tsx":u.Z};function m(){return(0,c.jsx)(r.Z,(0,a.Z)({},o))}},65777:function(t,n,e){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/quantity-toggle",function(){return e(41228)}])}},function(t){t.O(0,[508,6371,7306,3936,4437,9774,2888,179],function(){return t(t.s=65777)}),_N_E=t.O()}]);