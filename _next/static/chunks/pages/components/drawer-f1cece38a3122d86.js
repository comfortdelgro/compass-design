(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[317],{70052:function(n,e,t){"use strict";t.d(e,{Z:function(){return d}});var o,a,r=t(15393),s=t(16371),i=t.n(s),l=t(31549);function d(){return(0,l.jsxs)(r.Flexbox,{style:{marginBottom:"var(--cdg-spacing-4)"},children:[(0,l.jsx)(i(),{href:"https://github.com/comfortdelgro/compass-design",target:"_blank",style:{textDecoration:"none"},children:o||(o=(0,l.jsx)(r.Badge,{label:"Github",color:"info",variant:"outline"}))}),(0,l.jsx)(i(),{href:"https://www.figma.com/file/JSiK3cmMmxTt8qhR3dty8t/Workbench-Design-System?type=design&node-id=502-54719&mode=design&t=a4SJbARIttEHmcZS-0",target:"_blank",style:{textDecoration:"none"},children:a||(a=(0,l.jsx)(r.Badge,{label:"Figma",color:"danger",variant:"outline"}))})]})}},47023:function(n,e,t){"use strict";t.r(e),t.d(e,{default:function(){return q}});var o,a,r,s,i,l,d,c,p,u,g,m,h,y,f,w,b,k={};t.r(k),t.d(k,{demoComponents:function(){return M},demos:function(){return L},docs:function(){return N},srcComponents:function(){return I}});var D=t(26098),v=t(24437),x=t(49336),C=t(15393),B=t(44194),S=t.t(B,2),T=t(94291),H=t(33807),j=t(27328),P=t.n(j),O=t(31549),F=t(70052),N={description:"Display overlay area on top of a page and slides in from the side. Build on top of the native HTML <strong>&#60;dialog/></strong> element.",location:"/docs/data/components/drawer/drawer.md",rendered:['\n      <svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="copied-icon" viewBox="0 0 24 24">\n        <path d="M20 2H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-8.24 11.28L9.69 11.2c-.38-.39-.38-1.01 0-1.4.39-.39 1.02-.39 1.41 0l1.36 1.37 4.42-4.46c.39-.39 1.02-.39 1.41 0 .38.39.38 1.01 0 1.4l-5.13 5.17c-.37.4-1.01.4-1.4 0zM3 6c-.55 0-1 .45-1 1v13c0 1.1.9 2 2 2h13c.55 0 1-.45 1-1s-.45-1-1-1H5c-.55 0-1-.45-1-1V7c0-.55-.45-1-1-1z" />\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="copy-icon" viewBox="0 0 24 24">\n      <path d="M15 20H5V7c0-.55-.45-1-1-1s-1 .45-1 1v13c0 1.1.9 2 2 2h10c.55 0 1-.45 1-1s-.45-1-1-1zm5-4V4c0-1.1-.9-2-2-2H9c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h9c1.1 0 2-.9 2-2zm-2 0H9V4h9v12z" />\n      +</symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n    <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n      <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n    </symbol>\n    </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="comment-link-icon" viewBox="0 0 24 24">\n        <path d="M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM6 14v-2.47l6.88-6.88c.2-.2.51-.2.71 0l1.77 1.77c.2.2.2.51 0 .71L8.47 14H6zm12 0h-7.5l2-2H18v2z" />\n      </symbol>\n      </svg>','<h1>Drawer</h1><p class="description">Display overlay area on top of a page and slides in from the side. Build on top of the native HTML <strong>&#60;dialog/></strong> element.\n</p>\n\n',{component:"components/ComponentLinkHeader.tsx"},'<div class="cdg-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span>Drawer<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@comfortdelgro/react-compass\'</span>\n</code></pre><button aria-label="Copy the code" class="cdg-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24"><use class="cdg-copy-icon" xlink:href="#copy-icon" /><use class="cdg-copied-icon" xlink:href="#copied-icon" /></svg><span class="cdg-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h2 id="basic">Basic<a aria-labelledby="basic" class="anchor-link" href="#basic" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2>',{demo:"Drawer.tsx"},'<h2 id="positions">Positions<a aria-labelledby="positions" class="anchor-link" href="#positions" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2>',{demo:"DrawerPosition.tsx"},'<h2 id="non-modal-mode">Non-modal mode<a aria-labelledby="non-modal-mode" class="anchor-link" href="#non-modal-mode" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>A Drawer that has no backdrop and also doesn&#39;t render on the top-layer. It can NOT be closed by pressing the <code>ESC</code> key.\nThe content below the non-modal drawer can be interacted.</p>\n',{demo:"DrawerMode.tsx"},'<h2 id="compound-components">Compound components<a aria-labelledby="compound-components" class="anchor-link" href="#compound-components" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><ul>\n<li><code>Drawer.Header</code> – a fully customizable header for drawer, usually contains a title and the close button.</li>\n<li><code>Drawer.Footer</code> – bottom of drawer, usually contains actions.</li>\n</ul>\n<h2 id="accessibility">Accessibility<a aria-labelledby="accessibility" class="anchor-link" href="#accessibility" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p><code>Drawer</code> component build on top of the HTML <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog" target="_blank" rel="noopener nofollow"><code>&lt;dialog/&gt;</code></a> element.</p>\n<p>By default, it respects the default accessibility behavior and settings of a <code>&lt;dialog/&gt;</code> element.</p>\n<h2 id="styling">Styling<a aria-labelledby="styling" class="anchor-link" href="#styling" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>CSS Variables:</p>\n<table>\n<thead>\n<tr>\n<th align="left">Variable</th>\n<th align="left">Default</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>--cdg-drawer-animation-timing-fn</code></td>\n<td align="left"><code>cubic-bezier(0.32, 0.72, 0, 1)</code></td>\n<td align="left">Drawer&#39;s animation timing function.</td>\n</tr>\n<tr>\n<td align="left"><code>--cdg-drawer-open-animation-duration</code></td>\n<td align="left"><code>500ms</code></td>\n<td align="left">Drawer&#39;s opening duration.</td>\n</tr>\n<tr>\n<td align="left"><code>--cdg-drawer-close-animation-duration</code></td>\n<td align="left"><code>200ms</code></td>\n<td align="left">Drawer&#39;s closing duration.</td>\n</tr>\n<tr>\n<td align="left"><code>--cdg-drawer-backdrop-bg</code></td>\n<td align="left"><code>rgba(0, 0, 0, 0.4)</code></td>\n<td align="left">Backdrop&#39;s background.</td>\n</tr>\n<tr>\n<td align="left"><code>--cdg-drawer-backdrop-blur</code></td>\n<td align="left"><code>0</code></td>\n<td align="left">Backdrop blur effect. It will be used by <code>backdrop-filter</code>&#39;s blur function.</td>\n</tr>\n<tr>\n<td align="left"><code>--cdg-drawer-backdrop-opacity</code></td>\n<td align="left"><code>1</code></td>\n<td align="left">Backdrop&#39;s opacity.</td>\n</tr>\n</tbody></table>\n<h3 id="elements">Elements<a aria-labelledby="elements" class="anchor-link" href="#elements" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p><code>classNames</code> and <code>styles</code> are 2 more available options for styling the Drawer component and its child elements.<br/>\nSee the <a href="#special-types">Special Types section</a> below for available selectors.</p>\n<p><em>Note:</em></p>\n<ul>\n<li>Some examples and demos in the documentation use the <code>styles</code> prop for convenience, but it is not recommended to use the <code>styles</code> prop as the primary means of styling components,\nas the <code>classNames</code> prop is more flexible and has better performance.</li>\n<li>Styles in <code>styles[selector]</code> will be ignored if the related selector element&#39;s <code>style</code> property has already provided.</li>\n</ul>\n<div class="cdg-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Drawer</span></span>\n  <span class="token attr-name">classNames</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>header<span class="token operator">:</span> <span class="token string">\'from-classNames\'</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n  <span class="token attr-name">styles</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>header<span class="token operator">:</span> <span class="token punctuation">{</span>backgroundColor<span class="token operator">:</span> <span class="token string">\'red\'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Drawer.Header</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">\'</span>drawer-header<span class="token punctuation">\'</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>backgroundColor<span class="token operator">:</span> <span class="token string">\'blue\'</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n    Header\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Drawer.Header</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Drawer</span></span><span class="token punctuation">></span></span>\n</code></pre><button aria-label="Copy the code" class="cdg-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24"><use class="cdg-copy-icon" xlink:href="#copy-icon" /><use class="cdg-copied-icon" xlink:href="#copied-icon" /></svg><span class="cdg-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>In this case, <code>styles.header</code> will be ignored, the Drawer&#39;s header will have a blue background color. <code>Drawer.Header</code>&#39;s class will be <code>&#39;... drawer-header from-classNames&#39;</code></p>\n<h3 id="backdrop">Backdrop<a aria-labelledby="backdrop" class="anchor-link" href="#backdrop" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>We can customize the Drawer&#39;s backdrop by using the <code>backdropProps</code> prop or update related CSS variables or apply styles directly to the <code>::backdrop</code> CSS pseudo-element.</p>\n',{demo:"DrawerStyling.tsx"},'<h3 id="keyboard-interactions">Keyboard interactions<a aria-labelledby="keyboard-interactions" class="anchor-link" href="#keyboard-interactions" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><table>\n<thead>\n<tr>\n<th align="left">Key</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><kbd>Escape</kbd></td>\n<td align="left">Close the drawer. This behavior will be disabled if <code>drawerMode</code> is <code>&#39;non-modal&#39;</code>.</td>\n</tr>\n<tr>\n<td align="left"><kbd>Tab</kbd> | <kbd>Shift</kbd> <kbd>Tab</kbd></td>\n<td align="left">Cycles through all the focusable elements of the drawer only.</td>\n</tr>\n</tbody></table>\n<h2 id="component-props">Component Props<a aria-labelledby="component-props" class="anchor-link" href="#component-props" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><h3 id="special-types">Special Types<a aria-labelledby="special-types" class="anchor-link" href="#special-types" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Type</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>DrawerStylingSelectors</code></td>\n<td align="left"><code>&#39;root&#39; | &#39;header&#39; | &#39;content&#39; | &#39;footer&#39;</code></td>\n<td align="left">Special styles APIs&#39;s available selectors (<code>classNames</code>, <code>styles</code>).</td>\n</tr>\n<tr>\n<td align="left"><code>BackdropProps</code></td>\n<td align="left"><code>{background?: string; blur?: string | number; opacity?: number}</code></td>\n<td align="left"><code>backdropProps</code> prop&#39;s options.</td>\n</tr>\n</tbody></table>\n<h3 id="shared-props">Shared Props<a aria-labelledby="shared-props" class="anchor-link" href="#shared-props" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Type</th>\n<th align="left">Default</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>classNames</code></td>\n<td align="left"><code>Partial&lt;Record&lt;DrawerStylingSelectors, string&gt;&gt;</code></td>\n<td align="left">—</td>\n<td align="left">Add provided className to the current <code>className</code> prop of related selector elements.<br/><small>See the <a href="#styling">Styling section</a>.</small></td>\n</tr>\n<tr>\n<td align="left"><code>styles</code></td>\n<td align="left"><code>Partial&lt;Record&lt;DrawerStylingSelectors, CSSProperties&gt;&gt;</code></td>\n<td align="left">—</td>\n<td align="left"><code>styles[selector]</code> is applied to related selector element ONLY if its <code>style</code> property has not been provided.<br/><small>See the <a href="#styling">Styling section</a>.</small></td>\n</tr>\n<tr>\n<td align="left"><code>backdropProps</code></td>\n<td align="left"><code>BackdropProps</code></td>\n<td align="left">—</td>\n<td align="left">Custom Drawer&#39;s backdrop styles.</td>\n</tr>\n<tr>\n<td align="left"><code>variant</code></td>\n<td align="left"><code>&#39;default&#39;</code> | <code>&#39;mobile&#39;</code></td>\n<td align="left"><code>&#39;default&#39;</code></td>\n<td align="left"></td>\n</tr>\n<tr>\n<td align="left"><code>drawerMode</code></td>\n<td align="left"><code>&#39;modal&#39;</code> | <code>&#39;non-modal&#39;</code></td>\n<td align="left"><code>&#39;modal&#39;</code></td>\n<td align="left"><code>&#39;modal&#39;</code><sup>(1)</sup><br/><code>&#39;non-modal&#39;</code><sup>(2)</sup></td>\n</tr>\n<tr>\n<td align="left"><code>preventFocus</code></td>\n<td align="left"><code>boolean</code></td>\n<td align="left"><code>false</code></td>\n<td align="left">If <code>true</code>, disable a default behavior of <code>&lt;dialog&gt;</code> element: Browser won&#39;t autofocus on the first nested focusable element anymore.</td>\n</tr>\n<tr>\n<td align="left"><code>preventClose</code></td>\n<td align="left"><code>boolean</code></td>\n<td align="left"><code>false</code></td>\n<td align="left">If <code>true</code>, the drawer won&#39;t close when users press <code>Escape</code> key or click/tap on the backdrop.</td>\n</tr>\n</tbody></table>\n<h3 id="variant-default">Variant <code>&#39;default&#39;</code><a aria-labelledby="variant-default" class="anchor-link" href="#variant-default" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Type</th>\n<th align="left">Default</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>position</code></td>\n<td align="left"><code>&#39;left&#39;</code> | <code>&#39;bottom&#39;</code> | <code>&#39;right&#39;</code></td>\n<td align="left"><code>&#39;right&#39;</code></td>\n<td align="left">Side of the screen where drawer will be opened.</td>\n</tr>\n<tr>\n<td align="left"><code>css</code></td>\n<td align="left"><code>CSS</code></td>\n<td align="left">—</td>\n<td align="left">A legacy common prop that allows styling components.</td>\n</tr>\n</tbody></table>\n<p>*: Required.</p>\n<p>(1): Act the same as a default <code>&lt;dialog/&gt;</code>. It will be rendered on the top-layer with a backdrop. Everything other than the drawer and its contents will be ignored by the browsers and can&#39;t be interact with.<br/>\n(2): It has no backdrop and also doesn&#39;t render on the top-layer. It can not be closed by pressing the <code>ESC</code> key. The content below the non-modal drawer can be interacted. <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog/#accessibility" target="_blank" rel="noopener nofollow">Read more</a>.</p>\n'],toc:[{text:"Basic",level:2,hash:"basic",children:[]},{text:"Positions",level:2,hash:"positions",children:[]},{text:"Non-modal mode",level:2,hash:"non-modal-mode",children:[]},{text:"Compound components",level:2,hash:"compound-components",children:[]},{text:"Accessibility",level:2,hash:"accessibility",children:[]},{text:"Styling",level:2,hash:"styling",children:[{text:"Elements",level:3,hash:"elements"},{text:"Backdrop",level:3,hash:"backdrop"},{text:"Keyboard interactions",level:3,hash:"keyboard-interactions"}]},{text:"Component Props",level:2,hash:"component-props",children:[{text:"Special Types",level:3,hash:"special-types"},{text:"Shared Props",level:3,hash:"shared-props"},{text:"Variant &#39;default&#39;",level:3,hash:"variant-default"}]}],title:"React Drawer component",headers:{title:"React Drawer component",components:["Drawer"],hooks:[]}},L={"Drawer.tsx":{module:"./Drawer.tsx",raw:"import CrossIcon from '@comfortdelgro/compass-icons/react/cross'\nimport {\n  Button,\n  Column,\n  Divider,\n  Drawer,\n  Row,\n  TextField,\n  Typography,\n} from '@comfortdelgro/react-compass'\nimport {FormEventHandler, useState} from 'react'\n\nexport default function DrawerDocs() {\n  const [openDrawer, setOpenDrawer] = useState(false)\n  const [keyword, setKeyword] = useState('') // just for display form value\n\n  const handleFormSubmit: FormEventHandler<HTMLFormElement> = (e) => {\n    e.preventDefault()\n\n    const formData = new FormData(e.currentTarget)\n    setKeyword((formData.get('keyword') as string) || '')\n\n    if (!formData.get('keepFormValue')) {\n      e.currentTarget.reset()\n    }\n\n    setOpenDrawer(false)\n  }\n\n  const listenOnCloseDrawer = () => {\n    setOpenDrawer(false)\n\n    // Do other stuff when drawer close\n  }\n\n  return (\n    <Column>\n      <Typography.Header variant='header4'>\n        Drawer controlled by form\n      </Typography.Header>\n\n      <Row css={{marginBlock: 'var(--cdg-spacing-4)'}}>\n        <Button type='button' onClick={() => setOpenDrawer(true)}>\n          Open Drawer\n        </Button>\n      </Row>\n\n      <Typography.Body variant='body2'>Submitted form values:</Typography.Body>\n      <pre\n        style={{\n          padding: '0.5rem',\n          margin: '0',\n\n          width: '100%',\n          minHeight: '2rem',\n          borderRadius: '8px',\n\n          backgroundColor: '#FAF9F8',\n          fontSize: '0.875rem',\n          whiteSpace: 'pre-wrap',\n          overflowWrap: 'anywhere',\n        }}\n      >\n        {JSON.stringify({keyword}, null, 2)}\n      </pre>\n\n      <Drawer open={openDrawer} onClose={listenOnCloseDrawer}>\n        <Drawer.Header>\n          <Typography.Header variant='header3'>\n            Drawer controlled by form\n          </Typography.Header>\n          <Button\n            css={{\n              padding: 'var(--cdg-spacing-1)',\n              svg: {\n                width: 'fit-content !important',\n              },\n            }}\n            type='button'\n            variant='ghost'\n            onClick={() => setOpenDrawer(false)}\n          >\n            <CrossIcon />\n          </Button>\n        </Drawer.Header>\n\n        <Typography.Header variant='header4'>Drawer Form</Typography.Header>\n        <Typography.Body\n          variant='body3'\n          css={{\n            color: 'var(--cdg-color-grayShades60)',\n            marginBottom: 'var(--cdg-spacing-4)',\n          }}\n        >\n          In this example, all inputs are uncontrolled input.\n        </Typography.Body>\n\n        <form id='form-in-drawer' method='dialog' onSubmit={handleFormSubmit}>\n          <TextField\n            label='Keyword'\n            name='keyword'\n            id='keyword'\n            placeholder='Enter anything'\n          />\n\n          <label htmlFor='keepValue'>Keep form value: </label>\n          <input\n            name='keepFormValue'\n            type='checkbox'\n            id='keepValue'\n            style={{marginTop: '1rem'}}\n          />\n        </form>\n\n        <Divider css={{marginBlock: 'var(--cdg-spacing-4)'}} />\n\n        <Typography.Header\n          variant='header4'\n          css={{marginTop: 'var(--cdg-spacing-16)'}}\n        >\n          Article contents\n        </Typography.Header>\n        <section style={{height: '50vh'}}>\n          <Typography.Header\n            variant='header5'\n            css={{\n              position: 'sticky',\n              insetInline: 0,\n              top: '-1rem',\n              paddingBlock: '1rem',\n              marginBlock: 0,\n              color: 'var(--cdg-color-primaryText)',\n              backgroundColor: 'var(--cdg-color-background)',\n            }}\n          >\n            Section 1: Very long content here, scroll down ⏬ for more content\n          </Typography.Header>\n\n          <Typography.Body variant='body3'>\n            Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo\n            molestiae tenetur in, dicta veniam quisquam iste officia deleniti,\n            nemo cum nesciunt repudiandae fugiat sapiente nihil eius ut culpa\n            quis modi.\n          </Typography.Body>\n        </section>\n\n        <section style={{height: '100vh'}}>\n          <Typography.Header\n            variant='header5'\n            css={{\n              position: 'sticky',\n              insetInline: 0,\n              top: '-1rem',\n              paddingBlock: '1rem',\n              marginBlock: 0,\n              color: 'var(--cdg-color-primaryText)',\n              backgroundColor: 'var(--cdg-color-background)',\n            }}\n          >\n            Section 2: No idea\n          </Typography.Header>\n\n          <Typography.Body variant='body3'>\n            Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo\n            molestiae tenetur in, dicta veniam quisquam iste officia deleniti,\n            nemo cum nesciunt repudiandae fugiat sapiente nihil eius ut culpa\n            quis modi. Lorem ipsum dolor sit amet, consectetur adipisicing elit.\n            Voluptatem quidem omnis architecto aliquam id dicta dolor magnam,\n            sapiente, itaque quaerat laboriosam reiciendis placeat tempore animi\n            ratione! Neque doloribus vel esse.\n          </Typography.Body>\n        </section>\n\n        <Drawer.Footer css={{display: 'flex', gap: 'var(--cdg-spacing-2)'}}>\n          <Button\n            variant='secondary'\n            form='form-in-drawer'\n            type='reset'\n            onClick={() => setOpenDrawer(false)}\n          >\n            Cancel\n          </Button>\n\n          <Button form='form-in-drawer' type='submit'>\n            Submit\n          </Button>\n        </Drawer.Footer>\n      </Drawer>\n    </Column>\n  )\n}\n",jsxPreview:"import {Button, Drawer} from '@comfortdelgro/react-compass'\n\nconst [openDrawer, setOpenDrawer] = useState(false)\n\n<Button type='button' onClick={() => setOpenDrawer(true)}>\n  Open Drawer\n</Button>\n\n<Drawer open={openDrawer} onClose={() => setOpenDrawer(false)}>\n  Some article contents\n</Drawer>\n",moduleTS:"./Drawer.tsx",rawTS:"import CrossIcon from '@comfortdelgro/compass-icons/react/cross'\nimport {\n  Button,\n  Column,\n  Divider,\n  Drawer,\n  Row,\n  TextField,\n  Typography,\n} from '@comfortdelgro/react-compass'\nimport {FormEventHandler, useState} from 'react'\n\nexport default function DrawerDocs() {\n  const [openDrawer, setOpenDrawer] = useState(false)\n  const [keyword, setKeyword] = useState('') // just for display form value\n\n  const handleFormSubmit: FormEventHandler<HTMLFormElement> = (e) => {\n    e.preventDefault()\n\n    const formData = new FormData(e.currentTarget)\n    setKeyword((formData.get('keyword') as string) || '')\n\n    if (!formData.get('keepFormValue')) {\n      e.currentTarget.reset()\n    }\n\n    setOpenDrawer(false)\n  }\n\n  const listenOnCloseDrawer = () => {\n    setOpenDrawer(false)\n\n    // Do other stuff when drawer close\n  }\n\n  return (\n    <Column>\n      <Typography.Header variant='header4'>\n        Drawer controlled by form\n      </Typography.Header>\n\n      <Row css={{marginBlock: 'var(--cdg-spacing-4)'}}>\n        <Button type='button' onClick={() => setOpenDrawer(true)}>\n          Open Drawer\n        </Button>\n      </Row>\n\n      <Typography.Body variant='body2'>Submitted form values:</Typography.Body>\n      <pre\n        style={{\n          padding: '0.5rem',\n          margin: '0',\n\n          width: '100%',\n          minHeight: '2rem',\n          borderRadius: '8px',\n\n          backgroundColor: '#FAF9F8',\n          fontSize: '0.875rem',\n          whiteSpace: 'pre-wrap',\n          overflowWrap: 'anywhere',\n        }}\n      >\n        {JSON.stringify({keyword}, null, 2)}\n      </pre>\n\n      <Drawer open={openDrawer} onClose={listenOnCloseDrawer}>\n        <Drawer.Header>\n          <Typography.Header variant='header3'>\n            Drawer controlled by form\n          </Typography.Header>\n          <Button\n            css={{\n              padding: 'var(--cdg-spacing-1)',\n              svg: {\n                width: 'fit-content !important',\n              },\n            }}\n            type='button'\n            variant='ghost'\n            onClick={() => setOpenDrawer(false)}\n          >\n            <CrossIcon />\n          </Button>\n        </Drawer.Header>\n\n        <Typography.Header variant='header4'>Drawer Form</Typography.Header>\n        <Typography.Body\n          variant='body3'\n          css={{\n            color: 'var(--cdg-color-grayShades60)',\n            marginBottom: 'var(--cdg-spacing-4)',\n          }}\n        >\n          In this example, all inputs are uncontrolled input.\n        </Typography.Body>\n\n        <form id='form-in-drawer' method='dialog' onSubmit={handleFormSubmit}>\n          <TextField\n            label='Keyword'\n            name='keyword'\n            id='keyword'\n            placeholder='Enter anything'\n          />\n\n          <label htmlFor='keepValue'>Keep form value: </label>\n          <input\n            name='keepFormValue'\n            type='checkbox'\n            id='keepValue'\n            style={{marginTop: '1rem'}}\n          />\n        </form>\n\n        <Divider css={{marginBlock: 'var(--cdg-spacing-4)'}} />\n\n        <Typography.Header\n          variant='header4'\n          css={{marginTop: 'var(--cdg-spacing-16)'}}\n        >\n          Article contents\n        </Typography.Header>\n        <section style={{height: '50vh'}}>\n          <Typography.Header\n            variant='header5'\n            css={{\n              position: 'sticky',\n              insetInline: 0,\n              top: '-1rem',\n              paddingBlock: '1rem',\n              marginBlock: 0,\n              color: 'var(--cdg-color-primaryText)',\n              backgroundColor: 'var(--cdg-color-background)',\n            }}\n          >\n            Section 1: Very long content here, scroll down ⏬ for more content\n          </Typography.Header>\n\n          <Typography.Body variant='body3'>\n            Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo\n            molestiae tenetur in, dicta veniam quisquam iste officia deleniti,\n            nemo cum nesciunt repudiandae fugiat sapiente nihil eius ut culpa\n            quis modi.\n          </Typography.Body>\n        </section>\n\n        <section style={{height: '100vh'}}>\n          <Typography.Header\n            variant='header5'\n            css={{\n              position: 'sticky',\n              insetInline: 0,\n              top: '-1rem',\n              paddingBlock: '1rem',\n              marginBlock: 0,\n              color: 'var(--cdg-color-primaryText)',\n              backgroundColor: 'var(--cdg-color-background)',\n            }}\n          >\n            Section 2: No idea\n          </Typography.Header>\n\n          <Typography.Body variant='body3'>\n            Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo\n            molestiae tenetur in, dicta veniam quisquam iste officia deleniti,\n            nemo cum nesciunt repudiandae fugiat sapiente nihil eius ut culpa\n            quis modi. Lorem ipsum dolor sit amet, consectetur adipisicing elit.\n            Voluptatem quidem omnis architecto aliquam id dicta dolor magnam,\n            sapiente, itaque quaerat laboriosam reiciendis placeat tempore animi\n            ratione! Neque doloribus vel esse.\n          </Typography.Body>\n        </section>\n\n        <Drawer.Footer css={{display: 'flex', gap: 'var(--cdg-spacing-2)'}}>\n          <Button\n            variant='secondary'\n            form='form-in-drawer'\n            type='reset'\n            onClick={() => setOpenDrawer(false)}\n          >\n            Cancel\n          </Button>\n\n          <Button form='form-in-drawer' type='submit'>\n            Submit\n          </Button>\n        </Drawer.Footer>\n      </Drawer>\n    </Column>\n  )\n}\n"},"DrawerPosition.tsx":{module:"./DrawerPosition.tsx",raw:"import ArrowLeft from '@comfortdelgro/compass-icons/react/arrow-left'\nimport ArrowRight from '@comfortdelgro/compass-icons/react/arrow-right'\nimport {\n  Button,\n  Column,\n  Drawer,\n  DrawerProps,\n  Row,\n} from '@comfortdelgro/react-compass'\nimport {useState} from 'react'\n\nexport default function DrawerPositionDocs() {\n  const [openDrawerPosition, setOpenDrawerPosition] = useState(false)\n  const [drawerPosition, setDrawerPosition] =\n    useState<DrawerProps['position']>(undefined)\n\n  const handleChangePosition = (position: DrawerProps['position']) => {\n    setDrawerPosition(position)\n    setOpenDrawerPosition(true)\n  }\n\n  const handleCloseDrawer = () => {\n    setOpenDrawerPosition(false)\n  }\n\n  return (\n    <Column>\n      <Row>\n        <Button\n          type='button'\n          leftIcon={<ArrowLeft />}\n          onClick={() => handleChangePosition('left')}\n        >\n          Open on the left\n        </Button>\n\n        <Button\n          variant='secondary'\n          type='button'\n          onClick={() => handleChangePosition('bottom')}\n        >\n          Open on the bottom\n        </Button>\n\n        <Button\n          type='button'\n          rightIcon={<ArrowRight />}\n          onClick={() => handleChangePosition('right')}\n        >\n          Open on the right\n        </Button>\n      </Row>\n\n      <Drawer\n        open={openDrawerPosition}\n        onClose={handleCloseDrawer}\n        position={drawerPosition}\n      >\n        <Drawer.Header>\n          <h2>Drawer {drawerPosition || ''}</h2>\n        </Drawer.Header>\n\n        <p>Article contents</p>\n\n        <Button type='button' onClick={handleCloseDrawer}>\n          Close Drawer\n        </Button>\n      </Drawer>\n    </Column>\n  )\n}\n",jsxPreview:"<Drawer position='left'>\n  ...\n</Drawer>\n",moduleTS:"./DrawerPosition.tsx",rawTS:"import ArrowLeft from '@comfortdelgro/compass-icons/react/arrow-left'\nimport ArrowRight from '@comfortdelgro/compass-icons/react/arrow-right'\nimport {\n  Button,\n  Column,\n  Drawer,\n  DrawerProps,\n  Row,\n} from '@comfortdelgro/react-compass'\nimport {useState} from 'react'\n\nexport default function DrawerPositionDocs() {\n  const [openDrawerPosition, setOpenDrawerPosition] = useState(false)\n  const [drawerPosition, setDrawerPosition] =\n    useState<DrawerProps['position']>(undefined)\n\n  const handleChangePosition = (position: DrawerProps['position']) => {\n    setDrawerPosition(position)\n    setOpenDrawerPosition(true)\n  }\n\n  const handleCloseDrawer = () => {\n    setOpenDrawerPosition(false)\n  }\n\n  return (\n    <Column>\n      <Row>\n        <Button\n          type='button'\n          leftIcon={<ArrowLeft />}\n          onClick={() => handleChangePosition('left')}\n        >\n          Open on the left\n        </Button>\n\n        <Button\n          variant='secondary'\n          type='button'\n          onClick={() => handleChangePosition('bottom')}\n        >\n          Open on the bottom\n        </Button>\n\n        <Button\n          type='button'\n          rightIcon={<ArrowRight />}\n          onClick={() => handleChangePosition('right')}\n        >\n          Open on the right\n        </Button>\n      </Row>\n\n      <Drawer\n        open={openDrawerPosition}\n        onClose={handleCloseDrawer}\n        position={drawerPosition}\n      >\n        <Drawer.Header>\n          <h2>Drawer {drawerPosition || ''}</h2>\n        </Drawer.Header>\n\n        <p>Article contents</p>\n\n        <Button type='button' onClick={handleCloseDrawer}>\n          Close Drawer\n        </Button>\n      </Drawer>\n    </Column>\n  )\n}\n"},"DrawerMode.tsx":{module:"./DrawerMode.tsx",raw:"import {Button, Drawer, Link, Typography} from '@comfortdelgro/react-compass'\nimport {useState} from 'react'\n\nexport default function DrawerModeDocs() {\n  const [openNonModalDrawer, setOpenNonModalDrawer] = useState(false)\n\n  return (\n    <>\n      <Button\n        variant={openNonModalDrawer ? 'danger' : 'secondary'}\n        type='button'\n        onClick={() => setOpenNonModalDrawer(!openNonModalDrawer)}\n      >\n        {openNonModalDrawer ? 'Close' : 'Open'} Non-modal Drawer\n      </Button>\n\n      <Drawer\n        open={openNonModalDrawer}\n        onClose={() => setOpenNonModalDrawer(false)}\n        drawerMode='non-modal'\n        style={{zIndex: 10}}\n      >\n        <Drawer.Header>\n          <Typography.Header variant='header3'>\n            Non-modal Drawer\n          </Typography.Header>\n        </Drawer.Header>\n\n        <Typography.Body variant='body2'>\n          <Link\n            href='https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog#accessibility'\n            target='_blank'\n          >\n            Read more\n          </Link>{' '}\n          about non-modal mode and related accessibility considerations.\n        </Typography.Body>\n\n        <Drawer.Footer>\n          <Button\n            type='button'\n            variant='danger'\n            onClick={() => setOpenNonModalDrawer(false)}\n          >\n            Close Drawer\n          </Button>\n        </Drawer.Footer>\n      </Drawer>\n    </>\n  )\n}\n",jsxPreview:"<Drawer drawerMode='non-modal'>\n  ...\n</Drawer>",moduleTS:"./DrawerMode.tsx",rawTS:"import {Button, Drawer, Link, Typography} from '@comfortdelgro/react-compass'\nimport {useState} from 'react'\n\nexport default function DrawerModeDocs() {\n  const [openNonModalDrawer, setOpenNonModalDrawer] = useState(false)\n\n  return (\n    <>\n      <Button\n        variant={openNonModalDrawer ? 'danger' : 'secondary'}\n        type='button'\n        onClick={() => setOpenNonModalDrawer(!openNonModalDrawer)}\n      >\n        {openNonModalDrawer ? 'Close' : 'Open'} Non-modal Drawer\n      </Button>\n\n      <Drawer\n        open={openNonModalDrawer}\n        onClose={() => setOpenNonModalDrawer(false)}\n        drawerMode='non-modal'\n        style={{zIndex: 10}}\n      >\n        <Drawer.Header>\n          <Typography.Header variant='header3'>\n            Non-modal Drawer\n          </Typography.Header>\n        </Drawer.Header>\n\n        <Typography.Body variant='body2'>\n          <Link\n            href='https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog#accessibility'\n            target='_blank'\n          >\n            Read more\n          </Link>{' '}\n          about non-modal mode and related accessibility considerations.\n        </Typography.Body>\n\n        <Drawer.Footer>\n          <Button\n            type='button'\n            variant='danger'\n            onClick={() => setOpenNonModalDrawer(false)}\n          >\n            Close Drawer\n          </Button>\n        </Drawer.Footer>\n      </Drawer>\n    </>\n  )\n}\n"},"DrawerStyling.tsx":{module:"./DrawerStyling.tsx",raw:"import {Button, Drawer} from '@comfortdelgro/react-compass'\nimport {useState} from 'react'\n\nexport default function DrawerStyling() {\n  const [openDrawer, setOpenDrawer] = useState(false)\n\n  return (\n    <>\n      <Button\n        variant='secondary'\n        type='button'\n        onClick={() => setOpenDrawer(true)}\n      >\n        Open Drawer\n      </Button>\n\n      <Drawer\n        open={openDrawer}\n        onClose={() => setOpenDrawer(false)}\n        styles={{\n          root: {backgroundColor: 'rgba(255,255,255,0.9)'},\n          header: {fontWeight: 600, color: 'var(--cdg-color-cdgBlue)'},\n          content: {paddingBlock: 0},\n          footer: {\n            background:\n              'radial-gradient(circle,rgba(34,193,195,0.4) 0%,rgba(253,187,45,0.2) 100%)',\n          },\n        }}\n        backdropProps={{\n          blur: 1,\n          opacity: 0.9,\n          background:\n            'linear-gradient(-25deg,rgba(238,174,202,0.6) 0%,rgba(148,187,233,0.6) 100%)',\n        }}\n      >\n        <Drawer.Header>Styling</Drawer.Header>\n\n        <p>\n          We can use <code>classNames</code>, <code>styles</code>, and{' '}\n          <code>backdropProps</code> to style the Drawer component and its child\n          elements.\n        </p>\n\n        <Drawer.Footer>\n          <Button\n            variant='secondary'\n            type='button'\n            onClick={() => setOpenDrawer(false)}\n          >\n            Close Drawer\n          </Button>\n        </Drawer.Footer>\n      </Drawer>\n    </>\n  )\n}\n",jsxPreview:"<Drawer\n  backdropProps={{\n    blur: 0,\n    opacity: 1,\n    background: 'rgba(0,0,0,0.4)',\n  }}\n>\n  ...\n</Drawer>",moduleTS:"./DrawerStyling.tsx",rawTS:"import {Button, Drawer} from '@comfortdelgro/react-compass'\nimport {useState} from 'react'\n\nexport default function DrawerStyling() {\n  const [openDrawer, setOpenDrawer] = useState(false)\n\n  return (\n    <>\n      <Button\n        variant='secondary'\n        type='button'\n        onClick={() => setOpenDrawer(true)}\n      >\n        Open Drawer\n      </Button>\n\n      <Drawer\n        open={openDrawer}\n        onClose={() => setOpenDrawer(false)}\n        styles={{\n          root: {backgroundColor: 'rgba(255,255,255,0.9)'},\n          header: {fontWeight: 600, color: 'var(--cdg-color-cdgBlue)'},\n          content: {paddingBlock: 0},\n          footer: {\n            background:\n              'radial-gradient(circle,rgba(34,193,195,0.4) 0%,rgba(253,187,45,0.2) 100%)',\n          },\n        }}\n        backdropProps={{\n          blur: 1,\n          opacity: 0.9,\n          background:\n            'linear-gradient(-25deg,rgba(238,174,202,0.6) 0%,rgba(148,187,233,0.6) 100%)',\n        }}\n      >\n        <Drawer.Header>Styling</Drawer.Header>\n\n        <p>\n          We can use <code>classNames</code>, <code>styles</code>, and{' '}\n          <code>backdropProps</code> to style the Drawer component and its child\n          elements.\n        </p>\n\n        <Drawer.Footer>\n          <Button\n            variant='secondary'\n            type='button'\n            onClick={() => setOpenDrawer(false)}\n          >\n            Close Drawer\n          </Button>\n        </Drawer.Footer>\n      </Drawer>\n    </>\n  )\n}\n"}};L.scope={process:{},import:{"@comfortdelgro/compass-icons/react/cross":x,"@comfortdelgro/react-compass":C,react:S,"@comfortdelgro/compass-icons/react/arrow-left":T,"@comfortdelgro/compass-icons/react/arrow-right":H}};var M={"./Drawer.tsx":function(){var n=(0,B.useState)(!1),e=n[0],t=n[1],g=(0,B.useState)(""),m=g[0],h=g[1];return(0,O.jsxs)(C.Column,{children:[o||(o=(0,O.jsx)(C.Typography.Header,{variant:"header4",children:"Drawer controlled by form"})),(0,O.jsx)(C.Row,{css:{marginBlock:"var(--cdg-spacing-4)"},children:(0,O.jsx)(C.Button,{type:"button",onClick:function(){return t(!0)},children:"Open Drawer"})}),a||(a=(0,O.jsx)(C.Typography.Body,{variant:"body2",children:"Submitted form values:"})),(0,O.jsx)("pre",{style:{padding:"0.5rem",margin:"0",width:"100%",minHeight:"2rem",borderRadius:"8px",backgroundColor:"#FAF9F8",fontSize:"0.875rem",whiteSpace:"pre-wrap",overflowWrap:"anywhere"},children:P()({keyword:m},null,2)}),(0,O.jsxs)(C.Drawer,{open:e,onClose:function(){t(!1)},children:[(0,O.jsxs)(C.Drawer.Header,{children:[r||(r=(0,O.jsx)(C.Typography.Header,{variant:"header3",children:"Drawer controlled by form"})),(0,O.jsx)(C.Button,{css:{padding:"var(--cdg-spacing-1)",svg:{width:"fit-content !important"}},type:"button",variant:"ghost",onClick:function(){return t(!1)},children:s||(s=(0,O.jsx)(x.default,{}))})]}),i||(i=(0,O.jsx)(C.Typography.Header,{variant:"header4",children:"Drawer Form"})),(0,O.jsx)(C.Typography.Body,{variant:"body3",css:{color:"var(--cdg-color-grayShades60)",marginBottom:"var(--cdg-spacing-4)"},children:"In this example, all inputs are uncontrolled input."}),(0,O.jsxs)("form",{id:"form-in-drawer",method:"dialog",onSubmit:function(n){n.preventDefault();var e=new FormData(n.currentTarget);h(e.get("keyword")||""),e.get("keepFormValue")||n.currentTarget.reset(),t(!1)},children:[l||(l=(0,O.jsx)(C.TextField,{label:"Keyword",name:"keyword",id:"keyword",placeholder:"Enter anything"})),d||(d=(0,O.jsx)("label",{htmlFor:"keepValue",children:"Keep form value: "})),(0,O.jsx)("input",{name:"keepFormValue",type:"checkbox",id:"keepValue",style:{marginTop:"1rem"}})]}),(0,O.jsx)(C.Divider,{css:{marginBlock:"var(--cdg-spacing-4)"}}),(0,O.jsx)(C.Typography.Header,{variant:"header4",css:{marginTop:"var(--cdg-spacing-16)"},children:"Article contents"}),(0,O.jsxs)("section",{style:{height:"50vh"},children:[(0,O.jsx)(C.Typography.Header,{variant:"header5",css:{position:"sticky",insetInline:0,top:"-1rem",paddingBlock:"1rem",marginBlock:0,color:"var(--cdg-color-primaryText)",backgroundColor:"var(--cdg-color-background)"},children:"Section 1: Very long content here, scroll down ⏬ for more content"}),c||(c=(0,O.jsx)(C.Typography.Body,{variant:"body3",children:"Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo molestiae tenetur in, dicta veniam quisquam iste officia deleniti, nemo cum nesciunt repudiandae fugiat sapiente nihil eius ut culpa quis modi."}))]}),(0,O.jsxs)("section",{style:{height:"100vh"},children:[(0,O.jsx)(C.Typography.Header,{variant:"header5",css:{position:"sticky",insetInline:0,top:"-1rem",paddingBlock:"1rem",marginBlock:0,color:"var(--cdg-color-primaryText)",backgroundColor:"var(--cdg-color-background)"},children:"Section 2: No idea"}),p||(p=(0,O.jsx)(C.Typography.Body,{variant:"body3",children:"Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo molestiae tenetur in, dicta veniam quisquam iste officia deleniti, nemo cum nesciunt repudiandae fugiat sapiente nihil eius ut culpa quis modi. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatem quidem omnis architecto aliquam id dicta dolor magnam, sapiente, itaque quaerat laboriosam reiciendis placeat tempore animi ratione! Neque doloribus vel esse."}))]}),(0,O.jsxs)(C.Drawer.Footer,{css:{display:"flex",gap:"var(--cdg-spacing-2)"},children:[(0,O.jsx)(C.Button,{variant:"secondary",form:"form-in-drawer",type:"reset",onClick:function(){return t(!1)},children:"Cancel"}),u||(u=(0,O.jsx)(C.Button,{form:"form-in-drawer",type:"submit",children:"Submit"}))]})]})]})},"./DrawerPosition.tsx":function(){var n=(0,B.useState)(!1),e=n[0],t=n[1],o=(0,B.useState)(void 0),a=o[0],r=o[1],s=function(n){r(n),t(!0)},i=function(){t(!1)};return(0,O.jsxs)(C.Column,{children:[(0,O.jsxs)(C.Row,{children:[(0,O.jsx)(C.Button,{type:"button",leftIcon:g||(g=(0,O.jsx)(T.default,{})),onClick:function(){return s("left")},children:"Open on the left"}),(0,O.jsx)(C.Button,{variant:"secondary",type:"button",onClick:function(){return s("bottom")},children:"Open on the bottom"}),(0,O.jsx)(C.Button,{type:"button",rightIcon:m||(m=(0,O.jsx)(H.default,{})),onClick:function(){return s("right")},children:"Open on the right"})]}),(0,O.jsxs)(C.Drawer,{open:e,onClose:i,position:a,children:[(0,O.jsx)(C.Drawer.Header,{children:(0,O.jsxs)("h2",{children:["Drawer ",a||""]})}),h||(h=(0,O.jsx)("p",{children:"Article contents"})),(0,O.jsx)(C.Button,{type:"button",onClick:i,children:"Close Drawer"})]})]})},"./DrawerMode.tsx":function(){var n=(0,B.useState)(!1),e=n[0],t=n[1];return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsxs)(C.Button,{variant:e?"danger":"secondary",type:"button",onClick:function(){return t(!e)},children:[e?"Close":"Open"," Non-modal Drawer"]}),(0,O.jsxs)(C.Drawer,{open:e,onClose:function(){return t(!1)},drawerMode:"non-modal",style:{zIndex:10},children:[y||(y=(0,O.jsx)(C.Drawer.Header,{children:(0,O.jsx)(C.Typography.Header,{variant:"header3",children:"Non-modal Drawer"})})),f||(f=(0,O.jsxs)(C.Typography.Body,{variant:"body2",children:[(0,O.jsx)(C.Link,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog#accessibility",target:"_blank",children:"Read more"})," ","about non-modal mode and related accessibility considerations."]})),(0,O.jsx)(C.Drawer.Footer,{children:(0,O.jsx)(C.Button,{type:"button",variant:"danger",onClick:function(){return t(!1)},children:"Close Drawer"})})]})]})},"./DrawerStyling.tsx":function(){var n=(0,B.useState)(!1),e=n[0],t=n[1];return(0,O.jsxs)(O.Fragment,{children:[(0,O.jsx)(C.Button,{variant:"secondary",type:"button",onClick:function(){return t(!0)},children:"Open Drawer"}),(0,O.jsxs)(C.Drawer,{open:e,onClose:function(){return t(!1)},styles:{root:{backgroundColor:"rgba(255,255,255,0.9)"},header:{fontWeight:600,color:"var(--cdg-color-cdgBlue)"},content:{paddingBlock:0},footer:{background:"radial-gradient(circle,rgba(34,193,195,0.4) 0%,rgba(253,187,45,0.2) 100%)"}},backdropProps:{blur:1,opacity:.9,background:"linear-gradient(-25deg,rgba(238,174,202,0.6) 0%,rgba(148,187,233,0.6) 100%)"},children:[w||(w=(0,O.jsx)(C.Drawer.Header,{children:"Styling"})),b||(b=(0,O.jsxs)("p",{children:["We can use ",(0,O.jsx)("code",{children:"classNames"}),", ",(0,O.jsx)("code",{children:"styles"}),", and"," ",(0,O.jsx)("code",{children:"backdropProps"})," to style the Drawer component and its child elements."]})),(0,O.jsx)(C.Drawer.Footer,{children:(0,O.jsx)(C.Button,{variant:"secondary",type:"button",onClick:function(){return t(!1)},children:"Close Drawer"})})]})]})}},I={"components/ComponentLinkHeader.tsx":F.Z};function q(){return(0,O.jsx)(v.Z,(0,D.Z)({},k))}},99307:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/drawer",function(){return t(47023)}])},94291:function(n,e,t){"use strict";t.r(e);var o=t(44194);let a=(0,o.forwardRef)((n,e)=>o.createElement("svg",{width:"1em",height:"1em",viewBox:"0 0 32 32",ref:e,...n},o.createElement("g",{fill:"currentColor"},o.createElement("path",{d:"M21.7146 0.999998C22.2995 0.999998 22.8846 1.24412 23.3304 1.73237C24.2232 2.70887 24.2232 4.2908 23.3304 5.2673L13.5146 15.999L23.3304 26.7327C24.2232 27.7092 24.2232 29.2911 23.3304 30.2676C22.4375 31.2441 20.9911 31.2441 20.0982 30.2676L8.66964 17.7684C7.77679 16.7919 7.77679 15.21 8.66964 14.2335L20.0982 1.73433C20.5446 1.24217 21.1296 0.999998 21.7146 0.999998Z"}))));e.default=a},33807:function(n,e,t){"use strict";t.r(e);var o=t(44194);let a=(0,o.forwardRef)((n,e)=>o.createElement("svg",{width:"1em",height:"1em",viewBox:"0 0 32 32",ref:e,...n},o.createElement("g",{fill:"currentColor"},o.createElement("path",{d:"M10.9997 30C10.4879 30 9.97594 29.7722 9.58594 29.3165C8.80469 28.4051 8.80469 26.9286 9.58594 26.0172L18.1747 16.0009L9.58594 5.98281C8.80469 5.07141 8.80469 3.59495 9.58594 2.68355C10.3672 1.77215 11.6328 1.77215 12.4141 2.68355L22.4141 14.3495C23.1953 15.2609 23.1953 16.7373 22.4141 17.6487L12.4141 29.3146C12.0234 29.774 11.5116 30 10.9997 30Z"}))));e.default=a},49336:function(n,e,t){"use strict";t.r(e);var o=t(44194);let a=(0,o.forwardRef)((n,e)=>o.createElement("svg",{width:"1em",height:"1em",viewBox:"0 0 32 32",ref:e,...n},o.createElement("g",{fill:"currentColor"},o.createElement("path",{d:"M30.1165 25.8816C31.2883 27.0534 31.2883 28.9517 30.1165 30.1235C29.5353 30.7094 28.7666 31 27.9979 31C27.2292 31 26.4624 30.7071 25.8774 30.1212L15.9988 20.2477L6.12116 30.1188C5.53527 30.7094 4.76752 31 3.99977 31C3.23201 31 2.4652 30.7094 1.87884 30.1188C0.707054 28.947 0.707054 27.0487 1.87884 25.877L11.7593 15.9965L1.87884 6.12069C0.707054 4.94891 0.707054 3.05062 1.87884 1.87884C3.05062 0.707054 4.94891 0.707054 6.12069 1.87884L15.9988 11.764L25.8793 1.88353C27.0511 0.711742 28.9494 0.711742 30.1212 1.88353C31.2929 3.05531 31.2929 4.9536 30.1212 6.12538L20.2407 16.0059L30.1165 25.8816Z"}))));e.default=a}},function(n){n.O(0,[508,6371,7306,3936,4437,9774,2888,179],function(){return n(n.s=99307)}),_N_E=n.O()}]);