(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[452],{93279:function(n,e,t){"use strict";t.d(e,{Z:function(){return l}});var o,a,r=t(15393),s=t(16371),c=t.n(s),i=t(31549);function l(){return(0,i.jsxs)(r.Flexbox,{style:{marginBottom:"var(--cdg-spacing-4)"},children:[(0,i.jsx)(c(),{href:"https://github.com/comfortdelgro/compass-design",target:"_blank",style:{textDecoration:"none"},children:o||(o=(0,i.jsx)(r.Badge,{label:"Github",color:"info",variant:"outline"}))}),(0,i.jsx)(c(),{href:"https://www.figma.com/file/JSiK3cmMmxTt8qhR3dty8t/Workbench-Design-System?type=design&node-id=502-54719&mode=design&t=a4SJbARIttEHmcZS-0",target:"_blank",style:{textDecoration:"none"},children:a||(a=(0,i.jsx)(r.Badge,{label:"Figma",color:"danger",variant:"outline"}))})]})}},91474:function(n,e,t){"use strict";t.r(e),t.d(e,{default:function(){return _}});var o,a,r,s,c,i,l,d,m,u,f,p,h,g,k,b,x={};t.r(x),t.d(x,{default:function(){return L}});var w={};t.r(w),t.d(w,{demoComponents:function(){return E},demos:function(){return A},docs:function(){return W},srcComponents:function(){return H}});var S=t(26098),v=t(43866),y=t(49336),C=t(15393),I=t(42096),D=t(44194),B=t.t(D,2);let j=(0,D.forwardRef)((n,e)=>D.createElement("svg",{width:"1em",height:"1em",viewBox:"0 0 32 33",ref:e,...n},D.createElement("g",{fill:"currentColor"},D.createElement("path",{d:"M30.6651 25.8438L18.1666 4.71875C17.2097 3.09375 14.7949 3.09375 13.8316 4.71875L1.339 25.8438C0.37744 27.4629 1.57508 29.5 3.50236 29.5H28.4993C30.4189 29.5 31.6202 27.4688 30.6651 25.8438ZM14.5922 11.3929C14.5922 10.6239 15.2221 10 15.9985 10C16.7749 10 17.4048 10.6268 17.4048 11.3929V18.8214C17.4048 19.5904 16.7749 20.2143 16.0512 20.2143C15.3276 20.2143 14.5922 19.5933 14.5922 18.8214V11.3929ZM15.9985 25.7857C14.9813 25.7857 14.1563 24.9686 14.1563 23.9611C14.1563 22.9536 14.9807 22.1364 15.9985 22.1364C17.0163 22.1364 17.8408 22.9536 17.8408 23.9611C17.8384 24.9674 17.0181 25.7857 15.9985 25.7857Z"}))));var L=j,P=t(73804),T=t(31549),O=function(){var n=(0,C.useSnackbar)();return(0,T.jsxs)("div",{style:{display:"flex",gap:"1rem",flexWrap:"wrap"},children:[(0,T.jsx)(C.Button,{css:{width:"fit-content",marginBottom:"1rem"},onClick:function(){return n.show({type:"success",text:"Lorem ipsum dolor, sit amet consectetur Lorem ipsum  consectetur Lorem ipsum dolor, sit amet consectetur",prefixIcon:p||(p=(0,T.jsx)(L,{})),suffixIcon:h||(h=(0,T.jsx)(y.default,{})),autoClose:!1})},children:"Open snackbar"}),(0,T.jsx)(C.Button,{css:{width:"fit-content",marginBottom:"1rem"},onClick:function(){return n.show({text:"Lorem ipsum dolor, sit amet consectetur",autoClose:!1,prefixIcon:g||(g=(0,T.jsx)(L,{})),type:"success"})},children:"Without suffix icon"}),(0,T.jsx)(C.Button,{css:{width:"fit-content",marginBottom:"1rem"},onClick:function(){return n.show({text:"Lorem ipsum dolor, sit amet consectetur",autoClose:!1,suffixIcon:k||(k=(0,T.jsx)(y.default,{})),type:"success"})},children:"Without prefix icon"}),(0,T.jsx)(C.Button,{css:{width:"fit-content",marginBottom:"1rem"},onClick:function(){return n.show({text:"Lorem ipsum dolor, sit amet consectetur",autoClose:!1,type:"success",suffixIcon:!1})},children:"With text only"}),(0,T.jsx)(C.Button,{css:{width:"fit-content",marginBottom:"1rem"},onClick:function(){return n.show({text:"Lorem ipsum dolor, sit amet consectetur",suffixIcon:!1,type:"success",autoClose:3e3})},children:"Autoclose after 3000ms"}),(0,T.jsx)(C.Button,{css:{width:"fit-content",marginBottom:"1rem"},onClick:function(){return n.clearAll()},children:"Clear all snackbars"})]})},R=t(93279),W={en:{description:"Snackbars provide brief messages of a process that an app has performed or will perform at the bottom of the screen.",location:"/docs/data/components/snackbar/snackbar.md",rendered:['\n      <svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="copied-icon" viewBox="0 0 24 24">\n        <path d="M20 2H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-8.24 11.28L9.69 11.2c-.38-.39-.38-1.01 0-1.4.39-.39 1.02-.39 1.41 0l1.36 1.37 4.42-4.46c.39-.39 1.02-.39 1.41 0 .38.39.38 1.01 0 1.4l-5.13 5.17c-.37.4-1.01.4-1.4 0zM3 6c-.55 0-1 .45-1 1v13c0 1.1.9 2 2 2h13c.55 0 1-.45 1-1s-.45-1-1-1H5c-.55 0-1-.45-1-1V7c0-.55-.45-1-1-1z" />\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="copy-icon" viewBox="0 0 24 24">\n      <path d="M15 20H5V7c0-.55-.45-1-1-1s-1 .45-1 1v13c0 1.1.9 2 2 2h10c.55 0 1-.45 1-1s-.45-1-1-1zm5-4V4c0-1.1-.9-2-2-2H9c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h9c1.1 0 2-.9 2-2zm-2 0H9V4h9v12z" />\n      +</symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n    <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n      <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n    </symbol>\n    </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="comment-link-icon" viewBox="0 0 24 24">\n        <path d="M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM6 14v-2.47l6.88-6.88c.2-.2.51-.2.71 0l1.77 1.77c.2.2.2.51 0 .71L8.47 14H6zm12 0h-7.5l2-2H18v2z" />\n      </symbol>\n      </svg>','<h1>Snackbar</h1><p class="description">Snackbars provide brief messages of a process that an app has performed or will perform at the bottom of the screen.</p>\n\n',{component:"components/common/ComponentLinkHeader.tsx"},'<div class="cdg-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span>Snackbar<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@comfortdelgro/react-compass\'</span>\n</code></pre><button aria-label="Copy the code" class="cdg-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24"><use class="cdg-copy-icon" xlink:href="#copy-icon" /><use class="cdg-copied-icon" xlink:href="#copied-icon" /></svg><span class="cdg-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h2 id="examples">Examples<a aria-labelledby="examples" class="anchor-link" href="#examples" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><h3 id="default">Default<a aria-labelledby="default" class="anchor-link" href="#default" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3>',{demo:"SnackbarDefault.tsx"},'<h3 id="snackbar-as-a-service">Snackbar as a service<a aria-labelledby="snackbar-as-a-service" class="anchor-link" href="#snackbar-as-a-service" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><h4>Note: Snackbar As A Service has an API that makes it easy to display snackbars, without having to handle their open/close state.</h4><h4>Store multiple snackbars and display them in the same container.</h4>',{demo:"SnackbarAsService.tsx"},'<h2 id="props">Props<a aria-labelledby="props" class="anchor-link" href="#props" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><h3 id="snackbar-gt"><code>&lt;Snackbar/&gt;</code><a aria-labelledby="snackbar-gt" class="anchor-link" href="#snackbar-gt" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Type</th>\n<th align="left">Default</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left">type</td>\n<td align="left"><code>default</code> | <code>error</code> | <code>warning</code> | <code>success</code>| <code>reminder</code>| <code>ongoing</code></td>\n<td align="left">&#39;default&#39;</td>\n<td align="left">Variants</td>\n</tr>\n<tr>\n<td align="left">handleClose</td>\n<td align="left"><code>Function</code></td>\n<td align="left">-</td>\n<td align="left">Callback to close snackbar.</td>\n</tr>\n<tr>\n<td align="left">onClick</td>\n<td align="left"><code>Function</code></td>\n<td align="left">-</td>\n<td align="left">Callback fired on clicking the entire snackbar, including 2 paramerters: the event and the optional snackbar id.</td>\n</tr>\n<tr>\n<td align="left">isOpen</td>\n<td align="left"><code>boolean</code></td>\n<td align="left">false</td>\n<td align="left">The snackbar is visible when true.</td>\n</tr>\n<tr>\n<td align="left">autoClose</td>\n<td align="left"><code>false</code> | <code>number</code></td>\n<td align="left">false</td>\n<td align="left">Number of miliseconds to auto close.</td>\n</tr>\n<tr>\n<td align="left">css</td>\n<td align="left"><code>CSS</code></td>\n<td align="left">â€”</td>\n<td align="left">The system prop that allows defining system overrides as well as additional CSS styles.</td>\n</tr>\n<tr>\n<td align="left">portalTo</td>\n<td align="left"><code>HTMLElement</code></td>\n<td align="left">-</td>\n<td align="left">Using ReactPortals to create portal to an element, example document.body</td>\n</tr>\n</tbody></table>\n<h3 id="usesnackbar"><code>useSnackbar()</code><a aria-labelledby="usesnackbar" class="anchor-link" href="#usesnackbar" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><h5>Used for Children component located in Snackbar Context Provider to add/remove current Snackbar</h5><table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Type</th>\n<th align="left">Default</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left">show</td>\n<td align="left"><code>Function</code></td>\n<td align="left">-</td>\n<td align="left">Call to add snackbar to show in SnackbarContainer.</td>\n</tr>\n<tr>\n<td align="left">remove</td>\n<td align="left"><code>Function</code></td>\n<td align="left">-</td>\n<td align="left">Call to remove snackbar from SnackbarContext.</td>\n</tr>\n<tr>\n<td align="left">clearAll</td>\n<td align="left"><code>Function</code></td>\n<td align="left">â€”</td>\n<td align="left">Call to remove all snackbars from SnackbarContext.</td>\n</tr>\n</tbody></table>\n<h3 id="snackbarcontextprovider"><code>SnackbarContextProvider</code><a aria-labelledby="snackbarcontextprovider" class="anchor-link" href="#snackbarcontextprovider" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><h5>Store multiple snackbars and display them in the same container and handle snackbar&#39;s open/close state.</h5><table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Type</th>\n<th align="left">Default</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left">containerCSS</td>\n<td align="left"><code>CSS</code></td>\n<td align="left"><code>{}</code></td>\n<td align="left">Additional CSS to the snackbars container. It can be used to override the inset of the container in case you dont want the snackbars to cover any floating elements on the screen.</td>\n</tr>\n</tbody></table>\n'],toc:[{text:"Examples",level:2,hash:"examples",children:[{text:"Default",level:3,hash:"default"},{text:"Snackbar as a service",level:3,hash:"snackbar-as-a-service"}]},{text:"Props",level:2,hash:"props",children:[{text:"<code>&lt;Snackbar/&gt;</code>",level:3,hash:"snackbar-gt"},{text:"<code>useSnackbar(&#8203;)</code>",level:3,hash:"usesnackbar"},{text:"<code>SnackbarContextProvider</code>",level:3,hash:"snackbarcontextprovider"}]}],title:"React Page Snackbar component",headers:{title:"React Page Snackbar component",components:["Snackbar"],hooks:[]}}},A={"SnackbarDefault.tsx":{module:"./SnackbarDefault.tsx",raw:"import CloseIcon from '@comfortdelgro/compass-icons/react/cross'\nimport {Button, Dropdown, Icon, Snackbar} from '@comfortdelgro/react-compass'\nimport {faImage} from '@fortawesome/free-solid-svg-icons'\nimport React, {Key} from 'react'\nconst Default: React.FC = () => {\n  const [isDefaultOpen, setIsDefaultOpen] = React.useState(false)\n  const [type, setType] = React.useState<\n    'default' | 'error' | 'success' | 'warning' | 'reminder' | 'ongoing'\n  >('default')\n\n  return (\n    <div>\n      <h3>Default snackbar</h3>\n      <Dropdown.Select\n        isRequired\n        label='Please select type'\n        placeholder='Choose a type'\n        selectedKey={type}\n        onSelectionChange={(k: Key) =>\n          setType(\n            k as\n              | 'default'\n              | 'error'\n              | 'success'\n              | 'warning'\n              | 'reminder'\n              | 'ongoing',\n          )\n        }\n      >\n        <Dropdown.Item key='default'>Default</Dropdown.Item>\n        <Dropdown.Item key='error'>Error</Dropdown.Item>\n        <Dropdown.Item key='success'>Success</Dropdown.Item>\n        <Dropdown.Item key='warning'>Warning</Dropdown.Item>\n        <Dropdown.Item key='reminder'>Reminder</Dropdown.Item>\n        <Dropdown.Item key='ongoing'>Ongoing</Dropdown.Item>\n      </Dropdown.Select>\n      <br />\n      <Button\n        css={{width: '10rem', marginTop: '1rem'}}\n        onPress={() => setIsDefaultOpen(true)}\n      >\n        Open snackbar\n      </Button>\n      <Snackbar\n        isOpen={isDefaultOpen}\n        handleClose={() => setIsDefaultOpen(false)}\n        type={type}\n      >\n        <Snackbar.PrefixIcon>\n          <Icon icon={faImage} />\n        </Snackbar.PrefixIcon>\n        <Snackbar.Text>Text goes here</Snackbar.Text>\n        <Snackbar.SuffixIcon>\n          <CloseIcon />\n        </Snackbar.SuffixIcon>\n      </Snackbar>\n    </div>\n  )\n}\n\nexport default Default\n",moduleTS:"./SnackbarDefault.tsx",rawTS:"import CloseIcon from '@comfortdelgro/compass-icons/react/cross'\nimport {Button, Dropdown, Icon, Snackbar} from '@comfortdelgro/react-compass'\nimport {faImage} from '@fortawesome/free-solid-svg-icons'\nimport React, {Key} from 'react'\nconst Default: React.FC = () => {\n  const [isDefaultOpen, setIsDefaultOpen] = React.useState(false)\n  const [type, setType] = React.useState<\n    'default' | 'error' | 'success' | 'warning' | 'reminder' | 'ongoing'\n  >('default')\n\n  return (\n    <div>\n      <h3>Default snackbar</h3>\n      <Dropdown.Select\n        isRequired\n        label='Please select type'\n        placeholder='Choose a type'\n        selectedKey={type}\n        onSelectionChange={(k: Key) =>\n          setType(\n            k as\n              | 'default'\n              | 'error'\n              | 'success'\n              | 'warning'\n              | 'reminder'\n              | 'ongoing',\n          )\n        }\n      >\n        <Dropdown.Item key='default'>Default</Dropdown.Item>\n        <Dropdown.Item key='error'>Error</Dropdown.Item>\n        <Dropdown.Item key='success'>Success</Dropdown.Item>\n        <Dropdown.Item key='warning'>Warning</Dropdown.Item>\n        <Dropdown.Item key='reminder'>Reminder</Dropdown.Item>\n        <Dropdown.Item key='ongoing'>Ongoing</Dropdown.Item>\n      </Dropdown.Select>\n      <br />\n      <Button\n        css={{width: '10rem', marginTop: '1rem'}}\n        onPress={() => setIsDefaultOpen(true)}\n      >\n        Open snackbar\n      </Button>\n      <Snackbar\n        isOpen={isDefaultOpen}\n        handleClose={() => setIsDefaultOpen(false)}\n        type={type}\n      >\n        <Snackbar.PrefixIcon>\n          <Icon icon={faImage} />\n        </Snackbar.PrefixIcon>\n        <Snackbar.Text>Text goes here</Snackbar.Text>\n        <Snackbar.SuffixIcon>\n          <CloseIcon />\n        </Snackbar.SuffixIcon>\n      </Snackbar>\n    </div>\n  )\n}\n\nexport default Default\n"},"SnackbarAsService.tsx":{module:"./SnackbarAsService.tsx",raw:"import CloseIcon from '@comfortdelgro/compass-icons/react/cross'\nimport WarningIcon from '@comfortdelgro/compass-icons/react/warning-filled'\nimport {\n  Button,\n  SnackbarContextProvider,\n  useSnackbar,\n} from '@comfortdelgro/react-compass'\nimport React from 'react'\nconst SubService = () => {\n  const snackbar = useSnackbar()\n  return (\n    <div\n      style={{\n        display: 'flex',\n        gap: '1rem',\n        flexWrap: 'wrap',\n      }}\n    >\n      <Button\n        css={{width: 'fit-content', marginBottom: '1rem'}}\n        onClick={() =>\n          snackbar.show({\n            type: 'success',\n            text: 'Lorem ipsum dolor, sit amet consectetur Lorem ipsum  consectetur Lorem ipsum dolor, sit amet consectetur',\n            prefixIcon: <WarningIcon />,\n            suffixIcon: <CloseIcon />,\n            autoClose: false,\n          })\n        }\n      >\n        Open snackbar\n      </Button>\n      <Button\n        css={{width: 'fit-content', marginBottom: '1rem'}}\n        onClick={() =>\n          snackbar.show({\n            text: 'Lorem ipsum dolor, sit amet consectetur',\n            autoClose: false,\n            prefixIcon: <WarningIcon />,\n            type: 'success',\n          })\n        }\n      >\n        Without suffix icon\n      </Button>\n      <Button\n        css={{width: 'fit-content', marginBottom: '1rem'}}\n        onClick={() =>\n          snackbar.show({\n            text: 'Lorem ipsum dolor, sit amet consectetur',\n            autoClose: false,\n            suffixIcon: <CloseIcon />,\n            type: 'success',\n          })\n        }\n      >\n        Without prefix icon\n      </Button>\n      <Button\n        css={{width: 'fit-content', marginBottom: '1rem'}}\n        onClick={() =>\n          snackbar.show({\n            text: 'Lorem ipsum dolor, sit amet consectetur',\n            autoClose: false,\n            type: 'success',\n            suffixIcon: false,\n          })\n        }\n      >\n        With text only\n      </Button>\n      <Button\n        css={{width: 'fit-content', marginBottom: '1rem'}}\n        onClick={() =>\n          snackbar.show({\n            text: 'Lorem ipsum dolor, sit amet consectetur',\n            suffixIcon: false,\n            type: 'success',\n            autoClose: 3000,\n          })\n        }\n      >\n        Autoclose after 3000ms\n      </Button>\n      <Button\n        css={{width: 'fit-content', marginBottom: '1rem'}}\n        onClick={() => snackbar.clearAll()}\n      >\n        Clear all snackbars\n      </Button>\n    </div>\n  )\n}\n\nconst SnackbarAsService: React.FC = () => {\n  return (\n    <div>\n      <h3>Snackbar as a service</h3>\n\n      <SnackbarContextProvider>\n        <>\n          <SubService />\n        </>\n      </SnackbarContextProvider>\n    </div>\n  )\n}\nexport default SnackbarAsService\n",moduleTS:"./SnackbarAsService.tsx",rawTS:"import CloseIcon from '@comfortdelgro/compass-icons/react/cross'\nimport WarningIcon from '@comfortdelgro/compass-icons/react/warning-filled'\nimport {\n  Button,\n  SnackbarContextProvider,\n  useSnackbar,\n} from '@comfortdelgro/react-compass'\nimport React from 'react'\nconst SubService = () => {\n  const snackbar = useSnackbar()\n  return (\n    <div\n      style={{\n        display: 'flex',\n        gap: '1rem',\n        flexWrap: 'wrap',\n      }}\n    >\n      <Button\n        css={{width: 'fit-content', marginBottom: '1rem'}}\n        onClick={() =>\n          snackbar.show({\n            type: 'success',\n            text: 'Lorem ipsum dolor, sit amet consectetur Lorem ipsum  consectetur Lorem ipsum dolor, sit amet consectetur',\n            prefixIcon: <WarningIcon />,\n            suffixIcon: <CloseIcon />,\n            autoClose: false,\n          })\n        }\n      >\n        Open snackbar\n      </Button>\n      <Button\n        css={{width: 'fit-content', marginBottom: '1rem'}}\n        onClick={() =>\n          snackbar.show({\n            text: 'Lorem ipsum dolor, sit amet consectetur',\n            autoClose: false,\n            prefixIcon: <WarningIcon />,\n            type: 'success',\n          })\n        }\n      >\n        Without suffix icon\n      </Button>\n      <Button\n        css={{width: 'fit-content', marginBottom: '1rem'}}\n        onClick={() =>\n          snackbar.show({\n            text: 'Lorem ipsum dolor, sit amet consectetur',\n            autoClose: false,\n            suffixIcon: <CloseIcon />,\n            type: 'success',\n          })\n        }\n      >\n        Without prefix icon\n      </Button>\n      <Button\n        css={{width: 'fit-content', marginBottom: '1rem'}}\n        onClick={() =>\n          snackbar.show({\n            text: 'Lorem ipsum dolor, sit amet consectetur',\n            autoClose: false,\n            type: 'success',\n            suffixIcon: false,\n          })\n        }\n      >\n        With text only\n      </Button>\n      <Button\n        css={{width: 'fit-content', marginBottom: '1rem'}}\n        onClick={() =>\n          snackbar.show({\n            text: 'Lorem ipsum dolor, sit amet consectetur',\n            suffixIcon: false,\n            type: 'success',\n            autoClose: 3000,\n          })\n        }\n      >\n        Autoclose after 3000ms\n      </Button>\n      <Button\n        css={{width: 'fit-content', marginBottom: '1rem'}}\n        onClick={() => snackbar.clearAll()}\n      >\n        Clear all snackbars\n      </Button>\n    </div>\n  )\n}\n\nconst SnackbarAsService: React.FC = () => {\n  return (\n    <div>\n      <h3>Snackbar as a service</h3>\n\n      <SnackbarContextProvider>\n        <>\n          <SubService />\n        </>\n      </SnackbarContextProvider>\n    </div>\n  )\n}\nexport default SnackbarAsService\n"}};A.scope={process:{},import:{"@comfortdelgro/compass-icons/react/cross":y,"@comfortdelgro/react-compass":C,"@fortawesome/free-solid-svg-icons":I,react:B,"@comfortdelgro/compass-icons/react/warning-filled":x}};var E={"./SnackbarDefault.tsx":function(){var n=D.useState(!1),e=(0,P.Z)(n,2),t=e[0],p=e[1],h=D.useState("default"),g=(0,P.Z)(h,2),k=g[0],b=g[1];return(0,T.jsxs)("div",{children:[o||(o=(0,T.jsx)("h3",{children:"Default snackbar"})),(0,T.jsxs)(C.Dropdown.Select,{isRequired:!0,label:"Please select type",placeholder:"Choose a type",selectedKey:k,onSelectionChange:function(n){return b(n)},children:[a||(a=(0,T.jsx)(C.Dropdown.Item,{children:"Default"},"default")),r||(r=(0,T.jsx)(C.Dropdown.Item,{children:"Error"},"error")),s||(s=(0,T.jsx)(C.Dropdown.Item,{children:"Success"},"success")),c||(c=(0,T.jsx)(C.Dropdown.Item,{children:"Warning"},"warning")),i||(i=(0,T.jsx)(C.Dropdown.Item,{children:"Reminder"},"reminder")),l||(l=(0,T.jsx)(C.Dropdown.Item,{children:"Ongoing"},"ongoing"))]}),d||(d=(0,T.jsx)("br",{})),(0,T.jsx)(C.Button,{css:{width:"10rem",marginTop:"1rem"},onPress:function(){return p(!0)},children:"Open snackbar"}),(0,T.jsxs)(C.Snackbar,{isOpen:t,handleClose:function(){return p(!1)},type:k,children:[m||(m=(0,T.jsx)(C.Snackbar.PrefixIcon,{children:(0,T.jsx)(C.Icon,{icon:I.faImage})})),u||(u=(0,T.jsx)(C.Snackbar.Text,{children:"Text goes here"})),f||(f=(0,T.jsx)(C.Snackbar.SuffixIcon,{children:(0,T.jsx)(y.default,{})}))]})]})},"./SnackbarAsService.tsx":function(){return b||(b=(0,T.jsxs)("div",{children:[(0,T.jsx)("h3",{children:"Snackbar as a service"}),(0,T.jsx)(C.SnackbarContextProvider,{children:(0,T.jsx)(T.Fragment,{children:(0,T.jsx)(O,{})})})]}))}},H={"components/common/ComponentLinkHeader.tsx":R.Z};function _(){return(0,T.jsx)(v.Z,(0,S.Z)({},w))}},80562:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/snackbar",function(){return t(91474)}])},49336:function(n,e,t){"use strict";t.r(e);var o=t(44194);let a=(0,o.forwardRef)((n,e)=>o.createElement("svg",{width:"1em",height:"1em",viewBox:"0 0 32 32",ref:e,...n},o.createElement("g",{fill:"currentColor"},o.createElement("path",{d:"M30.1165 25.8816C31.2883 27.0534 31.2883 28.9517 30.1165 30.1235C29.5353 30.7094 28.7666 31 27.9979 31C27.2292 31 26.4624 30.7071 25.8774 30.1212L15.9988 20.2477L6.12116 30.1188C5.53527 30.7094 4.76752 31 3.99977 31C3.23201 31 2.4652 30.7094 1.87884 30.1188C0.707054 28.947 0.707054 27.0487 1.87884 25.877L11.7593 15.9965L1.87884 6.12069C0.707054 4.94891 0.707054 3.05062 1.87884 1.87884C3.05062 0.707054 4.94891 0.707054 6.12069 1.87884L15.9988 11.764L25.8793 1.88353C27.0511 0.711742 28.9494 0.711742 30.1212 1.88353C31.2929 3.05531 31.2929 4.9536 30.1212 6.12538L20.2407 16.0059L30.1165 25.8816Z"}))));e.default=a}},function(n){n.O(0,[4308,9813,5675,3866,9774,2888,179],function(){return n(n.s=80562)}),_N_E=n.O()}]);