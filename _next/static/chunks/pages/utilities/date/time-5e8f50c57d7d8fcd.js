(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2418],{20241:function(n,s,a){"use strict";a.d(s,{Z:function(){return l}});var e,t,o=a(38443),c=a(66481),p=a.n(c),i=a(97458);function l(){return(0,i.jsxs)(o.Flexbox,{css:{marginBottom:"$4"},children:[(0,i.jsx)(p(),{href:"https://github.com/comfortdelgro/compass-design",target:"_blank",style:{textDecoration:"none"},children:e||(e=(0,i.jsx)(o.Badge,{label:"Github",color:"info",variant:"outline"}))}),(0,i.jsx)(p(),{href:"https://www.figma.com/file/JSiK3cmMmxTt8qhR3dty8t/Workbench-Design-System?type=design&node-id=502-54719&mode=design&t=a4SJbARIttEHmcZS-0",target:"_blank",style:{textDecoration:"none"},children:t||(t=(0,i.jsx)(o.Badge,{label:"Figma",color:"danger",variant:"outline"}))})]})}},75235:function(n,s,a){"use strict";a.r(s),a.d(s,{default:function(){return d}});var e={};a.r(e),a.d(e,{demoComponents:function(){return l},demos:function(){return i},docs:function(){return p},srcComponents:function(){return r}});var t=a(23577),o=a(73440),c=a(20241),p={en:{description:"A Time represents a clock time without any date components.",location:"/docs/data/utilities/date/time.md",rendered:['\n      <svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="copied-icon" viewBox="0 0 24 24">\n        <path d="M20 2H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-8.24 11.28L9.69 11.2c-.38-.39-.38-1.01 0-1.4.39-.39 1.02-.39 1.41 0l1.36 1.37 4.42-4.46c.39-.39 1.02-.39 1.41 0 .38.39.38 1.01 0 1.4l-5.13 5.17c-.37.4-1.01.4-1.4 0zM3 6c-.55 0-1 .45-1 1v13c0 1.1.9 2 2 2h13c.55 0 1-.45 1-1s-.45-1-1-1H5c-.55 0-1-.45-1-1V7c0-.55-.45-1-1-1z" />\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="copy-icon" viewBox="0 0 24 24">\n      <path d="M15 20H5V7c0-.55-.45-1-1-1s-1 .45-1 1v13c0 1.1.9 2 2 2h10c.55 0 1-.45 1-1s-.45-1-1-1zm5-4V4c0-1.1-.9-2-2-2H9c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h9c1.1 0 2-.9 2-2zm-2 0H9V4h9v12z" />\n      +</symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n    <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n      <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n    </symbol>\n    </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="comment-link-icon" viewBox="0 0 24 24">\n        <path d="M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM6 14v-2.47l6.88-6.88c.2-.2.51-.2.71 0l1.77 1.77c.2.2.2.51 0 .71L8.47 14H6zm12 0h-7.5l2-2H18v2z" />\n      </symbol>\n      </svg>','<h1>Time</h1><p class="description">A Time represents a clock time without any date components.</p>\n\n',{component:"components/common/ComponentLinkHeader.tsx"},'<h2 id="introduction">Introduction<a aria-labelledby="introduction" class="anchor-link" href="#introduction" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>A <code>Time</code> object represents a clock time without any date components. If you need to refer to a time on a specific date, use a <a href="CalendarDateTime.html" >CalendarDateTime</a> or <a href="ZonedDateTime.html" >ZonedDateTime</a> instead.</p>\n<p>A <code>Time</code> can be created using the constructor. This example creates a time that represents 9:45 AM.</p>\n<div class="cdg-root"><pre><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">{</span>Time<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@comfortdelgro/react-compass\'</span>\n\n<span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Time</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span>\n</code></pre><button aria-label="Copy the code" class="cdg-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24"><use class="cdg-copy-icon" xlink:href="#copy-icon" /><use class="cdg-copied-icon" xlink:href="#copied-icon" /></svg><span class="cdg-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>You can also create a <code>Time</code> by parsing an <a href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank" rel="noopener nofollow">ISO 8601</a> formatted string using the <TypeLink links={docs.links} type={docs.exports.parseTime} /> function.</p>\n<div class="cdg-root"><pre><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">{</span>parseTime<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@comfortdelgro/react-compass\'</span>\n\n<span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token function">parseTime</span><span class="token punctuation">(</span><span class="token string">\'09:45\'</span><span class="token punctuation">)</span>\n</code></pre><button aria-label="Copy the code" class="cdg-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24"><use class="cdg-copy-icon" xlink:href="#copy-icon" /><use class="cdg-copied-icon" xlink:href="#copied-icon" /></svg><span class="cdg-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>Once you have a <code>Time</code> object, you can read its properties, or manipulate it as described in the <a href="#manipulating-times" >Manipulating times</a> section below. You can also convert it to an ISO 8601 string, or another representation. See the <a href="#conversion" >Conversion</a> section below for details.</p>\n<div class="cdg-root"><pre><code class="language-tsx"><span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Time</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span>\ntime<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// \'09:45:00\'</span>\n</code></pre><button aria-label="Copy the code" class="cdg-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24"><use class="cdg-copy-icon" xlink:href="#copy-icon" /><use class="cdg-copied-icon" xlink:href="#copied-icon" /></svg><span class="cdg-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h2 id="properties-amp-methods">Properties &amp; Methods<a aria-labelledby="properties-amp-methods" class="anchor-link" href="#properties-amp-methods" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Type</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left">hour</td>\n<td align="left"><code>number</code></td>\n<td align="left">The hour, numbered from 0 to 23.</td>\n</tr>\n<tr>\n<td align="left"></td>\n<td align="left"></td>\n<td align="left"></td>\n</tr>\n<tr>\n<td align="left">minute</td>\n<td align="left"><code>number</code></td>\n<td align="left">The minute in the hour.</td>\n</tr>\n<tr>\n<td align="left"></td>\n<td align="left"></td>\n<td align="left"></td>\n</tr>\n<tr>\n<td align="left">second</td>\n<td align="left"><code>number</code></td>\n<td align="left">The second in the minute.</td>\n</tr>\n<tr>\n<td align="left"></td>\n<td align="left"></td>\n<td align="left"></td>\n</tr>\n<tr>\n<td align="left">millisecond</td>\n<td align="left"><code>number</code></td>\n<td align="left">The millisecond in the second.</td>\n</tr>\n<tr>\n<td align="left">constructor</td>\n<td align="left"><code>( hour: number, minute: number, second: number, millisecond: number ): void</code></td>\n<td align="left"></td>\n</tr>\n<tr>\n<td align="left">copy</td>\n<td align="left"><code>(): Time</code></td>\n<td align="left">Returns a copy of this time.</td>\n</tr>\n<tr>\n<td align="left">add</td>\n<td align="left"><code>(duration: TimeDuration): void	</code></td>\n<td align="left">Returns a new Time with the given duration added to it.</td>\n</tr>\n<tr>\n<td align="left">subtract</td>\n<td align="left"><code>(duration: TimeDuration): void</code></td>\n<td align="left">Returns a new Time with the given duration subtracted from it.</td>\n</tr>\n<tr>\n<td align="left">set</td>\n<td align="left"><code>(fields: TimeFields): void</code></td>\n<td align="left">Returns a new Time with the given fields set to the provided values. Other fields will be constrained accordingly.</td>\n</tr>\n<tr>\n<td align="left">cycle</td>\n<td align="left"><code>( field: TimeField, amount: number, options?: CycleTimeOptions ): void</code></td>\n<td align="left">Returns a new Time with the given field adjusted by a specified amount. When the resulting value reaches the limits of the field, it wraps around.</td>\n</tr>\n<tr>\n<td align="left">toString</td>\n<td align="left"><code>(): void</code></td>\n<td align="left">Converts the time to an ISO 8601 formatted string.</td>\n</tr>\n<tr>\n<td align="left">compare</td>\n<td align="left"><code>(b: AnyTime): void</code></td>\n<td align="left">Compares this time with another. A negative result indicates that this time is before the given one, and a positive time indicates that it is after.</td>\n</tr>\n<tr>\n<td align="left"></td>\n<td align="left"></td>\n<td align="left"></td>\n</tr>\n</tbody></table>\n<h2 id="manipulating-times">Manipulating times<a aria-labelledby="manipulating-times" class="anchor-link" href="#manipulating-times" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><h3 id="adding-and-subtracting-durations">Adding and subtracting durations<a aria-labelledby="adding-and-subtracting-durations" class="anchor-link" href="#adding-and-subtracting-durations" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>A <code>TimeDuration</code> is an object that represents an amount of time, with fields such as <code>hours</code>, <code>minutes</code>, and <code>seconds</code>. The <code>add</code> and <code>subtract</code> methods of <code>Time</code> objects can be used to adjust the time by the given duration. These methods return a new time, and do not mutate the original.</p>\n<div class="cdg-root"><pre><code class="language-tsx"><span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Time</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span>\ntime<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>hours<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 10:45:00</span>\ntime<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>minutes<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 09:46:00</span>\ntime<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>seconds<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 09:45:01</span>\n</code></pre><button aria-label="Copy the code" class="cdg-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24"><use class="cdg-copy-icon" xlink:href="#copy-icon" /><use class="cdg-copied-icon" xlink:href="#copied-icon" /></svg><span class="cdg-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>Adding or subtracting a duration that goes beyond the limits of a particular field will cause the time to be <em>balanced</em>. For example, adding one minute to <code>09:59</code> results in <code>10:00</code>.</p>\n<h3 id="parsing-durations">Parsing durations<a aria-labelledby="parsing-durations" class="anchor-link" href="#parsing-durations" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>The <code>parseDuration</code> function can be used to convert a <a href="https://en.wikipedia.org/wiki/ISO_8601#Durations" target="_blank" rel="noopener nofollow">ISO 8601 duration string</a> into a <code>DateTimeDuration</code> object. The smallest time unit may include decimal values written with a comma or period, and negative values can be written by prefixing the entire string with a minus sign.</p>\n<div class="cdg-root"><pre><code class="language-tsx"><span class="token function">parseDuration</span><span class="token punctuation">(</span><span class="token string">\'PT20H35M15S\'</span><span class="token punctuation">)</span>\n<span class="token comment">// => {hours: 20, minutes: 35, seconds: 15}</span>\n\n<span class="token function">parseDuration</span><span class="token punctuation">(</span><span class="token string">\'-PT20H35M15S\'</span><span class="token punctuation">)</span>\n<span class="token comment">// =>  {hours: -20, minutes: -35, seconds: -15}</span>\n\n<span class="token function">parseDuration</span><span class="token punctuation">(</span><span class="token string">\'PT20H35M15,75S\'</span><span class="token punctuation">)</span>\n<span class="token comment">// => {hours: 20, minutes: 35, seconds: 15.75}</span>\n</code></pre><button aria-label="Copy the code" class="cdg-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24"><use class="cdg-copy-icon" xlink:href="#copy-icon" /><use class="cdg-copied-icon" xlink:href="#copied-icon" /></svg><span class="cdg-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h3 id="setting-fields">Setting fields<a aria-labelledby="setting-fields" class="anchor-link" href="#setting-fields" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p><code>Time</code> objects are immutable, which means their properties cannot be set directly. Instead, use the <code>set</code> method, and pass the fields to be modified. This will return a new <code>Time</code> with the updated values.</p>\n<div class="cdg-root"><pre><code class="language-tsx"><span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Time</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span>\ntime<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span>hour<span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 12:45</span>\ntime<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span>minute<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 9:05</span>\n</code></pre><button aria-label="Copy the code" class="cdg-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24"><use class="cdg-copy-icon" xlink:href="#copy-icon" /><use class="cdg-copied-icon" xlink:href="#copied-icon" /></svg><span class="cdg-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>Setting a field to a value that is outside the valid range will cause it to be <em>constrained</em>.</p>\n<div class="cdg-root"><pre><code class="language-tsx"><span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Time</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span>\ntime<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span>hour<span class="token operator">:</span> <span class="token number">36</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 23:45</span>\ntime<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span>minute<span class="token operator">:</span> <span class="token number">75</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 09:59</span>\n</code></pre><button aria-label="Copy the code" class="cdg-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24"><use class="cdg-copy-icon" xlink:href="#copy-icon" /><use class="cdg-copied-icon" xlink:href="#copied-icon" /></svg><span class="cdg-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h3 id="cycling-fields">Cycling fields<a aria-labelledby="cycling-fields" class="anchor-link" href="#cycling-fields" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>The <code>cycle</code> method allows incrementing or decrementing a single field. It is similar to the <code>add</code> and <code>subtract</code> methods, but when the value reaches the minimum or maximum, it wraps around rather than affecting other fields.</p>\n<div class="cdg-root"><pre><code class="language-tsx"><span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Time</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">)</span>\ntime<span class="token punctuation">.</span><span class="token function">cycle</span><span class="token punctuation">(</span><span class="token string">\'hour\'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 00:59</span>\ntime<span class="token punctuation">.</span><span class="token function">cycle</span><span class="token punctuation">(</span><span class="token string">\'minute\'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 23:00</span>\n\n<span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\ntime<span class="token punctuation">.</span><span class="token function">cycle</span><span class="token punctuation">(</span><span class="token string">\'hour\'</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 23:00</span>\ntime<span class="token punctuation">.</span><span class="token function">cycle</span><span class="token punctuation">(</span><span class="token string">\'minute\'</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 00:59</span>\n</code></pre><button aria-label="Copy the code" class="cdg-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24"><use class="cdg-copy-icon" xlink:href="#copy-icon" /><use class="cdg-copied-icon" xlink:href="#copied-icon" /></svg><span class="cdg-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>The <code>round</code> option may also be passed, which causes the value to be rounded to increments of the given amount. For example, you could round the minute to increments of 15.</p>\n<div class="cdg-root"><pre><code class="language-tsx"><span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Time</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span>\n\ntime<span class="token punctuation">.</span><span class="token function">cycle</span><span class="token punctuation">(</span><span class="token string">\'minute\'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token comment">// 09:37</span>\ntime<span class="token punctuation">.</span><span class="token function">cycle</span><span class="token punctuation">(</span><span class="token string">\'minute\'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>round<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 09:30</span>\n\ntime<span class="token punctuation">.</span><span class="token function">cycle</span><span class="token punctuation">(</span><span class="token string">\'minute\'</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token comment">// 09:07</span>\ntime<span class="token punctuation">.</span><span class="token function">cycle</span><span class="token punctuation">(</span><span class="token string">\'minute\'</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>round<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 09:15</span>\n</code></pre><button aria-label="Copy the code" class="cdg-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24"><use class="cdg-copy-icon" xlink:href="#copy-icon" /><use class="cdg-copied-icon" xlink:href="#copied-icon" /></svg><span class="cdg-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>By default, the <code>hour</code> field is cycled within a 24 hour range. The <code>hourCycle</code> option can be set to <code>12</code> to use a 12 hour clock instead, which will preserve the AM/PM value when formatted.</p>\n<div class="cdg-root"><pre><code class="language-tsx"><span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Time</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>\ntime<span class="token punctuation">.</span><span class="token function">cycle</span><span class="token punctuation">(</span><span class="token string">\'hour\'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 12:00</span>\ntime<span class="token punctuation">.</span><span class="token function">cycle</span><span class="token punctuation">(</span><span class="token string">\'hour\'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>hourCycle<span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 00:00</span>\n\n<span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Time</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span>\ntime<span class="token punctuation">.</span><span class="token function">cycle</span><span class="token punctuation">(</span><span class="token string">\'hour\'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 00:00</span>\ntime<span class="token punctuation">.</span><span class="token function">cycle</span><span class="token punctuation">(</span><span class="token string">\'hour\'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>hourCycle<span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 12:00</span>\n</code></pre><button aria-label="Copy the code" class="cdg-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24"><use class="cdg-copy-icon" xlink:href="#copy-icon" /><use class="cdg-copied-icon" xlink:href="#copied-icon" /></svg><span class="cdg-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h2 id="conversion">Conversion<a aria-labelledby="conversion" class="anchor-link" href="#conversion" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><h3 id="to-a-string">To a string<a aria-labelledby="to-a-string" class="anchor-link" href="#to-a-string" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p><code>Time</code> objects can be converted to an <a href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank" rel="noopener nofollow">ISO 8601</a> formatted string using the <code>toString</code> method.</p>\n<div class="cdg-root"><pre><code class="language-tsx"><span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Time</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span>\ndate<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// \'09:45:00\'</span>\n</code></pre><button aria-label="Copy the code" class="cdg-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24"><use class="cdg-copy-icon" xlink:href="#copy-icon" /><use class="cdg-copied-icon" xlink:href="#copied-icon" /></svg><span class="cdg-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h3 id="to-a-date-and-time">To a date and time<a aria-labelledby="to-a-date-and-time" class="anchor-link" href="#to-a-date-and-time" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>A <code>Time</code> can be combined with a <code>CalendarDate</code> to produce a <code>CalendarDateTime</code> object using the <code>toCalendarDateTime</code> function.</p>\n<div class="cdg-root"><pre><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">{</span>CalendarDate<span class="token punctuation">,</span> toCalendarDateTime<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@comfortdelgro/react-compass\'</span>\n\n<span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CalendarDate</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>\n<span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Time</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>\n\n<span class="token function">toCalendarDateTime</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> time<span class="token punctuation">)</span> <span class="token comment">// 2022-02-03T08:30:00</span>\n</code></pre><button aria-label="Copy the code" class="cdg-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24"><use class="cdg-copy-icon" xlink:href="#copy-icon" /><use class="cdg-copied-icon" xlink:href="#copied-icon" /></svg><span class="cdg-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>A <code>CalendarDateTime</code> represents a date with a time, but not in any specific time zone. Use this type to represent times that occur at the same local time regardless of the time zone, such as the time of New Years Eve fireworks which always occur at midnight. Most times are better stored as a <code>ZonedDateTime</code>, which represents a date with a time in a specific time zone. Use this type to represent an exact moment in time at a particular location on Earth.</p>\n<p>The <code>toZoned</code> function can be used to convert a <code>CalendarDateTime</code> to a <code>ZonedDateTime</code>.</p>\n<div class="cdg-root"><pre><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">{</span>\n  CalendarDate<span class="token punctuation">,</span>\n  toCalendarDateTime<span class="token punctuation">,</span>\n  toZoned<span class="token punctuation">,</span>\n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@comfortdelgro/react-compass\'</span>\n\n<span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CalendarDate</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>\n<span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Time</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>\n\n<span class="token keyword">let</span> dateTime <span class="token operator">=</span> <span class="token function">toCalendarDateTime</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> time<span class="token punctuation">)</span> <span class="token comment">// 2022-02-03T08:30:00</span>\n<span class="token function">toZoned</span><span class="token punctuation">(</span>dateTime<span class="token punctuation">,</span> <span class="token string">\'America/Los_Angeles\'</span><span class="token punctuation">)</span> <span class="token comment">// 2021-02-03T08:30-07:00[America/Los_Angeles]</span>\n</code></pre><button aria-label="Copy the code" class="cdg-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24"><use class="cdg-copy-icon" xlink:href="#copy-icon" /><use class="cdg-copied-icon" xlink:href="#copied-icon" /></svg><span class="cdg-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h2 id="queries">Queries<a aria-labelledby="queries" class="anchor-link" href="#queries" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><h3 id="comparison">Comparison<a aria-labelledby="comparison" class="anchor-link" href="#comparison" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p><code>Time</code> objects can be compared in order to determine which time is before or after another using the <code>compare</code> method. It returns a number less than zero if the first time is before the second, zero if the values are equal, or a number greater than zero if the first time is after the second.</p>\n<div class="cdg-root"><pre><code class="language-tsx"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Time</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Time</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>\n\na<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token comment">// true</span>\nb<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token comment">// true</span>\n</code></pre><button aria-label="Copy the code" class="cdg-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24"><use class="cdg-copy-icon" xlink:href="#copy-icon" /><use class="cdg-copied-icon" xlink:href="#copied-icon" /></svg><span class="cdg-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n'],toc:[{text:"Introduction",level:2,hash:"introduction",children:[]},{text:"Properties &amp; Methods",level:2,hash:"properties-amp-methods",children:[]},{text:"Manipulating times",level:2,hash:"manipulating-times",children:[{text:"Adding and subtracting durations",level:3,hash:"adding-and-subtracting-durations"},{text:"Parsing durations",level:3,hash:"parsing-durations"},{text:"Setting fields",level:3,hash:"setting-fields"},{text:"Cycling fields",level:3,hash:"cycling-fields"}]},{text:"Conversion",level:2,hash:"conversion",children:[{text:"To a string",level:3,hash:"to-a-string"},{text:"To a date and time",level:3,hash:"to-a-date-and-time"}]},{text:"Queries",level:2,hash:"queries",children:[{text:"Comparison",level:3,hash:"comparison"}]}],title:"Time",headers:{title:"Time",components:[],hooks:[]}}},i={};i.scope={process:{},import:{}};var l={},r={"components/common/ComponentLinkHeader.tsx":c.Z},u=a(97458);function d(){return(0,u.jsx)(o.Z,(0,t.Z)({},e))}},6311:function(n,s,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/utilities/date/time",function(){return a(75235)}])}},function(n){n.O(0,[4308,8332,1511,4591,3440,9774,2888,179],function(){return n(n.s=6311)}),_N_E=n.O()}]);