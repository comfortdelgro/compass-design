import React from '../../../../node_modules/.pnpm/react@18.3.1/node_modules/react';
import { CSS } from '../utils/objectToCss';
import MultipleDropdownItem from './multiple-dropdown-item';
import MultipleDropdownHeader from './multiple-dropdown.header';
import MultipleDropdownSection from './multiple-dropdown.section';
interface Props {
    erroredKeys?: Array<string | number>;
    selectedKeys?: Array<string | number>;
    defaultSelectedKeys?: Array<string | number>;
    erroredValues?: Array<string | number>;
    values?: Array<string | number>;
    defaultValues?: Array<string | number>;
    customDisplayValue?: React.ReactNode;
    displayedValue?: 'chip' | 'string';
    variant?: 'combobox' | 'select';
    label?: React.ReactNode;
    isOpen?: boolean;
    isLoading?: boolean;
    autoFocus?: boolean;
    isErrored?: boolean;
    helperText?: string;
    isDisabled?: boolean;
    isReadOnly?: boolean;
    isRequired?: boolean;
    placeholder?: string;
    errorMessage?: string;
    defaultOpen?: boolean;
    numberOfRows?: number;
    icon?: React.ReactNode;
    disabledKeys?: Array<string | number>;
    disabledValues?: Array<string | number>;
    disableClearable?: boolean;
    children?: React.ReactNode;
    description?: React.ReactNode;
    noDataMessage?: string;
    isLoadingMore?: boolean;
    popoverCSS?: React.CSSProperties;
    css?: CSS;
    isFloatingPortal?: boolean;
    onBlur?: () => void;
    onFocus?: () => void;
    onLoadMore?: () => void;
    onOpenChange?: (isOpen: boolean) => void;
    onSelectionChange?: (key: Array<string | number>) => void;
    onValuesChange?: (key: Array<string | number>) => void;
}
export type MultipleDropdownProps = Props & Omit<React.HTMLAttributes<HTMLDivElement>, keyof Props>;
export declare const Icon: () => JSX.Element;
declare const _default: React.ForwardRefExoticComponent<Props & Omit<React.HTMLAttributes<HTMLDivElement>, keyof Props> & React.RefAttributes<HTMLDivElement>> & {
    Item: typeof MultipleDropdownItem;
    Header: typeof MultipleDropdownHeader;
    Section: typeof MultipleDropdownSection;
};
export default _default;
