import React, { Key } from '../../../../node_modules/.pnpm/react@18.3.1/node_modules/react';
import { CSS } from '../utils/objectToCss';
interface Props {
    id?: string;
    inputType?: 'text' | 'numeric' | 'email' | 'password';
    options: DropdownOptions[];
    onChange?: (dropdownValue: string, inputValue: Key) => void;
    label: string;
    isErrored?: boolean;
    errorMessage?: string;
    isRequired?: boolean;
    isDisabled?: boolean;
    isReadOnly?: boolean;
    defaultSelectedKey?: string;
    defaultInputValue?: string | number;
    onChangeEvent?: (event: React.ChangeEvent<HTMLInputElement>) => void;
    onCopy?: React.ClipboardEventHandler<HTMLInputElement>;
    onCut?: React.ClipboardEventHandler<HTMLInputElement>;
    onPaste?: React.ClipboardEventHandler<HTMLInputElement>;
    onCompositionStart?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionEnd?: React.CompositionEventHandler<HTMLInputElement>;
    onCompositionUpdate?: React.CompositionEventHandler<HTMLInputElement>;
    onSelect?: React.ReactEventHandler<HTMLInputElement>;
    onBeforeInput?: React.FormEventHandler<HTMLInputElement>;
    onInput?: React.FormEventHandler<HTMLInputElement>;
    onFocus?: (e: React.FocusEvent<HTMLInputElement>) => void;
    onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void;
    onKeyDown?: (e: React.KeyboardEvent<HTMLInputElement>) => void;
    onKeyUp?: (e: React.KeyboardEvent<HTMLInputElement>) => void;
    textfieldPlaceholder?: string;
    dropdownPlaceholder?: string;
    autoFocus?: boolean;
    maxLength?: number;
    minLength?: number;
    'aria-activedescendant'?: string;
    'aria-autocomplete'?: 'none' | 'inline' | 'list' | 'both';
    'aria-haspopup'?: boolean | 'false' | 'true' | 'menu' | 'listbox' | 'tree' | 'grid' | 'dialog';
    'aria-controls'?: string;
    'aria-label'?: string;
    'aria-labelledby'?: string;
    'aria-describedby'?: string;
    'aria-details'?: string;
    'aria-errormessage'?: string;
    css?: CSS;
}
export type DropdownTextfieldProps = Props & Omit<React.HTMLAttributes<HTMLDivElement>, keyof Props>;
export type DropdownOptions = {
    value: string;
    icon: React.ReactNode | null;
    label: string;
};
declare const DropdownTextfield: React.ForwardRefExoticComponent<Props & Omit<React.HTMLAttributes<HTMLDivElement>, keyof Props> & React.RefAttributes<HTMLDivElement>>;
export default DropdownTextfield;
