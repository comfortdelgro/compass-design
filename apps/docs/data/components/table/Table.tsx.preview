
const TableFullFeature: React.FC = () => {
  const [page, setPage] = useState(1)
  const [data, setData] = React.useState(() => makeData(10))
  const options: TableOptions<Person> = {
    enableSorting: true,
    enableMultiSort: true,
    columnResizeMode: 'onChange',
    manualSorting: true,
    enableRowSelection: (row: any) => row.original.age > 30,
  }
  const onSorting = (sortingField: TableSortingState) => {}

  const TableHeader = ({table}: any) => {
    return (
      <Table.CheckboxCell
        {...{
          checked: table.getIsAllRowsSelected(),
          indeterminate: table.getIsSomeRowsSelected(),
          onChange: table.getToggleAllRowsSelectedHandler(),
        }}
      />
    )
  }

  const TableHeaderCell = ({row}: any) => {
    return (
      <div className='px-1'>
        <Table.CheckboxCell
          {...{
            disabled: !row.getCanSelect(),
            checked: row.getIsSelected(),
            indeterminate: row.getIsSomeSelected(),
            onChange: row.getToggleSelectedHandler(),
          }}
        />
      </div>
    )
  }

  const columns = React.useMemo<Array<TableColumnDef<Person>>>(
    () => [
      {
        id: 'select',
        header: ({table}) => <TableHeader table={table} />,
        cell: ({row}) => <TableHeaderCell row={row} />,
      },
      {
        id: 'name',
        header: () => <div style={{textAlign: 'center'}}>Name</div>,
        footer: (props: TableHeaderContext<Person, unknown>) => props.column.id,
        enableGrouping: false,
        columns: [
          {
            accessorKey: 'firstName',
            cell: (info: TableCellContext<Person, unknown>) =>
              info.getValue<string>(),
            header: () => <span>First Name</span>,
            footer: (props: TableHeaderContext<Person, unknown>) =>
              props.column.id,
            enableResizing: true,
            enableGrouping: false,
            sortDescriptor: 'asc',
            meta: {
              editable: true,
              updateData: (rowIndex: number, id: string, value: any) => {
                setData((old: Person[]) =>
                  old.map((row, index) => {
                    if (index === rowIndex) {
                      return {
                        ...old[rowIndex],
                        [id]: value,
                      } as Person
                    }
                    return row
                  }),
                )
              },
            },
          },
          {
            accessorFn: (row: Person) => row.lastName,
            id: 'lastName',
            cell: (info: TableCellContext<Person, unknown>) =>
              info.getValue<string>(),
            header: () => <span>Last Name</span>,
            footer: (props: TableHeaderContext<Person, unknown>) =>
              props.column.id,
            enableResizing: true,
          },
        ],
      },
      {
        id: 'otherInfo',
        header: () => <div style={{textAlign: 'center'}}>Other info</div>,
        footer: (props: TableHeaderContext<Person, unknown>) => props.column.id,
        enableGrouping: false,
        columns: [
          {
            accessorKey: 'age',
            header: () => 'Age',
            footer: (info: TableHeaderContext<Person, unknown>) =>
              info.column.id,
          },
          {
            accessorKey: 'visits',
            header: () => <span>Visits</span>,
            footer: (info: TableHeaderContext<Person, unknown>) =>
              info.column.id,
          },
          {
            accessorKey: 'status',
            header: 'Status',
            footer: (info: TableHeaderContext<Person, unknown>) =>
              info.column.id,
          },
          {
            accessorKey: 'progress',
            header: 'Profile Progress',
            cell: (info: TableCellContext<Person, unknown>) =>
              info.getValue<string>(),
            footer: (info: TableHeaderContext<Person, unknown>) =>
              info.column.id,
          },
        ],
      },
    ],
    [],
  )

  return (
    <div>
      <Table
        data={data}
        columns={columns}
        options={options}
        onManualSorting={onSorting}
      >
        <Table.Toolbar
          css={{
            display: 'flex',
            flexDirection: 'row',
            justifyContent: 'space-between',
          }}
        >
          <SearchField placeholder='Search' />

          <div
            style={{
              display: 'flex',
              flexDirection: 'row',
              alignItems: 'center',
              gap: '0.5rem',
            }}
          >
            <Button
              variant='primary'
              className='c-hKssGC-hYGuEl-variant-primary'
            >
              Button
            </Button>
            <Button variant='secondary'>Button</Button>
            <Button variant='ghost'>
              <Icon icon={faTrashAlt} />
            </Button>
            <Button variant='ghost'>
              <Icon icon={faDashboard} />
            </Button>
            <Button variant='ghost'>
              <Icon icon={faFileLines} />
            </Button>
          </div>
        </Table.Toolbar>
        <Table.Footer
          css={{
            display: 'flex',
            flexDirection: 'row',
            justifyContent: 'space-between',
          }}
        >
          <div>{/* Todo: Dropdown */}</div>
          <div
            style={{
              display: 'flex',
              flexDirection: 'row',
              alignItems: 'center',
              gap: '0.5rem',
            }}
          >
            <div
              style={{
                fontWeight: '600',
              }}
            >
              {(page - 1) * 10 + 1} - {(page - 1) * 10 + 10} of 100
            </div>
            <Pagination
              page={page}
              onChange={(page: number) => setPage(page)}
              total={10}
            />
          </div>
        </Table.Footer>
      </Table>
    </div>
  )
}