const ExpandableColumnTable: React.FC = () => {
  const [data, setData] = React.useState(() => makeRequestStatusData(10))
  const [page, setPage] = useState(1)
  const options: TableOptions<LimitRequestStatus> = {
    enableSorting: false,
    enableMultiSort: false,
    columnResizeMode: 'onChange',
    manualSorting: false,
  }

  const columns = React.useMemo<Array<TableColumnDef<LimitRequestStatus>>>(
    () => [
      {
        id: 'expander',
        size: 40,
        header: ({table}: TableHeaderContext<LimitRequestStatus, unknown>) => (
          <>
            <button
              {...{
                onClick: table.getToggleAllRowsExpandedHandler(),
              }}
            >
              {table.getIsAllRowsExpanded() ? (
                <Icon icon={faChevronDown} />
              ) : (
                <Icon icon={faChevronRight} />
              )}
            </button>{' '}
          </>
        ),
        cell: ({row}: TableCellContext<LimitRequestStatus, unknown>) => (
          <span
            onClick={() => row.toggleExpanded()}
            style={{
              cursor: 'pointer',
              userSelect: 'none',
              display: 'flex',
              justifyContent: 'center',
              alignItems: 'center',
            }}
          >
            {row.getIsExpanded() ? (
              <Icon icon={faChevronDown} />
            ) : (
              <Icon icon={faChevronRight} />
            )}
          </span>
        ),
      },
      {
        id: 'accountName',
        accessorKey: 'accountName',
        header: () => <div style={{textAlign: 'center'}}>Account Name</div>,
        footer: (props: TableHeaderContext<LimitRequestStatus, unknown>) =>
          props.column.id,
      },
      {
        id: 'code',
        accessorKey: 'code',
        header: () => <div style={{textAlign: 'center'}}>Code</div>,
        footer: (props: TableHeaderContext<LimitRequestStatus, unknown>) =>
          props.column.id,
      },
      {
        id: 'requestLimit',
        accessorKey: 'requestLimit',
        header: () => (
          <div style={{textAlign: 'center'}}>New Request Limit</div>
        ),
        footer: (props: TableHeaderContext<LimitRequestStatus, unknown>) =>
          props.column.id,
      },
      {
        id: 'status',
        accessorKey: 'status',
        header: () => <div style={{textAlign: 'center'}}>Status</div>,
        footer: (props: TableHeaderContext<LimitRequestStatus, unknown>) =>
          props.column.id,
      },
    ],
    [],
  )

  const renderRowSubComponent = (rowData: LimitRequestStatus) => {
    return (
      <div
        style={{
          padding: '1em',
          display: 'flex',
          flexDirection: 'column',
          rowGap: '1em',
        }}
      >
        <h3>Current Status: {rowData.status}</h3>
        <Divider />
        {rowData.progress?.map((processItem) => {
          return (
            <>
              <p style={{fontSize: '12px'}}>{processItem.remarks}</p>
              <p style={{fontSize: '11px', fontWeight: 200, color: '#878787'}}>
                {processItem.createdAt.toDateString()}
              </p>
              <Divider />
            </>
          )
        })}
      </div>
    )
  }

  return (
    <div>
      <Table
        data={data}
        columns={columns}
        options={options}
        renderRowSubComponent={renderRowSubComponent}
      >
        <Table.Footer
          css={{
            display: 'flex',
            flexDirection: 'row',
            justifyContent: 'space-between',
          }}
        >
          <div style={{display: 'flex', alignItems: 'center'}}>
            <span style={{width: 200}}>Rows per page: </span>
            <Dropdown.Select defaultSelectedKey='10'>
              <Dropdown.Item key='10'>10 rows</Dropdown.Item>
              <Dropdown.Item key='20'>20 rows</Dropdown.Item>
              <Dropdown.Item key='50'>50 rows</Dropdown.Item>
            </Dropdown.Select>
          </div>
          <div
            style={{
              display: 'flex',
              flexDirection: 'row',
              alignItems: 'center',
              gap: '0.5rem',
            }}
          >
            <div
              style={{
                fontWeight: '600',
              }}
            >
              {(page - 1) * 10 + 1} - {(page - 1) * 10 + 10} of 100
            </div>
            <Pagination
              page={page}
              onChange={(page: number) => setPage(page)}
              total={10}
            />
          </div>
        </Table.Footer>
      </Table>
    </div>
  )
}
