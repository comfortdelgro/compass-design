const columns = React.useMemo<Array<TableV2ColumnDef<Person>>>(
  () => [
    {
      id: 'select',
      header: ({table}) => {
        return (
          <div
            style={{
              display: 'flex',
              justifyContent: 'center',
              alignItems: 'center',
            }}
          >
            <ReactTable.CheckboxCell
              checked={table.getIsAllRowsSelected()}
              indeterminate={table.getIsSomeRowsSelected()}
              onChange={table.getToggleAllRowsSelectedHandler()}
            />
          </div>
        )
      },
      cell: ({row}) => (
        <div
          style={{
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
          }}
        >
          <ReactTable.CheckboxCell
            disabled={!row.getCanSelect()}
            checked={row.getIsSelected()}
            indeterminate={row.getIsSomeSelected()}
            onChange={row.getToggleSelectedHandler()}
          />
        </div>
      ),
    },
    {
      id: 'name',
      header: () => <div style={{textAlign: 'center'}}>Name</div>,
      footer: (props) => props.column.id,
      enableGrouping: false,
      columns: [
        {
          accessorKey: 'firstName',
          cell: (info) => info.getValue<string>(),
          header: () => <span>First Name</span>,
          footer: (props) => props.column.id,
          enableResizing: true,
          enableGrouping: false,
          sortDescriptor: 'asc',
          meta: {
            editable: true,
            updateData: (rowIndex: number, id: string, value: any) => {
              setData((old: Person[]) =>
                old.map((row, index) => {
                  if (index === rowIndex) {
                    return {
                      ...old[rowIndex],
                      [id]: value,
                    } as Person
                  }
                  return row
                }),
              )
            },
          },
        },
        {
          accessorFn: (row) => row.lastName,
          id: 'lastName',
          cell: (info) => info.getValue<string>(),
          header: () => <span>Last Name</span>,
          footer: (props) => props.column.id,
          enableResizing: true,
        },
      ],
    },
    {
      id: 'otherInfo',
      header: () => <div style={{textAlign: 'center'}}>Other info</div>,
      footer: (props) => props.column.id,
      enableGrouping: false,
      columns: [
        {
          accessorKey: 'age',
          header: () => 'Age',
          footer: (info) => info.column.id,
        },
        {
          accessorKey: 'visits',
          header: () => <span>Visits</span>,
          footer: (info) => info.column.id,
        },
        {
          accessorKey: 'status',
          header: 'Status',
          footer: (info) => info.column.id,
        },
        {
          accessorKey: 'progress',
          header: 'Profile Progress',
          cell: (info) => info.getValue<string>(),
          footer: (info) => info.column.id,
        },
      ],
    },
  ],
  [],
)

<ReactTable
  data={data}
  columns={columns}
  options={options}
  onManualSorting={onSorting}
>
  <ReactTable.Toolbar
    css={{
      display: 'flex',
      flexDirection: 'row',
      justifyContent: 'space-between',
    }}
  >
    <SearchField placeholder='Search' />

    <div
      style={{
        display: 'flex',
        flexDirection: 'row',
        alignItems: 'center',
        gap: '0.5rem',
      }}
    >
      <Button variant='primary' className='c-hKssGC-hYGuEl-variant-primary'>
        Button
      </Button>
      <Button variant='secondary'>Button</Button>
      <Button variant='ghost'>
        <Icon icon={faTrashAlt} />
      </Button>
      <Button variant='ghost'>
        <Icon icon={faDashboard} />
      </Button>
      <Button variant='ghost'>
        <Icon icon={faFileLines} />
      </Button>
    </div>
  </ReactTable.Toolbar>
  <ReactTable.Footer
    css={{
      display: 'flex',
      flexDirection: 'row',
      justifyContent: 'space-between',
    }}
  >
    <div>{/* Todo: Dropdown */}</div>
    <div
      style={{
        display: 'flex',
        flexDirection: 'row',
        alignItems: 'center',
        gap: '0.5rem',
      }}
    >
      <div
        style={{
          fontWeight: '600',
        }}
      >
        {(page - 1) * 10 + 1} - {(page - 1) * 10 + 10} of 100
      </div>
      <Pagination page={page} onChange={(page) => setPage(page)} total={10} />
    </div>
  </ReactTable.Footer>
</ReactTable>