{
  "componentDescription": "The foundation for building custom-styled switches.",
  "propDescriptions": {
    "checked": "If <code>true</code>, the component is checked.",
    "defaultChecked": "The default checked state. Use when the component is not controlled.",
    "disabled": "If <code>true</code>, the component is disabled.",
    "onChange": "Callback fired when the state is changed.<br><br><strong>Signature:</strong><br><code>function(event: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; void</code><br><em>event:</em> The event source of the callback. You can pull out the new value by accessing <code>event.target.value</code> (string). You can pull out the new checked state by accessing <code>event.target.checked</code> (boolean).",
    "readOnly": "If <code>true</code>, the component is read only.",
    "required": "If <code>true</code>, the <code>input</code> element is required.",
    "slotProps": "The props used for each slot inside the Switch.",
    "slots": "The components used for each slot inside the Switch. Either a string to use a HTML element or a component. See <a href=\"#slots\">Slots API</a> below for more details."
  },
  "classDescriptions": {
    "root": { "description": "Class applied to the root element." },
    "input": { "description": "Class applied to the internal input element" },
    "track": { "description": "Class applied to the track element" },
    "thumb": { "description": "Class applied to the thumb element" },
    "checked": {
      "description": "State class applied to the root element if the switch is checked"
    },
    "disabled": {
      "description": "State class applied to the root element if the switch is disabled"
    },
    "focusVisible": {
      "description": "State class applied to the root element if the switch has visible focus"
    },
    "readOnly": { "description": "Class applied to the root element if the switch is read-only" }
  },
  "slotDescriptions": {
    "root": "The component that renders the root.",
    "input": "The component that renders the input.",
    "thumb": "The component that renders the thumb.",
    "track": "The component that renders the track."
  }
}
