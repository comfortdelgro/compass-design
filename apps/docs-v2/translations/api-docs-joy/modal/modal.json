{
  "componentDescription": "",
  "propDescriptions": {
    "children": "A single child content element.<br>⚠️ <a href=\"/material-ui/guides/composition/#caveat-with-refs\">Needs to be able to hold a ref</a>.",
    "component": "The component used for the root node. Either a string to use a HTML element or a component.",
    "container": "An HTML element or function that returns one. The <code>container</code> will have the portal children appended to it.<br>By default, it uses the body of the top-level document object, so it&#39;s simply <code>document.body</code> most of the time.",
    "disableAutoFocus": "If <code>true</code>, the modal will not automatically shift focus to itself when it opens, and replace it to the last focused element when it closes. This also works correctly with any modal children that have the <code>disableAutoFocus</code> prop.<br>Generally this should never be set to <code>true</code> as it makes the modal less accessible to assistive technologies, like screen readers.",
    "disableEnforceFocus": "If <code>true</code>, the modal will not prevent focus from leaving the modal while open.<br>Generally this should never be set to <code>true</code> as it makes the modal less accessible to assistive technologies, like screen readers.",
    "disableEscapeKeyDown": "If <code>true</code>, hitting escape will not fire the <code>onClose</code> callback.",
    "disablePortal": "The <code>children</code> will be under the DOM hierarchy of the parent component.",
    "disableRestoreFocus": "If <code>true</code>, the modal will not restore focus to previously focused element once modal is hidden or unmounted.",
    "disableScrollLock": "Disable the scroll lock behavior.",
    "hideBackdrop": "If <code>true</code>, the backdrop is not rendered.",
    "keepMounted": "Always keep the children in the DOM. This prop can be useful in SEO situation or when you want to maximize the responsiveness of the Modal.",
    "onClose": "Callback fired when the component requests to be closed. The <code>reason</code> parameter can optionally be used to control the response to <code>onClose</code>.<br><br><strong>Signature:</strong><br><code>function(event: object, reason: string) =&gt; void</code><br><em>event:</em> The event source of the callback.<br><em>reason:</em> Can be: <code>&quot;escapeKeyDown&quot;</code>, <code>&quot;backdropClick&quot;</code>, <code>&quot;closeClick&quot;</code>.",
    "open": "If <code>true</code>, the component is shown.",
    "slotProps": "The props used for each slot inside.",
    "slots": "The components used for each slot inside. See <a href=\"#slots\">Slots API</a> below for more details.",
    "sx": "The system prop that allows defining system overrides as well as additional CSS styles. See the <a href=\"/system/getting-started/the-sx-prop/\">`sx` page</a> for more details."
  },
  "classDescriptions": {
    "root": { "description": "Class name applied to the root element." },
    "backdrop": {
      "description": "Class name applied to {{nodeName}}.",
      "nodeName": "the backdrop element"
    }
  },
  "slotDescriptions": {
    "root": "The component that renders the root.",
    "backdrop": "The component that renders the backdrop."
  }
}
