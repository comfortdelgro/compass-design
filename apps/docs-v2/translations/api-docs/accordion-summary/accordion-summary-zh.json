{
  "componentDescription": "",
  "propDescriptions": {
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "expandIcon": "The icon to display as the expand indicator.",
    "focusVisibleClassName": "This prop can help identify which element has keyboard focus. The class name will be applied when the element gains the focus through keyboard interaction. It&#39;s a polyfill for the <a href=\"https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo\">CSS :focus-visible selector</a>. The rationale for using this feature <a href=\"https://github.com/WICG/focus-visible/blob/HEAD/explainer.md\">is explained here</a>. A <a href=\"https://github.com/WICG/focus-visible\">polyfill can be used</a> to apply a <code>focus-visible</code> class to other components if needed.",
    "sx": "The system prop that allows defining system overrides as well as additional CSS styles. See the <a href=\"/system/getting-started/the-sx-prop/\">`sx` page</a> for more details."
  },
  "classDescriptions": {
    "root": {
      "description": "Styles applied to the root element."
    },
    "expanded": {
      "description": "Pseudo-class applied to {{nodeName}}, {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "children wrapper element and <code>IconButton</code> component if <code>expanded={true}</code>"
    },
    "focusVisible": {
      "description": "Pseudo-class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the ButtonBase root element",
      "conditions": "the button is keyboard focused"
    },
    "disabled": {
      "description": "Pseudo-class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>disabled={true}</code>"
    },
    "gutters": {
      "description": "Styles applied to {{nodeName}} unless {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>disableGutters={true}</code>"
    },
    "contentGutters": {
      "description": "Styles applied to {{nodeName}} unless {{conditions}}.",
      "nodeName": "the children wrapper element",
      "conditions": "<code>disableGutters={true}</code>"
    },
    "content": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the children wrapper element"
    },
    "expandIconWrapper": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the `expandIcon`'s wrapper element"
    }
  }
}
