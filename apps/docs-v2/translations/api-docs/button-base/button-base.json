{
  "componentDescription": "`ButtonBase` contains as few styles as possible.\nIt aims to be a simple building block for creating a button.\nIt contains a load of style reset and some focus/ripple logic.",
  "propDescriptions": {
    "action": "A ref for imperative actions. It currently only supports <code>focusVisible()</code> action.",
    "centerRipple": "If <code>true</code>, the ripples are centered. They won&#39;t start at the cursor interaction position.",
    "children": "The content of the component.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "component": "The component used for the root node. Either a string to use a HTML element or a component.<br>⚠️ <a href=\"/material-ui/guides/composition/#caveat-with-refs\">Needs to be able to hold a ref</a>.",
    "disabled": "If <code>true</code>, the component is disabled.",
    "disableRipple": "If <code>true</code>, the ripple effect is disabled.<br>⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure to highlight the element by applying separate styles with the <code>.Mui-focusVisible</code> class.",
    "disableTouchRipple": "If <code>true</code>, the touch ripple effect is disabled.",
    "focusRipple": "If <code>true</code>, the base button will have a keyboard focus ripple.",
    "focusVisibleClassName": "This prop can help identify which element has keyboard focus. The class name will be applied when the element gains the focus through keyboard interaction. It&#39;s a polyfill for the <a href=\"https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo\">CSS :focus-visible selector</a>. The rationale for using this feature <a href=\"https://github.com/WICG/focus-visible/blob/HEAD/explainer.md\">is explained here</a>. A <a href=\"https://github.com/WICG/focus-visible\">polyfill can be used</a> to apply a <code>focus-visible</code> class to other components if needed.",
    "LinkComponent": "The component used to render a link when the <code>href</code> prop is provided.",
    "onFocusVisible": "Callback fired when the component is focused with a keyboard. We trigger a <code>onFocus</code> callback too.",
    "sx": "The system prop that allows defining system overrides as well as additional CSS styles. See the <a href=\"/system/getting-started/the-sx-prop/\">`sx` page</a> for more details.",
    "TouchRippleProps": "Props applied to the <code>TouchRipple</code> element.",
    "touchRippleRef": "A ref that points to the <code>TouchRipple</code> element."
  },
  "classDescriptions": {
    "root": { "description": "Styles applied to the root element." },
    "disabled": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>disabled={true}</code>"
    },
    "focusVisible": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "keyboard focused"
    }
  }
}
