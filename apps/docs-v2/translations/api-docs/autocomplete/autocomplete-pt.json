{
  "componentDescription": "",
  "propDescriptions": {
    "autoComplete": "Se <code>true</code>, a porção da sugestão selecionada que não foi digitada pelo usuário, conhecida como a sequência de conclusão, aparece embutida após o cursor da entrada na caixa de texto. A sequência de conclusão é visualmente destacada e tem um estado selecionado.",
    "autoHighlight": "Se <code>true</code>, a primeira opção é destacada automaticamente.",
    "autoSelect": "Se <code>true</code>, a opção selecionada se torna o valor de entrada quando o Autocomplete perde o foco, a menos que o usuário escolha uma opção diferente ou mude um caractere da sequência na entrada.",
    "blurOnSelect": "Controle se a entrada deve ficar borrada quando uma opção é selecionada:<br>- <code>false</code> a entrada não é borrada. - <code>true</code> a entrada sempre é borrada. - <code>touch</code> a entrada é borrada após um evento de toque. - <code>mouse</code> a entrada é borrada após um evento de mouse.",
    "ChipProps": "Props applied to the <a href=\"/material-ui/api/chip/\"><code>Chip</code></a> element.",
    "classes": "Sobrescreve ou extende os estilos aplicados para o componente. Veja a <a href=\"#css\">API CSS</a> abaixo para maiores detalhes.",
    "clearIcon": "O ícone para exibir no lugar de um ícone de limpar padrão.",
    "clearOnBlur": "If <code>true</code>, the input&#39;s text is cleared on blur if no value is selected.<br>Set to <code>true</code> if you want to help the user enter a new value. Set to <code>false</code> if you want to help the user resume his search.",
    "clearOnEscape": "Se <code>true</code>, limpa todos os valores quando o usuário pressiona escape e o pop-up é fechado.",
    "clearText": "Override the default text for the <em>clear</em> icon button.<br>For localization purposes, you can use the provided <a href=\"/material-ui/guides/localization/\">translations</a>.",
    "closeText": "Override the default text for the <em>close popup</em> icon button.<br>For localization purposes, you can use the provided <a href=\"/material-ui/guides/localization/\">translations</a>.",
    "componentsProps": "As propriedades usadas para cada slot dentro.",
    "defaultValue": "The default input value. Use when the component is not controlled.",
    "disableClearable": "Se <code>true</code>, a entrada não pode ser limpa.",
    "disableCloseOnSelect": "Se <code>true</code>, o pop-up não fechará quando um valor é selecionado.",
    "disabled": "Se <code>true</code>, o componente está desabilitado.",
    "disabledItemsFocusable": "Se <code>true</code>, permitirá foco em itens desabilitados.",
    "disableListWrap": "Se <code>true</code>, a caixa de lista em um pop-up não irá envolver o foco.",
    "disablePortal": "Se <code>true</code>, o conteúdo de <code>Popper</code> estará abaixo da hierarquia DOM do componente pai.",
    "filterOptions": "A function that determines the filtered options to be rendered on search.<br><br><strong>Signature:</strong><br><code>function(options: Array&lt;T&gt;, state: object) =&gt; Array&lt;T&gt;</code><br><em>options:</em> The options to render.<br><em>state:</em> The state of the component.",
    "filterSelectedOptions": "Se <code>true</code>, oculta as opções selecionadas da caixa de lista.",
    "forcePopupIcon": "Force the visibility display of the popup icon.",
    "freeSolo": "Se <code>true</code>, o Autocomplete é um solo livre, o que significa que a entrada do usuário não está vinculada às opções fornecidas.",
    "fullWidth": "Se <code>true</code>, o input ocupará toda a largura de seu contêiner.",
    "getLimitTagsText": "O rótulo a ser exibido quando as tags são truncadas (<code>limitTags</code>).<br><br><strong>Assinatura:</strong><br><code> function (more: number) =&gt; ReactNode</code><br><em>more:</em> O número de tags truncadas.",
    "getOptionDisabled": "Usado para determinar o estado desabilitado para uma determinada opção.<br><br><strong>Assinatura:</strong><br><code>function (option: T) =&gt; boolean</code><br><em>option:</em> A opção de teste.",
    "getOptionLabel": "Used to determine the string value for a given option. It&#39;s used to fill the input (and the list box options if <code>renderOption</code> is not provided).<br>If used in free solo mode, it must accept both the type of the options and a string.<br><br><strong>Signature:</strong><br><code>function(option: T) =&gt; string</code><br>",
    "groupBy": "Se fornecido, as opções serão agrupadas sob a string retornada. O valor groupBy também é usado como o texto para os títulos dos grupos quando <code>renderGroup</code> não é fornecido.<br><br><strong>Assinatura:</strong><br><code>function (options: T) =&gt; string</code><br><em>options:</em> As opções para grupo.",
    "handleHomeEndKeys": "Se <code>true</code>, o componente lida com  as teclas &quot;Home&quot; e &quot;End&quot; quando o pop-up estiver aberto. Deverá movimentar-se para a primeira opção e para a última opção, respectivamente.",
    "id": "Esta propriedade é usada para ajudar a implementar a lógica de acessibilidade. Se você não fornecer um ‘id’, ela retornará um ‘id’ gerado aleatoriamente.",
    "includeInputInList": "Se <code>true</code>, o destaque pode mover para a entrada.",
    "inputValue": "O valor de entrada.",
    "isOptionEqualToValue": "Usado para determinar se a opção representa o valor dado. Usa uma igualdade estrita por padrão. ⚠️ Ambos os argumentos precisam ser manipulados, uma opção só pode corresponder com um valor.<br><br><strong>Assinatura:</strong><br><code>function (option: T, value: T) =&gt; boolean</code><br><em>option:</em> A opção de teste.<br><em>value:</em> O valor a ser testado.",
    "limitTags": "O número máximo de tags que serão visíveis quando não estiver focado. Defina <code>-1</code> para desativar o limite.",
    "ListboxComponent": "O componente usado para renderizar a caixa de listagem.",
    "ListboxProps": "Props aplicadas ao elemento Listbox.",
    "loading": "If <code>true</code>, the component is in a loading state.",
    "loadingText": "Text to display when in a loading state.<br>For localization purposes, you can use the provided <a href=\"/material-ui/guides/localization/\">translations</a>.",
    "multiple": "Se <code>true</code>, o <code>value</code> deve ser um array e o menu suportará múltiplas seleções.",
    "noOptionsText": "Text to display when there are no options.<br>For localization purposes, you can use the provided <a href=\"/material-ui/guides/localization/\">translations</a>.",
    "onChange": "Callback fired when the value changes.<br><br><strong>Signature:</strong><br><code>function(event: object, value: T | T[], reason: string, details?: string) =&gt; void</code><br><em>event:</em> The event source of the callback.<br><em>value:</em> The new value of the component.<br><em>reason:</em> One of &quot;createOption&quot;, &quot;selectOption&quot;, &quot;removeOption&quot;, &quot;blur&quot; or &quot;clear&quot;.",
    "onClose": "Callback fired when the popup requests to be closed. Use in controlled mode (see open).<br><br><strong>Signature:</strong><br><code>function(event: object, reason: string) =&gt; void</code><br><em>event:</em> The event source of the callback.<br><em>reason:</em> Can be: <code>&quot;toggleInput&quot;</code>, <code>&quot;escape&quot;</code>, <code>&quot;selectOption&quot;</code>, <code>&quot;removeOption&quot;</code>, <code>&quot;blur&quot;</code>.",
    "onHighlightChange": "Callback fired when the highlight option changes.<br><br><strong>Signature:</strong><br><code>function(event: object, option: T, reason: string) =&gt; void</code><br><em>event:</em> The event source of the callback.<br><em>option:</em> The highlighted option.<br><em>reason:</em> Can be: <code>&quot;keyboard&quot;</code>, <code>&quot;auto&quot;</code>, <code>&quot;mouse&quot;</code>.",
    "onInputChange": "Callback fired when the input value changes.<br><br><strong>Signature:</strong><br><code>function(event: object, value: string, reason: string) =&gt; void</code><br><em>event:</em> The event source of the callback.<br><em>value:</em> The new value of the text input.<br><em>reason:</em> Can be: <code>&quot;input&quot;</code> (user input), <code>&quot;reset&quot;</code> (programmatic change), <code>&quot;clear&quot;</code>.",
    "onOpen": "Callback fired when the popup requests to be opened. Use in controlled mode (see open).<br><br><strong>Signature:</strong><br><code>function(event: object) =&gt; void</code><br><em>event:</em> The event source of the callback.",
    "open": "Control the popup` open state.",
    "openOnFocus": "Se <code>true</code>, o pop-up abrirá quando a entrada for focada.",
    "openText": "Override the default text for the <em>open popup</em> icon button.<br>For localization purposes, you can use the provided <a href=\"/material-ui/guides/localization/\">translations</a>.",
    "options": "Array de opções.",
    "PaperComponent": "O componente usado para renderizar o corpo do pop-up.",
    "PopperComponent": "O componente usado para posicionar o pop-up.",
    "popupIcon": "The icon to display in place of the default popup icon.",
    "readOnly": "If <code>true</code>, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.",
    "renderGroup": "Render the group.<br><br><strong>Signature:</strong><br><code>function(option: any) =&gt; ReactNode</code><br><em>option:</em> The group to render.",
    "renderInput": "Render the input.<br><br><strong>Signature:</strong><br><code>function(params: object) =&gt; ReactNode</code><br>",
    "renderOption": "Render the option, use <code>getOptionLabel</code> by default.<br><br><strong>Signature:</strong><br><code>function(props: object, option: T, state: object) =&gt; ReactNode</code><br><em>props:</em> The props to apply on the li element.<br><em>option:</em> The option to render.<br><em>state:</em> The state of the component.",
    "renderTags": "Render the selected value.<br><br><strong>Signature:</strong><br><code>function(value: Array&lt;T&gt;, getTagProps: function, ownerState: object) =&gt; ReactNode</code><br><em>value:</em> The <code>value</code> provided to the component.<br><em>getTagProps:</em> A tag props getter.<br><em>ownerState:</em> The state of the Autocomplete component.",
    "selectOnFocus": "If <code>true</code>, the input&#39;s text is selected on focus. It helps the user clear the selected value.",
    "size": "The size of the autocomplete.",
    "sx": "The system prop that allows defining system overrides as well as additional CSS styles. See the <a href=\"/system/getting-started/the-sx-prop/\">`sx` page</a> for more details.",
    "value": "The value of the autocomplete.<br>The value must have reference equality with the option in order to be selected. You can customize the equality behavior with the <code>isOptionEqualToValue</code> prop."
  },
  "classDescriptions": {
    "root": {
      "description": "Estilos aplicados ao elemento raiz."
    },
    "fullWidth": {
      "description": "Estilos aplicados para {{nodeName}} se {{conditions}}.",
      "nodeName": "o elemento raiz",
      "conditions": "<code>fullWidth={true}</code>"
    },
    "focused": {
      "description": "Pseudo-class aplicada a {{nodeName}} se {{conditions}}.",
      "nodeName": "o elemento raiz",
      "conditions": "focused"
    },
    "tag": {
      "description": "Estilos aplicados para {{nodeName}}, {{conditions}}.",
      "nodeName": "os elementos de tag",
      "conditions": "ex: os chips"
    },
    "tagSizeSmall": {
      "description": "Estilos aplicados para {{nodeName}}, {{conditions}}.",
      "nodeName": "os elementos de tag",
      "conditions": "e.g. the chips if <code>size=\"small\"</code>"
    },
    "tagSizeMedium": {
      "description": "Estilos aplicados para {{nodeName}}, {{conditions}}.",
      "nodeName": "the tag elements",
      "conditions": "e.g. the chips if <code>size=\"medium\"</code>"
    },
    "hasPopupIcon": {
      "description": "Styles applied when the popup icon is rendered."
    },
    "hasClearIcon": {
      "description": "Styles applied when the clear icon is rendered."
    },
    "inputRoot": {
      "description": "Estilos aplicados a {{nodeName}}.",
      "nodeName": "o  elemento Input"
    },
    "input": {
      "description": "Estilos aplicados a {{nodeName}}.",
      "nodeName": "o elemento input"
    },
    "inputFocused": {
      "description": "Estilos aplicados para {{nodeName}} se {{conditions}}.",
      "nodeName": "o elemento input",
      "conditions": "the input is focused"
    },
    "endAdornment": {
      "description": "Estilos aplicados a {{nodeName}}.",
      "nodeName": "o elemento endAdornment"
    },
    "clearIndicator": {
      "description": "Estilos aplicados a {{nodeName}}.",
      "nodeName": "o indicador de limpar"
    },
    "popupIndicator": {
      "description": "Estilos aplicados a {{nodeName}}.",
      "nodeName": "o indicador de pop-up"
    },
    "popupIndicatorOpen": {
      "description": "Estilos aplicados para {{nodeName}} se {{conditions}}.",
      "nodeName": "o indicador de pop-up",
      "conditions": "o pop-up estiver aberto"
    },
    "popper": {
      "description": "Estilos aplicados a {{nodeName}}.",
      "nodeName": "o elemento popper"
    },
    "popperDisablePortal": {
      "description": "Estilos aplicados para {{nodeName}} se {{conditions}}.",
      "nodeName": "o elemento popper",
      "conditions": "<code>disablePortal={true}</code>"
    },
    "paper": {
      "description": "Estilos aplicados a {{nodeName}}.",
      "nodeName": "o componente Paper"
    },
    "listbox": {
      "description": "Estilos aplicados a {{nodeName}}.",
      "nodeName": "o componente listbox"
    },
    "loading": {
      "description": "Estilos aplicados a {{nodeName}}.",
      "nodeName": "o wrapper de carregamento"
    },
    "noOptions": {
      "description": "Estilos aplicados a {{nodeName}}.",
      "nodeName": "o wrapper de sem opção"
    },
    "option": {
      "description": "Estilos aplicados a {{nodeName}}.",
      "nodeName": "os elementos de opção"
    },
    "groupLabel": {
      "description": "Estilos aplicados a {{nodeName}}.",
      "nodeName": "os elementos de label dos groupos"
    },
    "groupUl": {
      "description": "Estilos aplicados a {{nodeName}}.",
      "nodeName": "os elementos de ul dos groupos"
    }
  }
}
