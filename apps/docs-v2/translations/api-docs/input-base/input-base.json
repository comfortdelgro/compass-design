{
  "componentDescription": "`InputBase` contains as few styles as possible.\nIt aims to be a simple building block for creating an input.\nIt contains a load of style reset and some state logic.",
  "propDescriptions": {
    "autoComplete": "This prop helps users to fill forms faster, especially on mobile devices. The name can be confusing, as it&#39;s more like an autofill. You can learn more about it <a href=\"https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill\">following the specification</a>.",
    "autoFocus": "If <code>true</code>, the <code>input</code> element is focused during the first mount.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "color": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the <a href=\"https://mui.com/material-ui/customization/palette/#adding-new-colors\">palette customization guide</a>. The prop defaults to the value (<code>&#39;primary&#39;</code>) inherited from the parent FormControl component.",
    "components": "The components used for each slot inside.<br>This prop is an alias for the <code>slots</code> prop. It&#39;s recommended to use the <code>slots</code> prop instead.",
    "componentsProps": "The extra props for the slot components. You can override the existing props or add new ones.<br>This prop is an alias for the <code>slotProps</code> prop. It&#39;s recommended to use the <code>slotProps</code> prop instead, as <code>componentsProps</code> will be deprecated in the future.",
    "defaultValue": "The default value. Use when the component is not controlled.",
    "disabled": "If <code>true</code>, the component is disabled. The prop defaults to the value (<code>false</code>) inherited from the parent FormControl component.",
    "disableInjectingGlobalStyles": "If <code>true</code>, GlobalStyles for the auto-fill keyframes will not be injected/removed on mount/unmount. Make sure to inject them at the top of your application. This option is intended to help with boosting the initial rendering performance if you are loading a big amount of Input components at once.",
    "endAdornment": "End <code>InputAdornment</code> for this component.",
    "error": "If <code>true</code>, the <code>input</code> will indicate an error. The prop defaults to the value (<code>false</code>) inherited from the parent FormControl component.",
    "fullWidth": "If <code>true</code>, the <code>input</code> will take up the full width of its container.",
    "id": "The id of the <code>input</code> element.",
    "inputComponent": "The component used for the <code>input</code> element. Either a string to use a HTML element or a component.<br>⚠️ <a href=\"/material-ui/guides/composition/#caveat-with-refs\">Needs to be able to hold a ref</a>.",
    "inputProps": "<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes\">Attributes</a> applied to the <code>input</code> element.",
    "inputRef": "Pass a ref to the <code>input</code> element.",
    "margin": "If <code>dense</code>, will adjust vertical spacing. This is normally obtained via context from FormControl. The prop defaults to the value (<code>&#39;none&#39;</code>) inherited from the parent FormControl component.",
    "maxRows": "Maximum number of rows to display when multiline option is set to true.",
    "minRows": "Minimum number of rows to display when multiline option is set to true.",
    "multiline": "If <code>true</code>, a <a href=\"/material-ui/react-textarea-autosize/\">TextareaAutosize</a> element is rendered.",
    "name": "Name attribute of the <code>input</code> element.",
    "onBlur": "Callback fired when the <code>input</code> is blurred.<br>Notice that the first argument (event) might be undefined.",
    "onChange": "Callback fired when the value is changed.<br><br><strong>Signature:</strong><br><code>function(event: React.ChangeEvent&lt;HTMLTextAreaElement | HTMLInputElement&gt;) =&gt; void</code><br><em>event:</em> The event source of the callback. You can pull out the new value by accessing <code>event.target.value</code> (string).",
    "onInvalid": "Callback fired when the <code>input</code> doesn&#39;t satisfy its constraints.",
    "placeholder": "The short hint displayed in the <code>input</code> before the user enters a value.",
    "readOnly": "It prevents the user from changing the value of the field (not from interacting with the field).",
    "required": "If <code>true</code>, the <code>input</code> element is required. The prop defaults to the value (<code>false</code>) inherited from the parent FormControl component.",
    "rows": "Number of rows to display when multiline option is set to true.",
    "size": "The size of the component.",
    "slotProps": "The extra props for the slot components. You can override the existing props or add new ones.<br>This prop is an alias for the <code>componentsProps</code> prop, which will be deprecated in the future.",
    "slots": "The components used for each slot inside.<br>This prop is an alias for the <code>components</code> prop, which will be deprecated in the future.",
    "startAdornment": "Start <code>InputAdornment</code> for this component.",
    "sx": "The system prop that allows defining system overrides as well as additional CSS styles. See the <a href=\"/system/getting-started/the-sx-prop/\">`sx` page</a> for more details.",
    "type": "Type of the <code>input</code> element. It should be <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types\">a valid HTML5 input type</a>.",
    "value": "The value of the <code>input</code> element, required for a controlled component."
  },
  "classDescriptions": {
    "root": { "description": "Styles applied to the root element." },
    "formControl": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "the component is a descendant of <code>FormControl</code>"
    },
    "focused": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "the component is focused"
    },
    "disabled": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>disabled={true}</code>"
    },
    "adornedStart": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>startAdornment</code> is provided"
    },
    "adornedEnd": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>endAdornment</code> is provided"
    },
    "error": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>error={true}</code>"
    },
    "sizeSmall": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the input element",
      "conditions": "<code>size=\"small\"</code>"
    },
    "multiline": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>multiline={true}</code>"
    },
    "colorSecondary": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "the color is secondary"
    },
    "fullWidth": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>fullWidth={true}</code>"
    },
    "hiddenLabel": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>hiddenLabel={true}</code>"
    },
    "readOnly": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>readOnly={true}</code>"
    },
    "input": { "description": "Styles applied to {{nodeName}}.", "nodeName": "the input element" },
    "inputSizeSmall": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the input element",
      "conditions": "<code>size=\"small\"</code>"
    },
    "inputMultiline": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the input element",
      "conditions": "<code>multiline={true}</code>"
    },
    "inputTypeSearch": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the input element",
      "conditions": "<code>type=\"search\"</code>"
    },
    "inputAdornedStart": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the input element",
      "conditions": "<code>startAdornment</code> is provided"
    },
    "inputAdornedEnd": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the input element",
      "conditions": "<code>endAdornment</code> is provided"
    },
    "inputHiddenLabel": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the input element",
      "conditions": "<code>hiddenLabel={true}</code>"
    }
  }
}
