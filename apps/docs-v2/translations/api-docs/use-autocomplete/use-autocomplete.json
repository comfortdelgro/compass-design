{
  "hookDescription": "",
  "parametersDescriptions": {
    "autoComplete": "If <code>true</code>, the portion of the selected suggestion that has not been typed by the user,\nknown as the completion string, appears inline after the input cursor in the textbox.\nThe inline completion string is visually highlighted and has a selected state.",
    "autoHighlight": "If <code>true</code>, the first option is automatically highlighted.",
    "autoSelect": "If <code>true</code>, the selected option becomes the value of the input\nwhen the Autocomplete loses focus unless the user chooses\na different option or changes the character string in the input.\n\nWhen using <code>freeSolo</code> mode, the typed value will be the input value\nif the Autocomplete loses focus without highlighting an option.",
    "blurOnSelect": "Control if the input should be blurred when an option is selected:\n\n- <code>false</code> the input is not blurred.\n- <code>true</code> the input is always blurred.\n- <code>touch</code> the input is blurred after a touch event.\n- <code>mouse</code> the input is blurred after a mouse event.",
    "clearOnBlur": "If <code>true</code>, the input&#39;s text is cleared on blur if no value is selected.\n\nSet to <code>true</code> if you want to help the user enter a new value.\nSet to <code>false</code> if you want to help the user resume their search.",
    "clearOnEscape": "If <code>true</code>, clear all values when the user presses escape and the popup is closed.",
    "componentName": "The component name that is using this hook. Used for warnings.",
    "defaultValue": "The default value. Use when the component is not controlled.",
    "disableClearable": "If <code>true</code>, the input can&#39;t be cleared.",
    "disableCloseOnSelect": "If <code>true</code>, the popup won&#39;t close when a value is selected.",
    "disabled": "If <code>true</code>, the component is disabled.",
    "disabledItemsFocusable": "If <code>true</code>, will allow focus on disabled items.",
    "disableListWrap": "If <code>true</code>, the list box in the popup will not wrap focus.",
    "filterOptions": "A function that determines the filtered options to be rendered on search.",
    "filterSelectedOptions": "If <code>true</code>, hide the selected options from the list box.",
    "freeSolo": "If <code>true</code>, the Autocomplete is free solo, meaning that the user input is not bound to provided options.",
    "getOptionDisabled": "Used to determine the disabled state for a given option.",
    "getOptionLabel": "Used to determine the string value for a given option.\nIt&#39;s used to fill the input (and the list box options if <code>renderOption</code> is not provided).\n\nIf used in free solo mode, it must accept both the type of the options and a string.",
    "groupBy": "If provided, the options will be grouped under the returned string.\nThe groupBy value is also used as the text for group headings when <code>renderGroup</code> is not provided.",
    "handleHomeEndKeys": "If <code>true</code>, the component handles the &quot;Home&quot; and &quot;End&quot; keys when the popup is open.\nIt should move focus to the first option and last option, respectively.",
    "id": "This prop is used to help implement the accessibility logic.\nIf you don&#39;t provide an id it will fall back to a randomly generated one.",
    "includeInputInList": "If <code>true</code>, the highlight can move to the input.",
    "inputValue": "The input value.",
    "isOptionEqualToValue": "Used to determine if the option represents the given value.\nUses strict equality by default.\n⚠️ Both arguments need to be handled, an option can only match with one value.",
    "multiple": "If <code>true</code>, <code>value</code> must be an array and the menu will support multiple selections.",
    "onChange": "Callback fired when the value changes.",
    "onClose": "Callback fired when the popup requests to be closed.\nUse in controlled mode (see open).",
    "onHighlightChange": "Callback fired when the highlight option changes.",
    "onInputChange": "Callback fired when the input value changes.",
    "onOpen": "Callback fired when the popup requests to be opened.\nUse in controlled mode (see open).",
    "open": "If <code>true</code>, the component is shown.",
    "openOnFocus": "If <code>true</code>, the popup will open on input focus.",
    "options": "Array of options.",
    "readOnly": "If <code>true</code>, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.",
    "selectOnFocus": "If <code>true</code>, the input&#39;s text is selected on focus.\nIt helps the user clear the selected value.",
    "value": "The value of the autocomplete.\n\nThe value must have reference equality with the option in order to be selected.\nYou can customize the equality behavior with the <code>isOptionEqualToValue</code> prop."
  },
  "returnValueDescriptions": {
    "anchorEl": "An HTML element that is used to set the position of the component.",
    "dirty": "If <code>true</code>, the component input has some values.",
    "expanded": "If <code>true</code>, the listbox is being displayed.",
    "focused": "If <code>true</code>, the component is focused.",
    "focusedTag": "Index of the focused tag for the component.",
    "getClearProps": "Resolver for the <code>clear</code> button element&#39;s props.",
    "getInputLabelProps": "Resolver for the input label element&#39;s props.",
    "getInputProps": "Resolver for the input element&#39;s props.",
    "getListboxProps": "Resolver for the listbox component&#39;s props.",
    "getOptionProps": "Resolver for the rendered option element&#39;s props.",
    "getPopupIndicatorProps": "Resolver for the popup icon&#39;s props.",
    "getRootProps": "Resolver for the root slot&#39;s props.",
    "getTagProps": "A tag props getter.",
    "groupedOptions": "The options to render. It&#39;s either <code>T[]</code> or <code>AutocompleteGroupedOption&lt;T&gt;[]</code> if the groupBy prop is provided.",
    "id": "Id for the Autocomplete.",
    "inputValue": "The input value.",
    "popupOpen": "If <code>true</code>, the popup is open on the component.",
    "setAnchorEl": "Setter for the component <code>anchorEl</code>.",
    "value": "The value of the autocomplete."
  }
}
