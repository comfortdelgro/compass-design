{
  "componentDescription": "",
  "propDescriptions": {
    "action": "Callback fired when the component mounts. This is useful when you want to trigger an action programmatically. It supports two actions: <code>updateIndicator()</code> and <code>updateScrollButtons()</code>",
    "allowScrollButtonsMobile": "If <code>true</code>, the scroll buttons aren&#39;t forced hidden on mobile. By default the scroll buttons are hidden on mobile and takes precedence over <code>scrollButtons</code>.",
    "aria-label": "The label for the Tabs as a string.",
    "aria-labelledby": "An id or list of ids separated by a space that label the Tabs.",
    "centered": "If <code>true</code>, the tabs are centered. This prop is intended for large views.",
    "children": "O conte√∫do do componente.",
    "classes": "Sobrescreve ou extende os estilos aplicados para o componente. Veja a <a href=\"#css\">API CSS</a> abaixo para maiores detalhes.",
    "component": "The component used for the root node. Either a string to use a HTML element or a component.",
    "indicatorColor": "Determines the color of the indicator.",
    "onChange": "Callback fired when the value changes.<br><br><strong>Signature:</strong><br><code>function(event: object, value: any) =&gt; void</code><br><em>event:</em> The event source of the callback. <strong>Warning</strong>: This is a generic event not a change event.<br><em>value:</em> We default to the index of the child (number)",
    "orientation": "The group orientation (layout flow direction).",
    "ScrollButtonComponent": "The component used to render the scroll buttons.",
    "scrollButtons": "Determine behavior of scroll buttons when tabs are set to scroll:<br>- <code>auto</code> will only present them when not all the items are visible. - <code>true</code> will always present them. - <code>false</code> will never present them.<br>By default the scroll buttons are hidden on mobile. This behavior can be disabled with <code>allowScrollButtonsMobile</code>.",
    "selectionFollowsFocus": "If <code>true</code> the selected tab changes on focus. Otherwise it only changes on activation.",
    "sx": "The system prop that allows defining system overrides as well as additional CSS styles. See the <a href=\"/system/getting-started/the-sx-prop/\">`sx` page</a> for more details.",
    "TabIndicatorProps": "Props applied to the tab indicator element.",
    "TabScrollButtonProps": "Props applied to the <a href=\"/material-ui/api/tab-scroll-button/\"><code>TabScrollButton</code></a> element.",
    "textColor": "Determines the color of the <code>Tab</code>.",
    "value": "The value of the currently selected <code>Tab</code>. If you don&#39;t want any selected <code>Tab</code>, you can set this prop to <code>false</code>.",
    "variant": "Determines additional display behavior of the tabs:<br> - <code>scrollable</code> will invoke scrolling properties and allow for horizontally  scrolling (or swiping) of the tab bar.  -<code>fullWidth</code> will make the tabs grow to use all the available space,  which should be used for small views, like on mobile.  - <code>standard</code> will render the default state.",
    "visibleScrollbar": "If <code>true</code>, the scrollbar is visible. It can be useful when displaying a long vertical list of tabs."
  },
  "classDescriptions": {
    "root": {
      "description": "Estilos aplicados ao elemento raiz."
    },
    "vertical": {
      "description": "Estilos aplicados para {{nodeName}} se {{conditions}}.",
      "nodeName": "o elemento raiz",
      "conditions": "<code>orientation=\"vertical\"</code>"
    },
    "flexContainer": {
      "description": "Estilos aplicados a {{nodeName}}.",
      "nodeName": "the flex container element"
    },
    "flexContainerVertical": {
      "description": "Estilos aplicados para {{nodeName}} se {{conditions}}.",
      "nodeName": "the flex container element",
      "conditions": "<code>orientation=\"vertical\"</code>"
    },
    "centered": {
      "description": "Estilos aplicados para {{nodeName}} se {{conditions}}.",
      "nodeName": "the flex container element",
      "conditions": "<code>centered={true}</code> & <code>!variant=\"scrollable\"</code>"
    },
    "scroller": {
      "description": "Estilos aplicados a {{nodeName}}.",
      "nodeName": "the tablist element"
    },
    "fixed": {
      "description": "Estilos aplicados para {{nodeName}} se {{conditions}}.",
      "nodeName": "the tablist element",
      "conditions": "<code>!variant=\"scrollable\"</code>\b\b\b"
    },
    "scrollableX": {
      "description": "Estilos aplicados para {{nodeName}} se {{conditions}}.",
      "nodeName": "the tablist element",
      "conditions": "<code>variant=\"scrollable\"</code> and <code>orientation=\"horizontal\"</code>"
    },
    "scrollableY": {
      "description": "Estilos aplicados para {{nodeName}} se {{conditions}}.",
      "nodeName": "the tablist element",
      "conditions": "<code>variant=\"scrollable\"</code> and <code>orientation=\"vertical\"</code>"
    },
    "hideScrollbar": {
      "description": "Estilos aplicados para {{nodeName}} se {{conditions}}.",
      "nodeName": "the tablist element",
      "conditions": "<code>variant=\"scrollable\"</code> and <code>visibleScrollbar={false}</code>"
    },
    "scrollButtons": {
      "description": "Estilos aplicados a {{nodeName}}.",
      "nodeName": "the ScrollButtonComponent component"
    },
    "scrollButtonsHideMobile": {
      "description": "Estilos aplicados para {{nodeName}} se {{conditions}}.",
      "nodeName": "the ScrollButtonComponent component",
      "conditions": "<code>allowScrollButtonsMobile={true}</code>"
    },
    "indicator": {
      "description": "Estilos aplicados a {{nodeName}}.",
      "nodeName": "the TabIndicator component"
    }
  }
}
